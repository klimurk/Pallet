// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.EntityFrameworkCore;
using Pallet.ExternalDatabase.Models;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Pallet.ExternalDatabase.Context
{
    public partial class ExternalDbContext : DbContext, IExternalDbContext
    {
        public ExternalDbContext()
        {
        }

        public ExternalDbContext(DbContextOptions<ExternalDbContext> options)
            : base(options)
        {
        }
        #region dbset
        public virtual DbSet<T3dVerpackung> T3dVerpackungs { get; set; }
        //public virtual DbSet<T3dVerpackungBohrung> T3dVerpackungBohrungs { get; set; }
        public virtual DbSet<T3dVerpackungDetail> T3dVerpackungDetails { get; set; }
        //public virtual DbSet<T3dVerpackungDetailsPlattenAufteilung> T3dVerpackungDetailsPlattenAufteilungs { get; set; }
        //public virtual DbSet<T3dVerpackungMark> T3dVerpackungMarks { get; set; }
        //public virtual DbSet<T3dVerpackungObject> T3dVerpackungObjects { get; set; }
        //public virtual DbSet<T3dVerpackungObjectsDefault> T3dVerpackungObjectsDefaults { get; set; }
        //public virtual DbSet<T3dVerpackungObjectsDim> T3dVerpackungObjectsDims { get; set; }
        //public virtual DbSet<T3dVerpackungStahl> T3dVerpackungStahls { get; set; }
        //public virtual DbSet<TAbteilung> TAbteilungs { get; set; }
        //public virtual DbSet<TAdminProperty> TAdminProperties { get; set; }
        //public virtual DbSet<TAnfrage> TAnfrages { get; set; }
        //public virtual DbSet<TAnfrageArtikel> TAnfrageArtikels { get; set; }
        //public virtual DbSet<TAnfrageLieferanten> TAnfrageLieferantens { get; set; }
        //public virtual DbSet<TAnfrageNr> TAnfrageNrs { get; set; }
        //public virtual DbSet<TAngebot> TAngebots { get; set; }
        //public virtual DbSet<TAngebotPosten> TAngebotPostens { get; set; }
        //public virtual DbSet<TAnsprechpartner> TAnsprechpartners { get; set; }
        //public virtual DbSet<TAnsprechpartnerHandy> TAnsprechpartnerHandies { get; set; }
        //public virtual DbSet<TAnsprechpartnerList> TAnsprechpartnerLists { get; set; }
        //public virtual DbSet<TAnsprechpartnerListen> TAnsprechpartnerListens { get; set; }
        //public virtual DbSet<TAnsprechpartnerSchluessel> TAnsprechpartnerSchluessels { get; set; }
        //public virtual DbSet<TAppAufmassMachine> TAppAufmassMachines { get; set; }
        //public virtual DbSet<TAppAufmassMachineImg> TAppAufmassMachineImgs { get; set; }
        //public virtual DbSet<TAppAufmassMain> TAppAufmassMains { get; set; }
        //public virtual DbSet<TAppAufmassPackage> TAppAufmassPackages { get; set; }
        //public virtual DbSet<TAppAufmassPackageImg> TAppAufmassPackageImgs { get; set; }
        //public virtual DbSet<TAppComm> TAppComms { get; set; }
        //public virtual DbSet<TAppProcessCheck> TAppProcessChecks { get; set; }
        //public virtual DbSet<TAppProcessCheckItem> TAppProcessCheckItems { get; set; }
        //public virtual DbSet<TAppProcessCheckLog> TAppProcessCheckLogs { get; set; }
        //public virtual DbSet<TAppTime> TAppTimes { get; set; }
        //public virtual DbSet<TArtikel> TArtikels { get; set; }
        //public virtual DbSet<TArtikelExtern> TArtikelExterns { get; set; }
        //public virtual DbSet<TArtikelKategorie> TArtikelKategories { get; set; }
        //public virtual DbSet<TArtikelPreisHist> TArtikelPreisHists { get; set; }
        //public virtual DbSet<TArtikellieferant> TArtikellieferants { get; set; }
        //public virtual DbSet<TArtikellieferantLiefereinheit> TArtikellieferantLiefereinheits { get; set; }
        //public virtual DbSet<TArtikellieferantStaffelprei> TArtikellieferantStaffelpreis { get; set; }
        //public virtual DbSet<TArtikelstichwort> TArtikelstichworts { get; set; }
        //public virtual DbSet<TAssistentRechnung> TAssistentRechnungs { get; set; }
        public virtual DbSet<Auftrag> TAuftrags { get; set; }
        //public virtual DbSet<TAuftragKosten> TAuftragKostens { get; set; }
        //public virtual DbSet<TAuftragPostenSonstige> TAuftragPostenSonstiges { get; set; }
        //public virtual DbSet<TAuftragPostenSonstigeArtikel> TAuftragPostenSonstigeArtikels { get; set; }
        //public virtual DbSet<TAuftragPostenSonstigeTermine> TAuftragPostenSonstigeTermines { get; set; }
        //public virtual DbSet<TAuftragPostenStatus> TAuftragPostenStatuses { get; set; }
        //public virtual DbSet<TAuftragPostenZeiten> TAuftragPostenZeitens { get; set; }
        //public virtual DbSet<TAuftragUserFlag> TAuftragUserFlags { get; set; }
        //public virtual DbSet<TAuftragbestaet> TAuftragbestaets { get; set; }
        //public virtual DbSet<TAuftragbestaetPosten> TAuftragbestaetPostens { get; set; }
        //public virtual DbSet<TAusgangGutschriftausgang> TAusgangGutschriftausgangs { get; set; }
        //public virtual DbSet<TAusgangGutschriftausgangFile> TAusgangGutschriftausgangFiles { get; set; }
        //public virtual DbSet<TAusgangRechausgang> TAusgangRechausgangs { get; set; }
        //public virtual DbSet<TAusgangRechausgangFile> TAusgangRechausgangFiles { get; set; }
        //public virtual DbSet<TAuslagerung> TAuslagerungs { get; set; }
        //public virtual DbSet<TAuslagerungKundeArtikel> TAuslagerungKundeArtikels { get; set; }
        //public virtual DbSet<TAuslagerungKundeArtikelNr> TAuslagerungKundeArtikelNrs { get; set; }
        //public virtual DbSet<TAuslagerungKundeArtikelP> TAuslagerungKundeArtikelPs { get; set; }
        //public virtual DbSet<TAuslagerungKundeArtikelPAppInterface> TAuslagerungKundeArtikelPAppInterfaces { get; set; }
        //public virtual DbSet<TAuslagerungKundeArtikelPDurchPackstueck> TAuslagerungKundeArtikelPDurchPackstuecks { get; set; }
        //public virtual DbSet<TAuslagerungPackstueckAppInterface> TAuslagerungPackstueckAppInterfaces { get; set; }
        //public virtual DbSet<TAuslagerungartikel> TAuslagerungartikels { get; set; }
        //public virtual DbSet<TAusweisApartner> TAusweisApartners { get; set; }
        //public virtual DbSet<TAusweisBesucher> TAusweisBesuchers { get; set; }
        //public virtual DbSet<TBarcodeContainer> TBarcodeContainers { get; set; }
        //public virtual DbSet<TBarcodeExtdoc> TBarcodeExtdocs { get; set; }
        //public virtual DbSet<TBarcodeLieferschein> TBarcodeLieferscheins { get; set; }
        //public virtual DbSet<TBarcodeVerpackung> TBarcodeVerpackungs { get; set; }
        //public virtual DbSet<TBarcodeVlieferschein> TBarcodeVlieferscheins { get; set; }
        //public virtual DbSet<TBarcodeWareneingang> TBarcodeWareneingangs { get; set; }
        //public virtual DbSet<TBaufeld> TBaufelds { get; set; }
        //public virtual DbSet<TBeipackHolz> TBeipackHolzs { get; set; }
        //public virtual DbSet<TBeipackHolzArtikel> TBeipackHolzArtikels { get; set; }
        //public virtual DbSet<TBeipackHolzBez> TBeipackHolzBezs { get; set; }
        //public virtual DbSet<TBestellNr> TBestellNrs { get; set; }
        //public virtual DbSet<TBestellung> TBestellungs { get; set; }
        //public virtual DbSet<TBestellungartikel> TBestellungartikels { get; set; }
        //public virtual DbSet<TBodenkonstranordnungLk> TBodenkonstranordnungLks { get; set; }
        //public virtual DbSet<TBodenkonstranordnungQk> TBodenkonstranordnungQks { get; set; }
        //public virtual DbSet<TBodenkonstreinrueckLk> TBodenkonstreinrueckLks { get; set; }
        //public virtual DbSet<TBodenkonstreinrueckQk> TBodenkonstreinrueckQks { get; set; }
        //public virtual DbSet<TBodenkonstrschraubenLk> TBodenkonstrschraubenLks { get; set; }
        //public virtual DbSet<TBrettlageKonstr> TBrettlageKonstrs { get; set; }
        //public virtual DbSet<TBrettstaerke> TBrettstaerkes { get; set; }
        //public virtual DbSet<TCapiFuelEvent> TCapiFuelEvents { get; set; }
        //public virtual DbSet<TCapiTimeEvent> TCapiTimeEvents { get; set; }
        //public virtual DbSet<TChargenNr> TChargenNrs { get; set; }
        //public virtual DbSet<TColliliste> TCollilistes { get; set; }
        //public virtual DbSet<TCollilistePosten> TCollilistePostens { get; set; }
        //public virtual DbSet<TContainerTypen> TContainerTypens { get; set; }
        //public virtual DbSet<TContainerTypenBilder> TContainerTypenBilders { get; set; }
        //public virtual DbSet<TDeckel> TDeckels { get; set; }
        //public virtual DbSet<TDokumente> TDokumentes { get; set; }
        //public virtual DbSet<TEingangsNr> TEingangsNrs { get; set; }
        //public virtual DbSet<TEinlagerung> TEinlagerungs { get; set; }
        //public virtual DbSet<TEventCalendar> TEventCalendars { get; set; }
        //public virtual DbSet<TEventCalendarResource> TEventCalendarResources { get; set; }
        //public virtual DbSet<TEventTask> TEventTasks { get; set; }
        //public virtual DbSet<TExternalAuftrag> TExternalAuftrags { get; set; }
        //public virtual DbSet<TExternalFirma> TExternalFirmas { get; set; }
        //public virtual DbSet<TFemColliAnschlag> TFemColliAnschlags { get; set; }
        //public virtual DbSet<TFemColliLastflaeche> TFemColliLastflaeches { get; set; }
        //public virtual DbSet<TFemColliObject> TFemColliObjects { get; set; }
        public virtual DbSet<Firma> TFirmas { get; set; }
        //public virtual DbSet<TFirmaFuhrpark> TFirmaFuhrparks { get; set; }
        //public virtual DbSet<TFirmaGruppentyp> TFirmaGruppentyps { get; set; }
        //public virtual DbSet<TFirmaMailgruppe> TFirmaMailgruppes { get; set; }
        //public virtual DbSet<TFirmaMailgruppeEmail> TFirmaMailgruppeEmails { get; set; }
        //public virtual DbSet<TFirmaMaterialbilder> TFirmaMaterialbilders { get; set; }
        //public virtual DbSet<TFirmaRechnungsanschrift> TFirmaRechnungsanschrifts { get; set; }
        //public virtual DbSet<TFirmaTyp> TFirmaTyps { get; set; }
        //public virtual DbSet<TFirmazweigstelle> TFirmazweigstelles { get; set; }
        //public virtual DbSet<TFirmenKommMail> TFirmenKommMails { get; set; }
        //public virtual DbSet<TFreigabe> TFreigabes { get; set; }
        //public virtual DbSet<TFreigabePosten> TFreigabePostens { get; set; }
        //public virtual DbSet<TFremdboden> TFremdbodens { get; set; }
        //public virtual DbSet<TFtpServerConfig> TFtpServerConfigs { get; set; }
        //public virtual DbSet<TGefahrgut> TGefahrguts { get; set; }
        //public virtual DbSet<TGesamtpreisDetail> TGesamtpreisDetails { get; set; }
        //public virtual DbSet<TGutschrift> TGutschrifts { get; set; }
        //public virtual DbSet<TGutschriftPosten> TGutschriftPostens { get; set; }
        //public virtual DbSet<THoliday> THolidays { get; set; }
        //public virtual DbSet<TImoDetail> TImoDetails { get; set; }
        //public virtual DbSet<TImoMain> TImoMains { get; set; }
        //public virtual DbSet<TInitKonstrValue> TInitKonstrValues { get; set; }
        //public virtual DbSet<TInitbelegungvalue> TInitbelegungvalues { get; set; }
        //public virtual DbSet<TInitdimvalue> TInitdimvalues { get; set; }
        //public virtual DbSet<TInitstaerkevalue> TInitstaerkevalues { get; set; }
        //public virtual DbSet<TInterfAuftrag> TInterfAuftrags { get; set; }
        //public virtual DbSet<TInterfAuftragPosten> TInterfAuftragPostens { get; set; }
        //public virtual DbSet<TInterfAuftragPostenInhalt> TInterfAuftragPostenInhalts { get; set; }
        //public virtual DbSet<TInventarArtikel> TInventarArtikels { get; set; }
        //public virtual DbSet<TInventarArtikelVerlauf> TInventarArtikelVerlaufs { get; set; }
        //public virtual DbSet<TIppcStandard> TIppcStandards { get; set; }
        //public virtual DbSet<TKalkulation> TKalkulations { get; set; }
        //public virtual DbSet<TKalkulationAllgOptionen> TKalkulationAllgOptionens { get; set; }
        //public virtual DbSet<TKalkulationFertigung> TKalkulationFertigungs { get; set; }
        //public virtual DbSet<TKalkulationHolz> TKalkulationHolzs { get; set; }
        //public virtual DbSet<TKalkulationNagel> TKalkulationNagels { get; set; }
        //public virtual DbSet<TKalkulationPersonal> TKalkulationPersonals { get; set; }
        //public virtual DbSet<TKalkulationSchnell> TKalkulationSchnells { get; set; }
        //public virtual DbSet<TKalkulationSonstige> TKalkulationSonstiges { get; set; }
        //public virtual DbSet<TKalkulationSonstigesAllg> TKalkulationSonstigesAllgs { get; set; }
        //public virtual DbSet<TKalkulationStdwerteHolz> TKalkulationStdwerteHolzs { get; set; }
        //public virtual DbSet<TKalkulationStdwerteNaegel> TKalkulationStdwerteNaegels { get; set; }
        //public virtual DbSet<TKalkulationStdwertePersonal> TKalkulationStdwertePersonals { get; set; }
        //public virtual DbSet<TKalkulationStdwertePersonalKomplex> TKalkulationStdwertePersonalKomplexes { get; set; }
        //public virtual DbSet<TKalkulationStdwerteSonstige> TKalkulationStdwerteSonstiges { get; set; }
        //public virtual DbSet<TKalkulationVerpackung> TKalkulationVerpackungs { get; set; }
        //public virtual DbSet<TKalkulationVerpackungTemplate> TKalkulationVerpackungTemplates { get; set; }
        //public virtual DbSet<TKalkulationVerpackungTemplateField> TKalkulationVerpackungTemplateFields { get; set; }
        //public virtual DbSet<TKantholz> TKantholzs { get; set; }
        //public virtual DbSet<TKatalog> TKatalogs { get; set; }
        //public virtual DbSet<TKatalogC> TKatalogCs { get; set; }
        //public virtual DbSet<TKatalogEn> TKatalogEns { get; set; }
        //public virtual DbSet<TKhlager> TKhlagers { get; set; }
        //public virtual DbSet<TKhzukauf> TKhzukaufs { get; set; }
        //public virtual DbSet<TKnowHow> TKnowHows { get; set; }
        //public virtual DbSet<TKnowHowAttachment> TKnowHowAttachments { get; set; }
        //public virtual DbSet<TKnowHowLink> TKnowHowLinks { get; set; }
        //public virtual DbSet<TKnowHowTag> TKnowHowTags { get; set; }
        //public virtual DbSet<TKostenstelle> TKostenstelles { get; set; }
        //public virtual DbSet<TKundeContainerPreise> TKundeContainerPreises { get; set; }
        //public virtual DbSet<TKundeKgDim> TKundeKgDims { get; set; }
        //public virtual DbSet<TKundeLkAbstand> TKundeLkAbstands { get; set; }
        //public virtual DbSet<TKundeMaschineRasterprei> TKundeMaschineRasterpreis { get; set; }
        //public virtual DbSet<TKundeMeldung> TKundeMeldungs { get; set; }
        //public virtual DbSet<TKundeVerpPreise> TKundeVerpPreises { get; set; }
        //public virtual DbSet<TKundeVerpPreiseZuschlag> TKundeVerpPreiseZuschlags { get; set; }
        //public virtual DbSet<TKundeartikel> TKundeartikels { get; set; }
        //public virtual DbSet<TLadeentladestellen> TLadeentladestellens { get; set; }
        //public virtual DbSet<TLager> TLagers { get; set; }
        //public virtual DbSet<TLagerKosten> TLagerKostens { get; set; }
        //public virtual DbSet<TLagerKostenAllgdef> TLagerKostenAllgdefs { get; set; }
        //public virtual DbSet<TLagerKostenPosten> TLagerKostenPostens { get; set; }
        //public virtual DbSet<TLagerKundePreiseAuslagerung> TLagerKundePreiseAuslagerungs { get; set; }
        //public virtual DbSet<TLagerKundePreiseAuslagerungAZuschlag> TLagerKundePreiseAuslagerungAZuschlags { get; set; }
        //public virtual DbSet<TLagerKundePreiseAuslagerungArtikel> TLagerKundePreiseAuslagerungArtikels { get; set; }
        //public virtual DbSet<TLagerKundePreiseAuslagerungZuschlag> TLagerKundePreiseAuslagerungZuschlags { get; set; }
        //public virtual DbSet<TLagerKundePreiseLagerplatz> TLagerKundePreiseLagerplatzs { get; set; }
        //public virtual DbSet<TLagerKundePreiseWareneingang> TLagerKundePreiseWareneingangs { get; set; }
        //public virtual DbSet<TLagerKundePreiseWareneingangZuschlag> TLagerKundePreiseWareneingangZuschlags { get; set; }
        //public virtual DbSet<TLagerKundenWepArtikel> TLagerKundenWepArtikels { get; set; }
        //public virtual DbSet<TLagerKundenWepArtikelKorrektur> TLagerKundenWepArtikelKorrekturs { get; set; }
        //public virtual DbSet<TLagerplatz> TLagerplatzs { get; set; }
        //public virtual DbSet<TLagerverwaltung> TLagerverwaltungs { get; set; }
        //public virtual DbSet<TLagerverwaltungKorrektur> TLagerverwaltungKorrekturs { get; set; }
        //public virtual DbSet<TLagerverwaltungUmlagern> TLagerverwaltungUmlagerns { get; set; }
        //public virtual DbSet<TLieferschein> TLieferscheins { get; set; }
        //public virtual DbSet<TLieferscheinPosten> TLieferscheinPostens { get; set; }
        //public virtual DbSet<TMahnung> TMahnungs { get; set; }
        //public virtual DbSet<TMahnungen> TMahnungens { get; set; }
        //public virtual DbSet<TMailServer> TMailServers { get; set; }
        //public virtual DbSet<TMaterial> TMaterials { get; set; }
        //public virtual DbSet<TMaterialKostenstelle> TMaterialKostenstelles { get; set; }
        //public virtual DbSet<TMaterialLager> TMaterialLagers { get; set; }
        //public virtual DbSet<TMaterialLagerAddionalAllowedEinheit> TMaterialLagerAddionalAllowedEinheits { get; set; }
        //public virtual DbSet<TMaterialLagerHistory> TMaterialLagerHistories { get; set; }
        //public virtual DbSet<TMaterialLagerPlaned> TMaterialLagerPlaneds { get; set; }
        //public virtual DbSet<TNachkalkulation> TNachkalkulations { get; set; }
        //public virtual DbSet<TNachkalkulationV2> TNachkalkulationV2s { get; set; }
        //public virtual DbSet<TNeukundeLogbuch> TNeukundeLogbuches { get; set; }
        //public virtual DbSet<TNeukundeTermin> TNeukundeTermins { get; set; }
        //public virtual DbSet<TNiederlassung> TNiederlassungs { get; set; }
        //public virtual DbSet<TNotificationLieferschein> TNotificationLieferscheins { get; set; }
        //public virtual DbSet<TNr> TNrs { get; set; }
        //public virtual DbSet<TPacklisteDetailMaterial> TPacklisteDetailMaterials { get; set; }
        //public virtual DbSet<TPacklistePackstueckeDetail> TPacklistePackstueckeDetails { get; set; }
        //public virtual DbSet<TPacklistePackstueckeMain> TPacklistePackstueckeMains { get; set; }
        //public virtual DbSet<TPackmittelGebraucht> TPackmittelGebrauchts { get; set; }
        //public virtual DbSet<TPackmittelGebrauchtDetail> TPackmittelGebrauchtDetails { get; set; }
        //public virtual DbSet<TPackmittelGebrauchtEingang> TPackmittelGebrauchtEingangs { get; set; }
        //public virtual DbSet<TPalette> TPalettes { get; set; }
        //public virtual DbSet<TPaletteinitval> TPaletteinitvals { get; set; }
        //public virtual DbSet<TPbaufeldkunden> TPbaufeldkundens { get; set; }
        //public virtual DbSet<TPdeclaration> TPdeclarations { get; set; }
        //public virtual DbSet<TPdeclarationPosten> TPdeclarationPostens { get; set; }
        //public virtual DbSet<TPhrasen> TPhrasens { get; set; }
        //public virtual DbSet<TPlattenwerkstoffe> TPlattenwerkstoffes { get; set; }
        //public virtual DbSet<TPrintlist> TPrintlists { get; set; }
        //public virtual DbSet<TProcessItem> TProcessItems { get; set; }
        //public virtual DbSet<TProcessItemPackaging> TProcessItemPackagings { get; set; }
        //public virtual DbSet<TProcessType> TProcessTypes { get; set; }
        //public virtual DbSet<TProjekt> TProjekts { get; set; }
        //public virtual DbSet<TProjektAnsprechpartner> TProjektAnsprechpartners { get; set; }
        //public virtual DbSet<TProjektkunden> TProjektkundens { get; set; }
        //public virtual DbSet<TPropertiesCommon> TPropertiesCommons { get; set; }
        //public virtual DbSet<TRaumstauObjekte> TRaumstauObjektes { get; set; }
        //public virtual DbSet<TRaumstauPlanung> TRaumstauPlanungs { get; set; }
        //public virtual DbSet<TRaumstauPlanungAuftrag> TRaumstauPlanungAuftrags { get; set; }
        //public virtual DbSet<TRaumstauRaeume> TRaumstauRaeumes { get; set; }
        //public virtual DbSet<TRaumstauRelRaumeObjekte> TRaumstauRelRaumeObjektes { get; set; }
        //public virtual DbSet<TRechBuchungsText> TRechBuchungsTexts { get; set; }
        //public virtual DbSet<TRechnung> TRechnungs { get; set; }
        //public virtual DbSet<TRechnungEingang> TRechnungEingangs { get; set; }
        //public virtual DbSet<TRechnungEingangAuftrag> TRechnungEingangAuftrags { get; set; }
        //public virtual DbSet<TRechnungEingangKostenstelle> TRechnungEingangKostenstelles { get; set; }
        //public virtual DbSet<TRechnungEingangLieferschein> TRechnungEingangLieferscheins { get; set; }
        //public virtual DbSet<TRechnungEingangZahlung> TRechnungEingangZahlungs { get; set; }
        //public virtual DbSet<TRechnungLagerplatz> TRechnungLagerplatzs { get; set; }
        //public virtual DbSet<TRechnungNr> TRechnungNrs { get; set; }
        //public virtual DbSet<TRechnungPosten> TRechnungPostens { get; set; }
        //public virtual DbSet<TRechnungZahleingang> TRechnungZahleingangs { get; set; }
        //public virtual DbSet<TRechnungZahleingangMulti> TRechnungZahleingangMultis { get; set; }
        //public virtual DbSet<TRelFirmaBetreuer> TRelFirmaBetreuers { get; set; }
        //public virtual DbSet<TRelFirmaFirma> TRelFirmaFirmas { get; set; }
        //public virtual DbSet<TRelFirmaFirmaMaterial> TRelFirmaFirmaMaterials { get; set; }
        //public virtual DbSet<TRelFirmaTyp> TRelFirmaTyps { get; set; }
        //public virtual DbSet<TRelKundeVerpStandard> TRelKundeVerpStandards { get; set; }
        //public virtual DbSet<TRelUserGroup> TRelUserGroups { get; set; }
        //public virtual DbSet<TReport> TReports { get; set; }
        //public virtual DbSet<TResource> TResources { get; set; }
        public virtual DbSet<Robo> TRobos { get; set; }
        //public virtual DbSet<TRoboConfig> TRoboConfigs { get; set; }
        //public virtual DbSet<TRoboConfigFixationType> TRoboConfigFixationTypes { get; set; }
        //public virtual DbSet<TRoboConfigNailType> TRoboConfigNailTypes { get; set; }
        public virtual DbSet<PackageItem> TRoboPackageItems { get; set; }
        //public virtual DbSet<TRoboPackageItemMovingDatum> TRoboPackageItemMovingData { get; set; }
        public virtual DbSet<NailingData> TRoboPackageItemNailingData { get; set; }
        public virtual DbSet<PackageItemOrder> TRoboPackageItemProcessOrders { get; set; }
        public virtual DbSet<RobotTaskItem> TRoboTaskItems { get; set; }
        //public virtual DbSet<TRoboVerpackungPush> TRoboVerpackungPushes { get; set; }
        //public virtual DbSet<TSchnellKalkBeipack> TSchnellKalkBeipacks { get; set; }
        //public virtual DbSet<TSchnellKalkInitval> TSchnellKalkInitvals { get; set; }
        //public virtual DbSet<TSchnellKalkInitvalFertigung> TSchnellKalkInitvalFertigungs { get; set; }
        //public virtual DbSet<TSchnellKalkInitvalVerpackung> TSchnellKalkInitvalVerpackungs { get; set; }
        //public virtual DbSet<TSolasDok> TSolasDoks { get; set; }
        //public virtual DbSet<TSonderzeichen> TSonderzeichens { get; set; }
        //public virtual DbSet<TStatikBelastungstyp> TStatikBelastungstyps { get; set; }
        //public virtual DbSet<TStatikCalc> TStatikCalcs { get; set; }
        //public virtual DbSet<TStatikMaterial> TStatikMaterials { get; set; }
        //public virtual DbSet<TSteuerparagraphen> TSteuerparagraphens { get; set; }
        //public virtual DbSet<TStuetzflaechen> TStuetzflaechens { get; set; }
        //public virtual DbSet<TTankstelleBefuellung> TTankstelleBefuellungs { get; set; }
        //public virtual DbSet<TTankstelleStand> TTankstelleStands { get; set; }
        //public virtual DbSet<TTextTemplate> TTextTemplates { get; set; }
        //public virtual DbSet<TTextTemplateCommon> TTextTemplateCommons { get; set; }
        //public virtual DbSet<TTranslation> TTranslations { get; set; }
        //public virtual DbSet<TTransportAuftrag> TTransportAuftrags { get; set; }
        //public virtual DbSet<TTransportAuftragPosten> TTransportAuftragPostens { get; set; }
        //public virtual DbSet<TUmlagerungPackstueckAppInterface> TUmlagerungPackstueckAppInterfaces { get; set; }
        //public virtual DbSet<TUser> TUsers { get; set; }
        //public virtual DbSet<TUserAccountRightsAdjust> TUserAccountRightsAdjusts { get; set; }
        //public virtual DbSet<TUserAccountRole> TUserAccountRoles { get; set; }
        //public virtual DbSet<TUserCheckin> TUserCheckins { get; set; }
        //public virtual DbSet<TUserGridColor> TUserGridColors { get; set; }
        //public virtual DbSet<TUserLayout> TUserLayouts { get; set; }
        //public virtual DbSet<TUserPause> TUserPauses { get; set; }
        //public virtual DbSet<TUserProperty> TUserProperties { get; set; }
        //public virtual DbSet<TUserRight> TUserRights { get; set; }
        //public virtual DbSet<TUserRole> TUserRoles { get; set; }
        //public virtual DbSet<TUserRoleRight> TUserRoleRights { get; set; }
        //public virtual DbSet<TVciFolie> TVciFolies { get; set; }
        //public virtual DbSet<TVciHersteller> TVciHerstellers { get; set; }
        //public virtual DbSet<TVciProdukt> TVciProdukts { get; set; }
        //public virtual DbSet<TVerpAssistent> TVerpAssistents { get; set; }
        //public virtual DbSet<TVerpKonstruktion> TVerpKonstruktions { get; set; }
        public virtual DbSet<Verpackung> TVerpackungs { get; set; }
        //public virtual DbSet<TVerpackung3dMaterial> TVerpackung3dMaterials { get; set; }
        //public virtual DbSet<TVerpackungBeiblatt> TVerpackungBeiblatts { get; set; }
        //public virtual DbSet<TVerpackungBeiblattBeipack> TVerpackungBeiblattBeipacks { get; set; }
        //public virtual DbSet<TVerpackungBeiblattMatTran> TVerpackungBeiblattMatTrans { get; set; }
        //public virtual DbSet<TVerpackungBeiblattSonderz> TVerpackungBeiblattSonderzs { get; set; }
        //public virtual DbSet<TVerpackungBeiblattStuetz> TVerpackungBeiblattStuetzs { get; set; }
        //public virtual DbSet<TVerpackungBeiblattVerpMat> TVerpackungBeiblattVerpMats { get; set; }
        //public virtual DbSet<TVerpackungBerech> TVerpackungBereches { get; set; }
        //public virtual DbSet<TVerpackungEinbauten> TVerpackungEinbautens { get; set; }
        //public virtual DbSet<TVerpackungFremdDetail> TVerpackungFremdDetails { get; set; }
        //public virtual DbSet<TVerpackungFremdMain> TVerpackungFremdMains { get; set; }
        //public virtual DbSet<TVerpackungKundeChecker> TVerpackungKundeCheckers { get; set; }
        //public virtual DbSet<TVerpackungKundeCheckerStd> TVerpackungKundeCheckerStds { get; set; }
        //public virtual DbSet<TVerpackungMachine> TVerpackungMachines { get; set; }
        //public virtual DbSet<TVerpackungMain> TVerpackungMains { get; set; }
        //public virtual DbSet<TVerpackungMulti> TVerpackungMultis { get; set; }
        //public virtual DbSet<TVerpackungNrList> TVerpackungNrLists { get; set; }
        //public virtual DbSet<TVerpackungNrListSmall> TVerpackungNrListSmalls { get; set; }
        //public virtual DbSet<TVerpackungPreiskat> TVerpackungPreiskats { get; set; }
        //public virtual DbSet<TVerpackungPreiskatLief> TVerpackungPreiskatLiefs { get; set; }
        //public virtual DbSet<TVerpackungSonstigesHolz> TVerpackungSonstigesHolzs { get; set; }
        //public virtual DbSet<TVerpackungStaffelprei> TVerpackungStaffelpreis { get; set; }
        //public virtual DbSet<TVerpackungStatikParam> TVerpackungStatikParams { get; set; }
        //public virtual DbSet<TVerpackungStatusZeiten> TVerpackungStatusZeitens { get; set; }
        //public virtual DbSet<TVerpackungStuetzflaechen> TVerpackungStuetzflaechens { get; set; }
        //public virtual DbSet<TVerpackungTypMapping> TVerpackungTypMappings { get; set; }
        //public virtual DbSet<TVerpackungZeiten> TVerpackungZeitens { get; set; }
        //public virtual DbSet<TVerpackungsNr> TVerpackungsNrs { get; set; }
        //public virtual DbSet<TVerpackungsNrEinbauten> TVerpackungsNrEinbautens { get; set; }
        //public virtual DbSet<TVersandArtikel> TVersandArtikels { get; set; }
        //public virtual DbSet<TVersandArtikelAufmass> TVersandArtikelAufmasses { get; set; }
        //public virtual DbSet<TVersandArtikelBlacklist> TVersandArtikelBlacklists { get; set; }
        //public virtual DbSet<TVersandArtikelVerpackung> TVersandArtikelVerpackungs { get; set; }
        //public virtual DbSet<TVersandArtikelWareneing> TVersandArtikelWareneings { get; set; }
        //public virtual DbSet<TVersandColli> TVersandCollis { get; set; }
        //public virtual DbSet<TVersandContainer> TVersandContainers { get; set; }
        //public virtual DbSet<TVersandImportConf> TVersandImportConfs { get; set; }
        //public virtual DbSet<TVersandLabelBegleitliste> TVersandLabelBegleitlistes { get; set; }
        //public virtual DbSet<TVersandLkw> TVersandLkws { get; set; }
        //public virtual DbSet<TVersandPackstueck> TVersandPackstuecks { get; set; }
        //public virtual DbSet<TVlieferschein> TVlieferscheins { get; set; }
        //public virtual DbSet<TVlieferscheinPosten> TVlieferscheinPostens { get; set; }
        //public virtual DbSet<TWareneingang> TWareneingangs { get; set; }
        //public virtual DbSet<TWareneingangartikel> TWareneingangartikels { get; set; }
        //public virtual DbSet<TWareneingangpackstueck> TWareneingangpackstuecks { get; set; }
        //public virtual DbSet<TWareneingangpackstueckBarcode> TWareneingangpackstueckBarcodes { get; set; }
        //public virtual DbSet<TWhatsNew> TWhatsNews { get; set; }
        //public virtual DbSet<TWorkerBestellung> TWorkerBestellungs { get; set; }
        //public virtual DbSet<TWorkerBestellungPo> TWorkerBestellungPos { get; set; }
        //public virtual DbSet<TZuschnittPlattenwerkstoff> TZuschnittPlattenwerkstoffs { get; set; }
        //public virtual DbSet<TZuschnittPlattenwerkstoffFinal> TZuschnittPlattenwerkstoffFinals { get; set; }
        //public virtual DbSet<TZuschnittSchnittholz> TZuschnittSchnittholzs { get; set; }
        //public virtual DbSet<TZuschnittStation> TZuschnittStations { get; set; }
        //public virtual DbSet<TZuschnittStationCfg> TZuschnittStationCfgs { get; set; }
        //public virtual DbSet<TZuschnittStationHolzart> TZuschnittStationHolzarts { get; set; }

        #endregion dbset
        //        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        //        {
        //            if (!optionsBuilder.IsConfigured)
        //            {
        //#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
        //                optionsBuilder.UseMySQL("server=192.168.0.50;user id=cratemaker;password=maker;persistsecurityinfo=True;database=p_cratemaker", Microsoft.EntityFrameworkCore.ServerVersion.Parse("8.0.29-mysql"));
        //            }
        //        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.UseCollation("utf8mb4_unicode_ci").HasCharSet("utf8mb4");

            modelBuilder.Entity<T3dVerpackung>(entity =>
            {
                entity.HasKey(e => e.CId)
                    .HasName("PRIMARY");

                entity.HasComment("Hauptdatensatz für die 3D Darstellung der Verpackung");

                entity.Property(e => e.NKranAnschlagL)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Krananschlag links");

                entity.Property(e => e.NKranAnschlagR)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Krananschlag rechts");

                entity.Property(e => e.NSeite1Offset)
                    .HasDefaultValueSql("'0'")
                    .HasComment("bei LA Verp. <> 0");

                entity.Property(e => e.NSeite2Offset)
                    .HasDefaultValueSql("'0'")
                    .HasComment("bei LA Verp. <> 0");

                entity.Property(e => e.NVerpId).HasComment("Teil des PK von t_verpackung, t_palette");

                entity.Property(e => e.NVerpTypId).HasComment("t_katalog, kat_grp = 23, Teil des PK von t_verpackung, t_palette");
            });

            modelBuilder.Entity<T3dVerpackungBohrung>(entity =>
            {
                entity.HasKey(e => new { e.CId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("3D Daten der Bohrung zur Verpackung, Referenz auf ein t_3d_verpackung_detail (Kantholz, ..)");

                entity.Property(e => e.NId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<T3dVerpackungDetail>(entity =>
            {
                entity.HasKey(e => new { e.CId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Speichert die einzelnen Details der Kantholz, Brett, Plattenwerkstoff im 3D Raum");

                entity.Property(e => e.NId).ValueGeneratedOnAdd();

                entity.Property(e => e.NBreiteOrg).HasDefaultValueSql("'0'");

                entity.Property(e => e.NEndeAngeschraegt).HasDefaultValueSql("'0'");

                entity.Property(e => e.NHolzDetailTyp).HasComment("for texture");

                entity.Property(e => e.NHolzTyp).HasComment("for texture 1=Kantholz, Brett, Plattenwerkstoff, Diele, NutUndFeder, FallendeBreiten, Kloetze");

                entity.Property(e => e.NKeilRechts).HasDefaultValueSql("'1'");

                entity.Property(e => e.NMaterialId).HasComment("kat_grp=6");

                entity.Property(e => e.NPartIdRobo)
                    .HasDefaultValueSql("'0'")
                    .HasComment("1=side/Seite, 2=lid/Deckel, 3=end/Kopf, 4=bottom/Boden");
            });

            modelBuilder.Entity<T3dVerpackungDetailsPlattenAufteilung>(entity =>
            {
                entity.HasKey(e => new { e.CId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Speichert die Aufteilung des Plattenwerkstoffs der einzelnen Elemente im 3D Raum. Damit der Robo weiß, welche Platte wo abgelegt wird.");

                entity.Property(e => e.NId).ValueGeneratedOnAdd();

                entity.Property(e => e.NHolzDetailPart).HasComment("Wird dann genutzt, wenn Elemente wie Seite geteilt werden, bedingt durch Überbreite");

                entity.Property(e => e.NHolzDetailTyp).HasComment("siehe HolzElementDetailTyp 36=Verschalung Kopf, 37=Verscahlung Seite, 38=Verschalung Deckel");
            });

            modelBuilder.Entity<T3dVerpackungMark>(entity =>
            {
                entity.HasKey(e => new { e.CId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Speichert die 3D Daten der Markierung oder Sonderzeichen einer Verpackung");

                entity.Property(e => e.NId).ValueGeneratedOnAdd();

                entity.Property(e => e.NAllignHorz).HasDefaultValueSql("'0'");

                entity.Property(e => e.NAllignVert).HasDefaultValueSql("'0'");

                entity.Property(e => e.NTypId).HasComment("Verweis auf t_katalog.kat_grp=3, 1=Freitext, 3012=Schirm, 3001=Glas, 3000=Pfeile");
            });

            modelBuilder.Entity<T3dVerpackungObject>(entity =>
            {
                entity.HasKey(e => e.OId)
                    .HasName("PRIMARY");

                entity.HasComment("3D Objekte des CAD Moduls");
            });

            modelBuilder.Entity<T3dVerpackungObjectsDefault>(entity =>
            {
                entity.HasKey(e => e.CId)
                    .HasName("PRIMARY");

                entity.HasComment("Templates für das 3D CAD Modul");

                entity.Property(e => e.CId).ValueGeneratedNever();
            });

            modelBuilder.Entity<T3dVerpackungObjectsDim>(entity =>
            {
                entity.HasKey(e => e.OId)
                    .HasName("PRIMARY");
            });

            modelBuilder.Entity<T3dVerpackungStahl>(entity =>
            {
                entity.HasKey(e => new { e.CId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Speicehrt die Stahl Elemente im 3D Raum einer Verpackung.");

                entity.Property(e => e.NId).ValueGeneratedOnAdd();

                entity.Property(e => e.NTypId).HasComment("1=Deckelsicherung, 2=Kopfwinkel-L, 3=Kopfwinkel-L, 4=U-Eisen, 5=Schlossschraube");
            });

            modelBuilder.Entity<TAbteilung>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Tabelle wird für Worker und Statistik genutzt. Die interne Abteilung (Fertigung 1, Verpackung 5,...) wo sich die MA anmelden für die Zeiterfassung an-/abmelden und Pause.");
            });

            modelBuilder.Entity<TAdminProperty>(entity =>
            {
                entity.HasComment("Speichert Eigenschaften des Cratemaker Admin");
            });

            modelBuilder.Entity<TAnfrage>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Sammelanfrage an Lieferanten. Z.B. Bestimmte Holzdimensionen bei x Lieferanten anfragen.");

                entity.Property(e => e.DCreated).HasDefaultValueSql("'0000-00-00 00:00:00'");

                entity.Property(e => e.DLastmodified)
                    .ValueGeneratedOnAddOrUpdate()
                    .HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.NAndereLiefAnschrift).HasDefaultValueSql("'0'");

                entity.Property(e => e.NNettoZahlbarTage).HasDefaultValueSql("'0'");

                entity.Property(e => e.NSkonto).HasDefaultValueSql("'0.00'");

                entity.Property(e => e.NSkontoZahlbarTage).HasDefaultValueSql("'0'");
            });

            modelBuilder.Entity<TAnfrageArtikel>(entity =>
            {
                entity.HasKey(e => new { e.NId, e.NAnfrageId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Die Liste der Artikel die bei den Lieferanten angefragt werden.");

                entity.Property(e => e.NId).ValueGeneratedOnAdd();

                entity.Property(e => e.DCreated).HasDefaultValueSql("'0000-00-00 00:00:00'");

                entity.Property(e => e.NArtikelId)
                    .HasDefaultValueSql("'0'")
                    .HasComment("FK t_artikel.n_id");
            });

            modelBuilder.Entity<TAnfrageLieferanten>(entity =>
            {
                entity.HasKey(e => new { e.NAnfrageId, e.NLieferantId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Die Liste der anzufragenden Lieferanten für die Anfrage");

                entity.Property(e => e.NAnfrageId).HasComment("Anfrage Id");
            });

            modelBuilder.Entity<TAnfrageNr>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Mit Hilfe der Nr. wird die Anfrage-Nr. generiert und gespeichert");

                entity.Property(e => e.DCreated).HasDefaultValueSql("'0000-00-00 00:00:00'");
            });

            modelBuilder.Entity<TAngebot>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Der Hauptdatensatz für das Angebot gegenüber Kunden. Die einzelnen Posten des Angebots werden in der Tabelle t_angebot_posten gespeichert.");

                entity.Property(e => e.DGeaendertAm).HasComment("Datum wann der Datensatz geändert wurde");

                entity.Property(e => e.DGedruckt).HasComment("Zeit wann Angebot gedruckt wurde");

                entity.Property(e => e.NKeinAuftrag).HasDefaultValueSql("'0'");

                entity.Property(e => e.NMitGesamtsumme).HasDefaultValueSql("'1'");

                entity.Property(e => e.NMwst).HasDefaultValueSql("'16.00'");

                entity.Property(e => e.NSortierungAusdruckPostenPos).HasDefaultValueSql("'0'");

                entity.Property(e => e.NUserIdErstellt).HasComment("ID des Benutzers der den Datensatz erstellt hat.");

                entity.Property(e => e.NUserIdGeaendert).HasComment("ID des Benutzers der den Datensatz geändert hat.");
            });

            modelBuilder.Entity<TAngebotPosten>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Die einzelnen Posten des Angebots.");

                entity.Property(e => e.DCreated)
                    .ValueGeneratedOnAddOrUpdate()
                    .HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.NAuftragPostenId).HasComment("Gefüllt, wenn der Posten keine Verpackung ist.");

                entity.Property(e => e.NEinzelgewicht)
                    .HasDefaultValueSql("'1'")
                    .HasComment("0=Gesamtgewicht; 1=Einzelgewicht' AFTER `n_gewicht_tara");

                entity.Property(e => e.NMitMwst).HasDefaultValueSql("'1'");

                entity.Property(e => e.NRabatt).HasDefaultValueSql("'0'");

                entity.Property(e => e.NRabattWert).HasDefaultValueSql("'0.00'");

                entity.Property(e => e.NTransportAuftragId).HasComment("Gefüllt, wenn es ein Transportauftrag ist.");

                entity.Property(e => e.NTypId).HasComment("Auftragspostentyp t_katalog.kat_grp = 61");

                entity.Property(e => e.NVerpId).HasComment("Gefüllt wenn es eine Verpackung ist t_verpackung_main.n_id");

                entity.Property(e => e.NVerpTypId).HasComment("Gefüllt wenn es eine Verpackung ist t_verpackung_main.n_typ_id");

                entity.Property(e => e.NWaehrungId)
                    .HasDefaultValueSql("'1'")
                    .HasComment("kat_grp=25");
            });

            modelBuilder.Entity<TAnsprechpartner>(entity =>
            {
                entity.HasKey(e => new { e.FirmaId, e.AnpId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Anprechpartner einer Firma");

                entity.Property(e => e.AnpId).ValueGeneratedOnAdd();

                entity.Property(e => e.CPrivGeburtstagErinnerungMin).HasComment("Anzahl der Minuten vor dem Geburtstag");

                entity.Property(e => e.NAktiv).HasDefaultValueSql("'1'");

                entity.Property(e => e.NAnredeId).HasComment("t_katalog.kat_grp = 30");

                entity.Property(e => e.NIsResource).HasDefaultValueSql("'0'");

                entity.Property(e => e.NPrivGebViewCal).HasDefaultValueSql("'0'");

                entity.Property(e => e.NResourceId).HasComment("reference t_resource");
            });

            modelBuilder.Entity<TAnsprechpartnerHandy>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Mobilfunkgerät der Anspechpartner. Wird genutzt für die Crate Apps.");
            });

            modelBuilder.Entity<TAnsprechpartnerList>(entity =>
            {
                entity.HasKey(e => new { e.NListId, e.NAnspId, e.NFirmaId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                entity.HasComment("Liste der bevorzugten Ansprechpartner, welche in der Hauptmaske angezeigt werden.");

                entity.Property(e => e.NListId).HasComment("FK t_ansprechpartner_listen.n_id");
            });

            modelBuilder.Entity<TAnsprechpartnerListen>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Listenkonfiguration der Ansprechpartner in Abhängigkeit des Cratemaker-Benutzers");

                entity.Property(e => e.NUserId).HasComment("Wenn NULL ist es eine öffentliche Liste, sonst t_user.n_id");
            });

            modelBuilder.Entity<TAnsprechpartnerSchluessel>(entity =>
            {
                entity.HasKey(e => new { e.NFirmaId, e.NAnspId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                entity.HasComment("Schlüsselliste der eigenen MA. Welcher MA hat wann welchen Schlüssel bekommen.");

                entity.Property(e => e.NId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<TAppAufmassMachine>(entity =>
            {
                entity.HasKey(e => new { e.NMainId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("App Crate Builder. Aufgemssene Maschinendaten zu einem Aufmaß.");

                entity.Property(e => e.NMainId).HasComment("FK t_app_aufmass_main.n_id");

                entity.Property(e => e.NId).ValueGeneratedOnAdd();

                entity.Property(e => e.NBreite).HasDefaultValueSql("'0'");

                entity.Property(e => e.NCorrosionDays).HasDefaultValueSql("'0'");

                entity.Property(e => e.NCorrosionIndicator).HasDefaultValueSql("'0'");

                entity.Property(e => e.NCorrosionType)
                    .HasDefaultValueSql("'0'")
                    .HasComment("0=none, pe, al, sf, vci");

                entity.Property(e => e.NDeliveryType)
                    .HasDefaultValueSql("'0'")
                    .HasComment("0=none, air, sea, rail, road");

                entity.Property(e => e.NDimType)
                    .HasDefaultValueSql("'0'")
                    .HasComment("0=none, innen, aussen, maschine");

                entity.Property(e => e.NGewicht).HasDefaultValueSql("'0'");

                entity.Property(e => e.NHoehe).HasDefaultValueSql("'0'");

                entity.Property(e => e.NLaenge).HasDefaultValueSql("'0'");

                entity.Property(e => e.NPackageId).HasComment("NULL oder t_app_aufmass_package.n_id");

                entity.Property(e => e.NPackageType)
                    .HasDefaultValueSql("'0'")
                    .HasComment("0=none, pallet, box, crate, carriage, kako");
            });

            modelBuilder.Entity<TAppAufmassMachineImg>(entity =>
            {
                entity.HasKey(e => new { e.NMainId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Aufmass App Bilder zum Objekt Maschine.");

                entity.Property(e => e.NId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<TAppAufmassMain>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.Property(e => e.NAuftragId).HasDefaultValueSql("'0'");

                entity.Property(e => e.NCorrosionDays).HasDefaultValueSql("'0'");

                entity.Property(e => e.NCorrosionIndicator).HasDefaultValueSql("'0'");

                entity.Property(e => e.NCorrosionType)
                    .HasDefaultValueSql("'0'")
                    .HasComment("0=none, pe, al, sf, vci");

                entity.Property(e => e.NDeliveryType)
                    .HasDefaultValueSql("'0'")
                    .HasComment("0=none, air, sea, rail, road");

                entity.Property(e => e.NPackageType)
                    .HasDefaultValueSql("'0'")
                    .HasComment("0=none, pallet, box, crate, carriage, kako");
            });

            modelBuilder.Entity<TAppAufmassPackage>(entity =>
            {
                entity.HasKey(e => new { e.NMainId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.Property(e => e.NId).ValueGeneratedOnAdd();

                entity.Property(e => e.NBreite).HasDefaultValueSql("'0'");

                entity.Property(e => e.NCorrosionDays).HasDefaultValueSql("'0'");

                entity.Property(e => e.NCorrosionIndicator).HasDefaultValueSql("'0'");

                entity.Property(e => e.NCorrosionType)
                    .HasDefaultValueSql("'0'")
                    .HasComment("0=none, pe, al, sf, vci");

                entity.Property(e => e.NDeliveryType)
                    .HasDefaultValueSql("'0'")
                    .HasComment("0=none, air, sea, rail, road");

                entity.Property(e => e.NDimType)
                    .HasDefaultValueSql("'0'")
                    .HasComment("0=none, innen, aussen, maschine");

                entity.Property(e => e.NGewicht).HasDefaultValueSql("'0'");

                entity.Property(e => e.NHoehe).HasDefaultValueSql("'0'");

                entity.Property(e => e.NLaenge).HasDefaultValueSql("'0'");

                entity.Property(e => e.NPackageType)
                    .HasDefaultValueSql("'0'")
                    .HasComment("0=none, pallet, box, crate, carriage, kako");
            });

            modelBuilder.Entity<TAppAufmassPackageImg>(entity =>
            {
                entity.HasKey(e => new { e.NMainId, e.NPackageId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                entity.HasComment("Aufmas App Bilder zum Objekt Packstück");

                entity.Property(e => e.NId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<TAppComm>(entity =>
            {
                entity.HasKey(e => new { e.NUserId, e.CApp })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Dient zur Kommunikation zwischen den Anwendungen mit Parametern.");

                entity.Property(e => e.NUserId).ValueGeneratedOnAdd();

                entity.Property(e => e.DCreated)
                    .ValueGeneratedOnAddOrUpdate()
                    .HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.NMsgId)
                    .HasDefaultValueSql("'0'")
                    .HasComment("message id der aufrufenden Anwendung");
            });

            modelBuilder.Entity<TAppProcessCheck>(entity =>
            {
                entity.HasKey(e => e.CId)
                    .HasName("PRIMARY");

                entity.HasComment("records will be created when the user scans barcode with CratePackaging");

                entity.Property(e => e.CProcessState).HasComment("running, pause, finish");

                entity.Property(e => e.NProcessTypeId).HasComment("1=packaging process, 2=delivery note process");
            });

            modelBuilder.Entity<TAppProcessCheckItem>(entity =>
            {
                entity.HasKey(e => e.CId)
                    .HasName("PRIMARY");

                entity.HasComment("item list for each process");

                entity.Property(e => e.CProcessItemId).HasComment("in case of t_app_process_check.n_process_type_id=1 \nc_process_item_id = t_wareneingangpackstueck.c_id");

                entity.Property(e => e.NDone).HasComment("indicates when the item is processed");
            });

            modelBuilder.Entity<TAppProcessCheckLog>(entity =>
            {
                entity.HasKey(e => e.CId)
                    .HasName("PRIMARY");

                entity.HasComment("logging when the user interact with the app. we have to known who, when made what");

                entity.Property(e => e.CProcessState).HasComment("running, pause, finish");
            });

            modelBuilder.Entity<TAppTime>(entity =>
            {
                entity.HasKey(e => new { e.CDeviceId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("App CrateTime Datensatz der von der App übermittelt wird.");

                entity.Property(e => e.NId).ValueGeneratedOnAdd();

                entity.Property(e => e.DTaskTime).HasDefaultValueSql("'0000-00-00 00:00:00'");

                entity.Property(e => e.NProcessType).HasComment("Prozesstyp zu dem die Zeit gemessen wurde t_process_type.n_id");
            });

            modelBuilder.Entity<TArtikel>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Speicehrt alle  Artikel die eingekauft und verkauft werden.");

                entity.Property(e => e.DLastmodified)
                    .ValueGeneratedOnAddOrUpdate()
                    .HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.NBehandlungsartId)
                    .HasDefaultValueSql("'1'")
                    .HasComment("kat_grp=5");

                entity.Property(e => e.NBeipack)
                    .HasDefaultValueSql("'0'")
                    .HasComment("1=Wird im Beiblatt der Verpackung zur Auswahl zur Verfügung gestellt");

                entity.Property(e => e.NBreiteBausatz)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Breite des Artikel, wenn dieser nicht zusammen gebaut ist");

                entity.Property(e => e.NEinheitId).HasComment("kat_grp=11");

                entity.Property(e => e.NEkCalcPreis).HasComment("Wenn der gesetzt ist, wird dieser Preis bei der Feinkalkulation genutzt und nicht der Lieferantenpreis.");

                entity.Property(e => e.NGewichtTara).HasDefaultValueSql("'0'");

                entity.Property(e => e.NHandelsware)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Handelsware wird im WE in Lager gebucht");

                entity.Property(e => e.NHoeheBausatz)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Höhe des Artikel, wenn dieser nicht zusammen gebaut ist");

                entity.Property(e => e.NHolzTypId)
                    .HasDefaultValueSql("'0'")
                    .HasComment("kat_grp=10");

                entity.Property(e => e.NHolzmaterialId).HasComment("kat_grp=6");

                entity.Property(e => e.NHolztypId1).HasComment("kat_grp=27");

                entity.Property(e => e.NIntern).HasComment("1=steht in der Artikelauswahl in der Auftragsverwaltung zur Verfügung");

                entity.Property(e => e.NKalkTypId).HasComment("kat_grp=71");

                entity.Property(e => e.NKategorieId).HasComment("Artikel Kategorie t_artikel_kategorie, dient als Filter");

                entity.Property(e => e.NKategorieSubId).HasComment("Unterkategorie t_artikel_kategorie, dient als Filter");

                entity.Property(e => e.NKostenstelleId).HasComment("t_kostenstelle");

                entity.Property(e => e.NLaenge).HasComment("Länge des Artikels");

                entity.Property(e => e.NLaengeBausatz)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Länge des Artikel, wenn dieser nicht zusammen gebaut ist");

                entity.Property(e => e.NNagelsorteId).HasComment("kat_grp=26");

                entity.Property(e => e.NPreis).HasComment("Verakufspreis");

                entity.Property(e => e.NSchnellkalEinmalZuschlag).HasComment("Zuschlag bei der Kalkulation, wenn der Artikel im Beibaltt ausgewählt wurde");

                entity.Property(e => e.NSubTypId)
                    .HasDefaultValueSql("'101'")
                    .HasComment("kat_grp=61");

                entity.Property(e => e.NTypId)
                    .HasDefaultValueSql("'0'")
                    .HasComment("1=Artikel 2=Holz 3=Nagel");

                entity.Property(e => e.NZn)
                    .HasDefaultValueSql("'0'")
                    .HasComment("zusammen genagelt");
            });

            modelBuilder.Entity<TArtikelExtern>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Externer Artikel der vom Losteilsystem genutzt wird");

                entity.Property(e => e.DImportDatum).HasDefaultValueSql("'0000-00-00'");
            });

            modelBuilder.Entity<TArtikelKategorie>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Kategorie und Unterkategorie um Artikel zu filtern");

                entity.Property(e => e.NParentId).HasComment("Gesetzt mit der t_artikel_kategorie.n_id und kennzeichnet somit eine Unterkategorie");
            });

            modelBuilder.Entity<TArtikelPreisHist>(entity =>
            {
                entity.HasKey(e => new { e.NArtikelId, e.NFirmaId, e.DDatum })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                entity.HasComment("Preishistorie der Lieferantenartikel");

                entity.Property(e => e.DDatum).HasDefaultValueSql("'0000-00-00'");
            });

            modelBuilder.Entity<TArtikellieferant>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Verküpfung einer Artikels mit einem Lieferanten.");

                entity.Property(e => e.NArtikelId).HasComment("t_artikel.n_id");

                entity.Property(e => e.NDeaktiviert).HasDefaultValueSql("'0'");

                entity.Property(e => e.NEinheit).HasComment("kat_grp=11");

                entity.Property(e => e.NLagerLieferFaktor).HasComment("Umrechnung von Lierfereinheit auf Lagereinheit");

                entity.Property(e => e.NLieferantenId).HasComment("t_firma.firmakey");

                entity.Property(e => e.NLiefermengeUnbekannt).HasDefaultValueSql("'0'");

                entity.Property(e => e.NPreis).HasComment("Einkaufspreis bzw. Verkaufspreis vom Lieferanten");

                entity.Property(e => e.NVerkaufsPreis).HasComment("obsolete");

                entity.Property(e => e.NWaehrungId)
                    .HasDefaultValueSql("'0'")
                    .HasComment("kat_grp = 25");
            });

            modelBuilder.Entity<TArtikellieferantLiefereinheit>(entity =>
            {
                entity.HasKey(e => new { e.NArtikellieferantId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Liefereinheiten eines Lieferanten. Mapping von Umverpackung auf Einzelgroessen. In einem Karton sind 50 Einzelgroessen enthalten.");

                entity.Property(e => e.NId).ValueGeneratedOnAdd();

                entity.Property(e => e.NEinheitId).HasComment("kat_grp=11");

                entity.Property(e => e.NFaktor).HasComment("Fakto wie oft die Einzelgroesse in der Einheit enthalten ist");
            });

            modelBuilder.Entity<TArtikellieferantStaffelprei>(entity =>
            {
                entity.HasKey(e => new { e.NArtikellieferantId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Staffelpreise des Liefranten in Abhängigkeit von Mengen.");

                entity.Property(e => e.NId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<TArtikelstichwort>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Stichwörter für Artikel die bei der Artiklesuche berücksichitgt werden.");
            });

            modelBuilder.Entity<TAssistentRechnung>(entity =>
            {
                entity.HasKey(e => e.NKundeId)
                    .HasName("PRIMARY");

                entity.HasComment("Optionale Bemerkungen zum Kunden die auf die Rechnungen des Kunden gedrcukt werden.");

                entity.Property(e => e.NKundeId).ValueGeneratedNever();
            });

            modelBuilder.Entity<Auftrag>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Anfragen und Aufträge eines Kunden");

                entity.Property(e => e.CExtsysAuftragsArt).HasComment("A   Anfrage, AV  Anfrage Verpackung, VI  Verpackung intern, VE  Verpackung extern, S   Bestellung schriftlich, B   Bestellung mündlich, SH  Bestellung schriftlich Handelsware, BH  Bestellung mündlich Handelsware, ABR Abrufbestellung, LA  Fertigung auf Lager, EL  Einlagerung\n");

                entity.Property(e => e.CExtsysErpNr).HasComment("Nr von externen ERP System");

                entity.Property(e => e.DAbgeschlossen).HasComment("Datum, wann der Auftrag abgeschlossen wurde. Wird für externe ERP System benötigt");

                entity.Property(e => e.DAuftragErstellt).HasComment("Gesetzt wenn der Datensatz ein Auftrag ist");

                entity.Property(e => e.DCreated).HasDefaultValueSql("'0000-00-00 00:00:00'");

                entity.Property(e => e.DKundeLieferdatum).HasComment("Lieferdatum welches der Kunde vorgibt und beim Lieferschein und bei Posten vorbesetzt wird");

                entity.Property(e => e.NAbgeschlossenDurch).HasComment("Benutzer, wer den Auftrag abgeschlossen. Wird für externe ERP System benötigt");

                entity.Property(e => e.NActive)
                    .HasDefaultValueSql("'1'")
                    .HasComment("1=aktiv, 0=deaktiviert");

                entity.Property(e => e.NExtsysExport)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Kennzeichen für eine Exportsendung. Wird für externe ERP System benötigt");

                entity.Property(e => e.NIsRahmenvertrag)
                    .HasDefaultValueSql("'0'")
                    .HasComment("1= Kennzeichen, dass der Auftrag der Rahmenvertrag ist");

                entity.Property(e => e.NKuerzelId).HasComment("kat_grp=150");

                entity.Property(e => e.NLandId).HasComment("kat_grp=7");

                entity.Property(e => e.NMailgruppeVersandbestaetId).HasComment("Referenz auf t_firma_mailgruppe.n_id. Wenn ein Lieferschein eingescannt wird, wird dieser an diese Mailgruppe geschickt.");

                entity.Property(e => e.NNiederlassungId).HasDefaultValueSql("'1'");

                entity.Property(e => e.NProjektId).HasComment("t_projekt.prj_id");

                entity.Property(e => e.NRabattVerp)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Prozentualer Rabatt für Verpackungen");

                entity.Property(e => e.NRahmenvertragId)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Referenz zum Rahmenauftrag t_auftrag.n_id. Gesetzt wenn das ein Abrufauftrag zum Rahmenauftrag ist. ");

                entity.Property(e => e.NSachbearbeiterId).HasDefaultValueSql("'0'");

                entity.Property(e => e.NUserId).HasComment("t_user.n_id Benutzer der den Datensatz erstellt hat");

                entity.Property(e => e.NVerpBaufeldId).HasComment("Ort der Verpackung");

                entity.Property(e => e.NVerpVerpackungVerschrauben).HasComment("Vorbesetzung für neue Verpackungen");

                entity.Property(e => e.NYearNr).HasComment("eindeutige Nr. für die Auftrags-Nr. innerhalb eines Jahres");
            });

            modelBuilder.Entity<TAuftragKosten>(entity =>
            {
                entity.HasKey(e => new { e.NAuftragId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Angefallende Kosten basisert auf den Eingangsrechnung und Konfiguration in der Feinkalkultion");

                entity.Property(e => e.NId).ValueGeneratedOnAdd();

                entity.Property(e => e.NAutoCreated)
                    .HasDefaultValueSql("'0'")
                    .HasComment("1=vom System erstellt, 0=vom Benutzer hinzugefügt");

                entity.Property(e => e.NTypId).HasComment("kat_grp = 61");
            });

            modelBuilder.Entity<TAuftragPostenSonstige>(entity =>
            {
                entity.HasKey(e => new { e.NAuftragId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Auftragsposten Sonstige, Holzprodukt, Artikel, Container");

                entity.Property(e => e.NAuftragId).HasComment("t_auftrag.n_id");

                entity.Property(e => e.NId).ValueGeneratedOnAdd();

                entity.Property(e => e.DAusgelagert).HasComment("Datum der Auslagerung");

                entity.Property(e => e.DCreated).HasDefaultValueSql("'0000-00-00 00:00:00'");

                entity.Property(e => e.NAktiv).HasDefaultValueSql("'1'");

                entity.Property(e => e.NBehandlungsartId).HasComment("kat_grp = 5");

                entity.Property(e => e.NBreiteBausatz).HasDefaultValueSql("'0'");

                entity.Property(e => e.NBreiteI).HasComment("Innenhoehe des Packstuecks");

                entity.Property(e => e.NContTypId).HasComment("t_container_typen");

                entity.Property(e => e.NEinzelgewicht).HasComment("0=Gesamtgewicht; 1=Einzelgewicht");

                entity.Property(e => e.NFolienArt)
                    .HasDefaultValueSql("'0'")
                    .HasComment("0=kein Folienhaube, 1=Folienhaube 2=Schrumpfhaube");

                entity.Property(e => e.NGedruckt).HasDefaultValueSql("'0'");

                entity.Property(e => e.NHoeheBausatz).HasDefaultValueSql("'0'");

                entity.Property(e => e.NHoeheI).HasComment("Innenhoehe des Packstuecks");

                entity.Property(e => e.NHolzTypId).HasComment("kat_grp=10");

                entity.Property(e => e.NHolzmaterialId).HasComment("Wird für statistische Zwecke benötigt und ist gesetzt wenn n_typ_id ein Artikel ist. kat_grp=6 t_artikel.n_holzmaterial_id");

                entity.Property(e => e.NKostenstelleId).HasComment("t_kostenstelle");

                entity.Property(e => e.NKuerzelId).HasComment("kat_grp=150");

                entity.Property(e => e.NLaengeBausatz).HasDefaultValueSql("'0'");

                entity.Property(e => e.NLaengeI).HasComment("Innenhoehe des Packstuecks");

                entity.Property(e => e.NLagerId).HasComment("Lager falls ausgelagert wurde");

                entity.Property(e => e.NLagerortId).HasComment("Lagerort siehe Lager");

                entity.Property(e => e.NNiederlassungId)
                    .HasDefaultValueSql("'1'")
                    .HasComment("t_niederlassung.n_id. ID der Niderderlassung vom Login oder Auftrag");

                entity.Property(e => e.NParentAuftragId).HasComment("Gesetzt wenn Posten im Posten ist. Referenz auf t_auftrag.n_auftrag_id");

                entity.Property(e => e.NParentId).HasComment("Gesetzt wenn Posten im Posten ist. Referenz auf t_auftrag.n_id");

                entity.Property(e => e.NParentTypId).HasComment("Gesetzt wenn Posten im Posten ist. Referenz auf t_auftrag.n_typ_id");

                entity.Property(e => e.NSubTypId)
                    .HasDefaultValueSql("'101'")
                    .HasComment("Wird für statistische Zwecke benötigt und ist gesetzt wenn n_typ_id ein Artikel ist. kat_grp=61 t_artikel.n_sub_typ_id");

                entity.Property(e => e.NTypId)
                    .HasDefaultValueSql("'1'")
                    .HasComment("kat_grp=61");

                entity.Property(e => e.NVerpArt)
                    .HasDefaultValueSql("'0'")
                    .HasComment("0=unverpackt,1=verpackt,2=seem, 200=Folienverp");

                entity.Property(e => e.NWaehrungId)
                    .HasDefaultValueSql("'1'")
                    .HasComment("kat_grp=25");

                entity.Property(e => e.NZn).HasDefaultValueSql("'0'");
            });

            modelBuilder.Entity<TAuftragPostenSonstigeArtikel>(entity =>
            {
                entity.HasKey(e => new { e.NKundeId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Immer wiederkehrende Artikel eines Kunden. Kann auch mit t_artikel abgebildet werden. Spalten wie t_auftrag_posten_sonstige");

                entity.Property(e => e.NId).ValueGeneratedOnAdd();

                entity.Property(e => e.DCreated).HasDefaultValueSql("'0000-00-00 00:00:00'");

                entity.Property(e => e.NBreite).HasDefaultValueSql("'0'");

                entity.Property(e => e.NBreiteBausatz).HasDefaultValueSql("'0'");

                entity.Property(e => e.NGedruckt).HasDefaultValueSql("'0'");

                entity.Property(e => e.NGewichtTara).HasDefaultValueSql("'0'");

                entity.Property(e => e.NHoehe).HasDefaultValueSql("'0'");

                entity.Property(e => e.NHoeheBausatz).HasDefaultValueSql("'0'");

                entity.Property(e => e.NHolzTypId)
                    .HasDefaultValueSql("'0'")
                    .HasComment("kat_grp=10");

                entity.Property(e => e.NLaenge).HasDefaultValueSql("'0'");

                entity.Property(e => e.NLaengeBausatz).HasDefaultValueSql("'0'");

                entity.Property(e => e.NTypId).HasDefaultValueSql("'1'");

                entity.Property(e => e.NZn).HasDefaultValueSql("'0'");
            });

            modelBuilder.Entity<TAuftragPostenSonstigeTermine>(entity =>
            {
                entity.HasKey(e => e.CEventId)
                    .HasName("PRIMARY");

                entity.HasComment("Termine eines Auftragsposten t_auftrag_posten_sonstige");
            });

            modelBuilder.Entity<TAuftragPostenStatus>(entity =>
            {
                entity.HasKey(e => new { e.NTypId, e.NMainId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                entity.HasComment("Status eines Auftragsposten außer Holzprodukt");

                entity.Property(e => e.NTypId).HasComment("kat_grp=61");

                entity.Property(e => e.NMainId).HasComment("AuftragId, VerpTypId");

                entity.Property(e => e.NId).HasComment("PostenId, VerpId");

                entity.Property(e => e.DAuftragStart).HasComment("Datum wann der Status gesetzt wurde");

                entity.Property(e => e.DFertig).HasComment("Datum gesetzt, wenn der Status das Ende für den Gesamtprozess des Posten bedeutet. Montage-Ende wenn nicht verpackt wird.");

                entity.Property(e => e.NStatus).HasComment("kat_grp=81");
            });

            modelBuilder.Entity<TAuftragPostenZeiten>(entity =>
            {
                entity.HasKey(e => new { e.NTypId, e.NMainId, e.NId, e.NStatus })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

                entity.HasComment("Prtokoll wann der Status durch welchen Benutzer wann gesetzt wird. Alles Sonstigen Posten außer Holzprodukt.");

                entity.Property(e => e.NTypId).HasComment("kat_grp=61");

                entity.Property(e => e.NMainId).HasComment("AuftragId, VerpTypId");

                entity.Property(e => e.NId).HasComment("PostenId, VerpId");

                entity.Property(e => e.NStatus).HasComment("kat_grp=81");
            });

            modelBuilder.Entity<TAuftragUserFlag>(entity =>
            {
                entity.HasKey(e => new { e.NUserId, e.NAuftragId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Priorität und Status zu einem Auftrag. Frei definierbar. Dient zur besseren Visualisierung.");

                entity.Property(e => e.NPriority).HasComment("t_user_grid_color.n_id, c_description c_type = 'Auftragsv'\"");

                entity.Property(e => e.NStatus1).HasComment("Status 1 zum Auftrag c_type = 'AuftragsvStat'");

                entity.Property(e => e.NStatus2).HasComment("Status 2 zum Auftrag c_type = 'AuftragsvStat'");
            });

            modelBuilder.Entity<TAuftragbestaet>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Kopfdaten zur Auftragsbestätigung");

                entity.Property(e => e.DAngebotdatum).HasDefaultValueSql("'0000-00-00'");

                entity.Property(e => e.DGeaendertAm).HasComment("Datum wann der Datensatz geändert wurde");

                entity.Property(e => e.DGedruckt).HasComment("Zeit wann Dokument gedruckt wurde");

                entity.Property(e => e.NMitGesamtsumme).HasDefaultValueSql("'1'");

                entity.Property(e => e.NMwst).HasDefaultValueSql("'16.00'");

                entity.Property(e => e.NSortierungAusdruckPostenPos).HasDefaultValueSql("'0'");

                entity.Property(e => e.NUserIdErstellt).HasComment("ID des Benutzers der den Datensatz erstellt hat.");

                entity.Property(e => e.NUserIdGeaendert).HasComment("ID des Benutzers der den Datensatz geändert hat.");
            });

            modelBuilder.Entity<TAuftragbestaetPosten>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Posten zur Auftragsbestätigung");

                entity.Property(e => e.DCreated)
                    .ValueGeneratedOnAddOrUpdate()
                    .HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.NEinzelgewicht)
                    .HasDefaultValueSql("'1'")
                    .HasComment("0=Gesamtgewicht; 1=Einzelgewicht' AFTER `n_gewicht_tara");

                entity.Property(e => e.NMitMwst).HasDefaultValueSql("'1'");

                entity.Property(e => e.NRabatt).HasDefaultValueSql("'0'");

                entity.Property(e => e.NRabattWert).HasDefaultValueSql("'0.00'");

                entity.Property(e => e.NWaehrungId)
                    .HasDefaultValueSql("'1'")
                    .HasComment("kat_grp=25");
            });

            modelBuilder.Entity<TAusgangGutschriftausgang>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Protokoll welche Gutschrfiten wann exportiert bzw. übermittelt wurde");

                entity.Property(e => e.DGesendet).HasComment("Datum wann die Gutschrift exportiert wurde");

                entity.Property(e => e.NRefId).HasComment("t_gutschrift.n_id");
            });

            modelBuilder.Entity<TAusgangGutschriftausgangFile>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Exportierte Datei der Gutschrift");

                entity.Property(e => e.NId)
                    .ValueGeneratedNever()
                    .HasComment("t_ausgang_gutschriftausgang.n_id");
            });

            modelBuilder.Entity<TAusgangRechausgang>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Protokoll welche Rechnung wann exportiert bzw. übermittelt wurde");

                entity.Property(e => e.NRefId).HasComment("t_rechnung.n_id");
            });

            modelBuilder.Entity<TAusgangRechausgangFile>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Exportierte Datei der Rechnung");

                entity.Property(e => e.NId).ValueGeneratedNever();
            });

            modelBuilder.Entity<TAuslagerung>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Kopfdaten der Auslagerung");

                entity.Property(e => e.NNichtVerrechenbar).HasDefaultValueSql("'1'");

                entity.Property(e => e.NStatusId).HasComment("kat_grp=14 Status dient zu besseren Übersicht ");

                entity.Property(e => e.NUmlagerung).HasComment("1=Auslagerung für Umlagerung, 0=Auslagerung");

                entity.Property(e => e.NVerrechnet).HasDefaultValueSql("'0'");
            });

            modelBuilder.Entity<TAuslagerungKundeArtikel>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Kopfdaten zu Auslagerung von Kunden-Artikeln");

                entity.Property(e => e.NNichtVerrechenbar).HasDefaultValueSql("'1'");

                entity.Property(e => e.NStatusId).HasComment("kat_grp=14 Status dient zu besseren Übersicht ");

                entity.Property(e => e.NVerrechnet).HasDefaultValueSql("'0'");
            });

            modelBuilder.Entity<TAuslagerungKundeArtikelNr>(entity =>
            {
                entity.HasKey(e => new { e.NYear, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.Property(e => e.NId).ValueGeneratedOnAdd();

                entity.Property(e => e.DCreated).HasDefaultValueSql("'0000-00-00 00:00:00'");
            });

            modelBuilder.Entity<TAuslagerungKundeArtikelP>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Ausgelagerte Positionen zur t_auslagerung_kunde_artikel");

                entity.Property(e => e.NMainAuslPackstueckId).HasComment(" t_auslagerungartikel.n_id wenn die Spalte gesetzt ist, dann wurde das gesamte Packstueck ausgelagert");

                entity.Property(e => e.NMainId).HasComment("n_main_id = -1 gesamte Packstück wurde ausgelagert n_main_ausl_packstueck_id = t_auslagerungartikel.n_id");

                entity.Property(e => e.NVerrechnet).HasDefaultValueSql("'0'");

                entity.Property(e => e.NWepArtikelId).HasComment("t_wareneingangartikel.n_id");
            });

            modelBuilder.Entity<TAuslagerungKundeArtikelPAppInterface>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("App schreibt Anzahl auszulagernde Artikel");

                entity.Property(e => e.NWepArtikelId).HasComment("t_wareneingangartikel.n_id");

                entity.Property(e => e.NWepId).HasComment("t_wareneingangpackstueck.n_id");
            });

            modelBuilder.Entity<TAuslagerungKundeArtikelPDurchPackstueck>(entity =>
            {
                entity.HasKey(e => new { e.NMainAuslPackstueckId, e.NWepArtikelId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Ausgelagerte Positionen zur t_auslagerung_kunde_artikel, wenn Packstück ausgelagert wird");

                entity.Property(e => e.NMainAuslPackstueckId).HasComment(" t_auslagerungartikel.n_id");

                entity.Property(e => e.NWepArtikelId).HasComment("t_wareneingangartikel.n_id");

                entity.Property(e => e.NWepId).HasComment("t_wareneingangpackstueck.n_id");
            });

            modelBuilder.Entity<TAuslagerungPackstueckAppInterface>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("App schreibt Packstuecke die ausgelagert werden");
            });

            modelBuilder.Entity<TAuslagerungartikel>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Posten zur Auslagerung für Verpackungen, Artikel");

                entity.Property(e => e.NKomplettAuslagerung).HasComment("wird gesetzt, wenn eine Verpackung aus dem Lager genommen wird und die Artikelanzahl in der Verpackung unbekannt ist");

                entity.Property(e => e.NVerrechnet).HasDefaultValueSql("'0'");
            });

            modelBuilder.Entity<TAusweisApartner>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Tagesausweise für Ansprechpartner der Firmen");
            });

            modelBuilder.Entity<TAusweisBesucher>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Ausweis für Fremde die nichtt zu einer Firma als Ansprechpartner erfasst wurden.");
            });

            modelBuilder.Entity<TBarcodeContainer>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Für die Generierung von Barcodes zum Container als Auftragsposten.");

                entity.Property(e => e.NId)
                    .ValueGeneratedNever()
                    .HasComment("Container Id");

                entity.Property(e => e.NAuftragId).HasComment("Auftrag Id");

                entity.Property(e => e.NBarcodeId).HasComment("Diese Id faengt bei 0 an und wird nie groesser als 99999999");
            });

            modelBuilder.Entity<TBarcodeExtdoc>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Barcodes for external documents");
            });

            modelBuilder.Entity<TBarcodeLieferschein>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Für die Generierung von Barcodes zum Lieferschein.");

                entity.Property(e => e.NId)
                    .ValueGeneratedNever()
                    .HasComment("Lieferschein Id");

                entity.Property(e => e.NBarcodeId).HasComment("Diese Id faengt bei 0 an und wird nie groesser als 99999999");
            });

            modelBuilder.Entity<TBarcodeVerpackung>(entity =>
            {
                entity.HasKey(e => new { e.NVerpId, e.NVerpTypId, e.NVerpSubId, e.CNr })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

                entity.HasComment("Für die Generierung von Barcodes zur Verpackung und Holzprodukte.");

                entity.Property(e => e.NBarcodeId).HasComment("Diese Id faengt bei 0 an und wird nie groesser als 99999999");
            });

            modelBuilder.Entity<TBarcodeVlieferschein>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Für die Generierung von Barcodes zum Vormaterial-Lieferschein.");

                entity.Property(e => e.NId)
                    .ValueGeneratedNever()
                    .HasComment("Lieferschein Id");

                entity.Property(e => e.NBarcodeId).HasComment("Diese Id faengt bei 0 an und wird nie groesser als 99999999");
            });

            modelBuilder.Entity<TBarcodeWareneingang>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Für die Generierung von Barcodes zum Wareneingang.");

                entity.Property(e => e.NId)
                    .ValueGeneratedNever()
                    .HasComment("Wareneingang Id");

                entity.Property(e => e.NBarcodeId).HasComment("Diese Id faengt bei 0 an und wird nie groesser als 99999999");
            });

            modelBuilder.Entity<TBaufeld>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Baufeld zum Kunden oder Projekt");

                entity.Property(e => e.NFertigung)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Dient für Filter 1= Baufeld für Fertigung");

                entity.Property(e => e.NIntern)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Baufeld innerhalb der Firma und steht somit bei allen Kunden zur Auswahl");

                entity.Property(e => e.NVerpackung)
                    .HasDefaultValueSql("'1'")
                    .HasComment("Dient für Filter 1= Baufeld für Verpackung");
            });

            modelBuilder.Entity<TBeipackHolz>(entity =>
            {
                entity.HasKey(e => new { e.NVerpId, e.NVerpTypId, e.NVerpSubId, e.NPos })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

                entity.HasComment("Beipackholz zur Verpackung oder Holzprodukt");

                entity.Property(e => e.NKonstruktionsholz).HasComment("Konstruktionshoelzer wird anders bewertet - Schnellkalkulation ");

                entity.Property(e => e.NMaterialId)
                    .HasDefaultValueSql("'1'")
                    .HasComment("kat_grp=1");
            });

            modelBuilder.Entity<TBeipackHolzArtikel>(entity =>
            {
                entity.HasKey(e => new { e.NArtikelId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Beipackholz zum Artikel");

                entity.Property(e => e.NId).ValueGeneratedOnAdd();

                entity.Property(e => e.NKonstruktionsholz).HasComment("Konstruktionshoelzer wird anders bewertet");

                entity.Property(e => e.NMaterialId)
                    .HasDefaultValueSql("'1'")
                    .HasComment("kat_grp=1");
            });

            modelBuilder.Entity<TBeipackHolzBez>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Liste von Bezeichnungen die beim Beipackholz immer wieder vorkommen wie z.B. Lagerholz");
            });

            modelBuilder.Entity<TBestellNr>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Wird für die Generierung der Nr. der  Bestellung genutzt");

                entity.Property(e => e.DCreated).HasDefaultValueSql("'0000-00-00 00:00:00'");
            });

            modelBuilder.Entity<TBestellung>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Kopfdaten einer Bestellung von Artikeln wie Kanthölzer, Nägel, etc.");

                entity.Property(e => e.DBestellDatum).HasDefaultValueSql("'0000-00-00'");

                entity.Property(e => e.DCreated).HasDefaultValueSql("'0000-00-00 00:00:00'");

                entity.Property(e => e.DLastmodified)
                    .ValueGeneratedOnAddOrUpdate()
                    .HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.NGesamtBetragVerhandelt).HasDefaultValueSql("'0.0000'");

                entity.Property(e => e.NMitGesamtsumme).HasDefaultValueSql("'1'");

                entity.Property(e => e.NNettoZahlbarTage).HasDefaultValueSql("'0'");

                entity.Property(e => e.NNurGesamtsumme).HasDefaultValueSql("'0'");

                entity.Property(e => e.NSkonto).HasDefaultValueSql("'0.00'");

                entity.Property(e => e.NSkontoZahlbarTage).HasDefaultValueSql("'0'");

                entity.Property(e => e.NStatusId).HasComment("kat_grp=15");

                entity.Property(e => e.NUserId).HasDefaultValueSql("'0'");

                entity.Property(e => e.NVersandartId).HasComment("kat_grp=18");

                entity.Property(e => e.NZahlungszielId).HasComment("kat_grp=16");
            });

            modelBuilder.Entity<TBestellungartikel>(entity =>
            {
                entity.HasKey(e => new { e.NId, e.NBestellungId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.Property(e => e.NId).ValueGeneratedOnAdd();

                entity.Property(e => e.DCreated).HasDefaultValueSql("'0000-00-00 00:00:00'");

                entity.Property(e => e.NArtikelId).HasDefaultValueSql("'0'");

                entity.Property(e => e.NLiefermengeUnbekannt).HasDefaultValueSql("'0'");

                entity.Property(e => e.NWaehrungId).HasDefaultValueSql("'0'");
            });

            modelBuilder.Entity<TBodenkonstranordnungLk>(entity =>
            {
                entity.HasKey(e => new { e.BdAnVerpId, e.BdAnVerpTyp })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Anordnung der Längskufen bei der Bodekonstruktion. Wird benötigt wenn die Längskufendimensionen unterschiedlich sind.");
            });

            modelBuilder.Entity<TBodenkonstranordnungQk>(entity =>
            {
                entity.HasKey(e => new { e.BdAnVerpId, e.BdAnVerpTyp })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Anordnung der Querkufen bei der Bodekonstruktion. Wird benötigt wenn die Querkufendimensionen unterschiedlich sind.");
            });

            modelBuilder.Entity<TBodenkonstreinrueckLk>(entity =>
            {
                entity.HasKey(e => new { e.BdEinVerpId, e.BdEinVerpTyp, e.BdEinPos })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                entity.HasComment("Einrückmaße der Längskufen bei der Bodenkonstruktion");
            });

            modelBuilder.Entity<TBodenkonstreinrueckQk>(entity =>
            {
                entity.HasKey(e => new { e.BdEinVerpId, e.BdEinVerpTyp, e.BdEinPos })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                entity.HasComment("Einrückmaße der Querkufen bei der Bodenkonstruktion");
            });

            modelBuilder.Entity<TBodenkonstrschraubenLk>(entity =>
            {
                entity.HasKey(e => new { e.BdSchrVerpId, e.BdSchrVerpTyp, e.BdSchrLk })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                entity.HasComment("Kennzeichnet bei der Bodenkonstruktion die verbolzten Längskufen. die nicht gekennzeichneten -bd_schr_check- werden genagelt.");

                entity.Property(e => e.BdSchrCheck).HasComment("1=Lk verbolzt 0=LK genagelt");
            });

            modelBuilder.Entity<TBrettlageKonstr>(entity =>
            {
                entity.HasKey(e => e.CId)
                    .HasName("PRIMARY");

                entity.HasComment("Konstruktion für eine Lage aus Brettern");

                entity.Property(e => e.CId).HasComment("t_verpackung_main.c_id");

                entity.Property(e => e.CVerpId).HasComment("t_verpackung_main.c_id");

                entity.Property(e => e.NAbstandRichtung)
                    .HasDefaultValueSql("'1'")
                    .HasComment("1=von links, 2=von rechts");
            });

            modelBuilder.Entity<TBrettstaerke>(entity =>
            {
                entity.HasKey(e => e.BstId)
                    .HasName("PRIMARY");

                entity.HasComment("Die im Lager vorhandene Bretter der Bodenstärke. Die Liste der Stärken wird bei statistchen Berechnung berücksichtigt.");
            });

            modelBuilder.Entity<TCapiTimeEvent>(entity =>
            {
                entity.HasComment("Tabelle für die APP CrateTime");
            });

            modelBuilder.Entity<TChargenNr>(entity =>
            {
                entity.HasKey(e => new { e.CChargenPrefix, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.Property(e => e.NId).ValueGeneratedOnAdd();

                entity.Property(e => e.DCreated).ValueGeneratedOnAddOrUpdate();
            });

            modelBuilder.Entity<TColliliste>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Kopfdaten der Colliliste");

                entity.Property(e => e.DGeaendertAm).HasComment("Datum wann der Datensatz geändert wurde");

                entity.Property(e => e.DGedruckt).HasComment("Zeit wann Dokument gedruckt wurde");

                entity.Property(e => e.NRefAuftragHolzart).HasComment("1=IPPC, 2=NONWOOD, 3=kein IPPC");

                entity.Property(e => e.NUserIdErstellt).HasComment("ID des Benutzers der den Datensatz erstellt hat.");

                entity.Property(e => e.NUserIdGeaendert).HasComment("ID des Benutzers der den Datensatz geändert hat.");
            });

            modelBuilder.Entity<TCollilistePosten>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Posten der Colliliste");

                entity.Property(e => e.DCreated)
                    .ValueGeneratedOnAddOrUpdate()
                    .HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.NEinzelgewicht)
                    .HasDefaultValueSql("'1'")
                    .HasComment("0=Gesamtgewicht; 1=Einzelgewicht' AFTER `n_gewicht_tara");

                entity.Property(e => e.NPosition).HasDefaultValueSql("'0'");
            });

            modelBuilder.Entity<TContainerTypen>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Enthält die möglichen Containertypen, welche im Menü beim Containerstau ausgewählt werden können.");

                entity.Property(e => e.NAchslastMax1).HasComment("Max. Last für Achse 1");

                entity.Property(e => e.NAchslastMax2).HasComment("Max. Last für Achse 2");

                entity.Property(e => e.NAchslastPos1).HasComment("Position der 1.Achse zur Berechnung der Achslast");

                entity.Property(e => e.NAchslastPos2).HasComment("Position der 2.Achse zur Berechnung der Achslast");

                entity.Property(e => e.NTypId)
                    .HasDefaultValueSql("'1'")
                    .HasComment("1=Container, 2=LKW, 3=Anhaenger kat_grp=31");
            });

            modelBuilder.Entity<TContainerTypenBilder>(entity =>
            {
                entity.HasKey(e => new { e.NContainerId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Bilder zu den t_container_typen");

                entity.Property(e => e.NContainerId).HasComment("t_container_typen.n_id");

                entity.Property(e => e.NId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<TDeckel>(entity =>
            {
                entity.HasKey(e => e.DlId)
                    .HasName("PRIMARY");

                entity.HasComment("Speichert die eingegeben Daten zum Deckel");

                entity.Property(e => e.DlAktiv).HasDefaultValueSql("'1'");

                entity.Property(e => e.DlAnzahl).HasComment("Anzahl der Deckel");

                entity.Property(e => e.DlAuftragId).HasDefaultValueSql("'0'");

                entity.Property(e => e.DlBBrettStaerke).HasComment("Brettstärker der Beleistung");

                entity.Property(e => e.DlBEinrueckBreite).HasComment("Einruecken der Beleistung in Breite");

                entity.Property(e => e.DlBEinrueckLaenge).HasComment("Einruecken der Beleistung in Laenge");

                entity.Property(e => e.DlBMaterialId).HasComment("Materialtyp der Beleistung kat_grp=1");

                entity.Property(e => e.DlBRLbrettBreite).HasComment("Beleistung Rahmen Laengsbrettbreite");

                entity.Property(e => e.DlBRQbrettBreite).HasComment("Beleistung Rahmen Querbrettbreite");

                entity.Property(e => e.DlBTypId).HasComment("Typ der Beleistung kat_grp = 97");

                entity.Property(e => e.DlCreated).HasDefaultValueSql("'0000-00-00 00:00:00'");

                entity.Property(e => e.DlDBrettSt).HasComment("Decklagen Brettstaerke");

                entity.Property(e => e.DlHoehe).HasComment("Aussenmasshoehe");

                entity.Property(e => e.DlInfo).HasComment("Bemerkung zum Deckel");

                entity.Property(e => e.DlLieferantId).HasComment("Wenn Verpackung von anderer Firma gerfertigt wird");

                entity.Property(e => e.DlNr).HasComment("ist NULL wenn template");

                entity.Property(e => e.DlPlattenM2).HasComment("Quadratmeter aller Plattenwerkstoffe");

                entity.Property(e => e.DlPlattenM3).HasComment("Qubikmeter aller Plattenwerkstoffe");

                entity.Property(e => e.DlPrjId).HasDefaultValueSql("'0'");

                entity.Property(e => e.DlSchnittholzM3).HasComment("Qubikmeter aller Schnitthoelzer");

                entity.Property(e => e.NBreiteBausatz)
                    .HasDefaultValueSql("'0'")
                    .HasComment("breite nicht zusammengebaut");

                entity.Property(e => e.NColloBreite).HasDefaultValueSql("'0'");

                entity.Property(e => e.NColloHoehe).HasDefaultValueSql("'0'");

                entity.Property(e => e.NColloLaenge).HasDefaultValueSql("'0'");

                entity.Property(e => e.NColloTara).HasDefaultValueSql("'0'");

                entity.Property(e => e.NHoeheBausatz)
                    .HasDefaultValueSql("'0'")
                    .HasComment("hoehe nicht zusammengebaut");

                entity.Property(e => e.NKuerzelId).HasComment("kat_grp = 150");

                entity.Property(e => e.NLaengeBausatz)
                    .HasDefaultValueSql("'0'")
                    .HasComment("laenge nicht zusammengebaut");

                entity.Property(e => e.NRabatt).HasDefaultValueSql("'0'");

                entity.Property(e => e.NTaraEinbauten)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Bruttogewicht Einbauten");

                entity.Property(e => e.NWaehrungId).HasDefaultValueSql("'0'");
            });

            modelBuilder.Entity<TDokumente>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Dokumente die importiert wurden. Aktuell wird es nur bei Projekten genutzt.");

                entity.Property(e => e.DCreated).HasDefaultValueSql("'0000-00-00'");

                entity.Property(e => e.NParentId).HasComment("ID des eigentlichen Objekte t_projekt.prj_id");
            });

            modelBuilder.Entity<TEingangsNr>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Wird für die Generierung der Wareneingang-Nr. benutzt");

                entity.Property(e => e.DCreated).HasDefaultValueSql("'0000-00-00 00:00:00'");
            });

            modelBuilder.Entity<TEinlagerung>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Protkolliert die Einlagerung von Posten");

                entity.Property(e => e.NGebrauchtVerpId).HasComment("id von t_packmittel_gebraucht_nr");

                entity.Property(e => e.NOldEinlagerungId).HasComment("t_einlagerung.n_id wenn umgelagert wurde ist der Wert ungleich NULL");

                entity.Property(e => e.NUmlagerung).HasComment("1=Einlagerung durch Umgern 0=normale Einlagerung");
            });

            modelBuilder.Entity<TEventCalendar>(entity =>
            {
                entity.HasKey(e => e.CId)
                    .HasName("PRIMARY");

                entity.HasComment("Enhält alle Ereignisse/Termine");

                entity.Property(e => e.DCreated).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.DEnde).HasDefaultValueSql("'0000-00-00 00:00:00'");

                entity.Property(e => e.DEndeAktuell).HasDefaultValueSql("'0000-00-00 00:00:00'");

                entity.Property(e => e.DStart).HasDefaultValueSql("'0000-00-00 00:00:00'");

                entity.Property(e => e.DStartAktuell).HasDefaultValueSql("'0000-00-00 00:00:00'");

                entity.Property(e => e.NAktiv).HasDefaultValueSql("'1'");

                entity.Property(e => e.NErledigt).HasDefaultValueSql("'0'");

                entity.Property(e => e.NInternalEventType)
                    .HasDefaultValueSql("'0'")
                    .HasComment("1=Verpackung, 2=Geburtstag, 3=Allgemein");

                entity.Property(e => e.NOptionen).HasDefaultValueSql("'0'");

                entity.Property(e => e.NPublic).HasDefaultValueSql("'1'");

                entity.Property(e => e.NReminderMin).HasComment("the minutes before start time when the reminder should appear");
            });

            modelBuilder.Entity<TEventCalendarResource>(entity =>
            {
                entity.HasKey(e => new { e.CId, e.NResourceId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Verknüpft ein Ereignis/Termin mit einer Resource");

                entity.Property(e => e.NResourceId).HasComment("t_resource.n_id");
            });

            modelBuilder.Entity<TEventTask>(entity =>
            {
                entity.HasKey(e => e.CId)
                    .HasName("PRIMARY");

                entity.HasComment("Deprecated - war für die interne Zuweisung von Aufgaben wie z.B. Rückruf von ...");

                entity.Property(e => e.DErledigtBis).HasDefaultValueSql("'0000-00-00 00:00:00'");
            });

            modelBuilder.Entity<TExternalAuftrag>(entity =>
            {
                entity.HasKey(e => e.CExternalId)
                    .HasName("PRIMARY");

                entity.HasComment("Aufträge von externen ERP System");

                entity.Property(e => e.DCreated).HasDefaultValueSql("'0000-00-00 00:00:00'");

                entity.Property(e => e.DLastUpdate).HasDefaultValueSql("'0000-00-00 00:00:00'");

                entity.Property(e => e.NId).HasComment("t_auftrag.n_id");
            });

            modelBuilder.Entity<TExternalFirma>(entity =>
            {
                entity.HasKey(e => e.CExternalId)
                    .HasName("PRIMARY");

                entity.HasComment("Mapping von externen ERP System mit der externen ID der Firma zu Cratemaker Firmen ID");

                entity.Property(e => e.DCreated).HasDefaultValueSql("'0000-00-00 00:00:00'");

                entity.Property(e => e.DLastUpdate).HasDefaultValueSql("'0000-00-00 00:00:00'");

                entity.Property(e => e.NId).HasComment("t_firma.firmaKey");
            });

            modelBuilder.Entity<TFemColliAnschlag>(entity =>
            {
                entity.HasKey(e => new { e.CId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Wird für die FEM Berechnung genutzt. Anschlagpunkte am Boden mit x,y,z Koordinaten");

                entity.Property(e => e.NId).ValueGeneratedOnAdd();

                entity.Property(e => e.NTypeId).HasComment("1=Kran, 2=Stapler");

                entity.Property(e => e.NX).HasComment("Position X-Koordinate");

                entity.Property(e => e.NXDelta).HasComment("Ausdehnung in X-Richtung");

                entity.Property(e => e.NY).HasComment("Position Y-Koordinate");

                entity.Property(e => e.NYDelta).HasComment("Ausdehnung in Y-Richtung");

                entity.Property(e => e.NZ).HasComment("Position Z-Koordinate");
            });

            modelBuilder.Entity<TFemColliLastflaeche>(entity =>
            {
                entity.HasKey(e => new { e.CId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Wird für die FEM Berechnung genutzt. Speichert die Lasten die auf dem Boden einwirken.");

                entity.Property(e => e.NId).ValueGeneratedOnAdd();

                entity.Property(e => e.NLastNewton).HasComment("Einwirkende Last in Newton an der Position mit der Ausdehnung");

                entity.Property(e => e.NX).HasComment("Position X-Koordinate");

                entity.Property(e => e.NXDelta).HasComment("Ausdehnung in X-Richtung");

                entity.Property(e => e.NY).HasComment("Position Y-Koordinate");

                entity.Property(e => e.NYDelta).HasComment("Ausdehnung in Y-Richtung");

                entity.Property(e => e.NZ).HasComment("Position Z-Koordinate");
            });

            modelBuilder.Entity<TFemColliObject>(entity =>
            {
                entity.HasKey(e => new { e.CId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Wird für die FEM Berechnung genutzt. Alle Elemente aus dem das Packstück besteht.");

                entity.Property(e => e.NId).ValueGeneratedOnAdd();

                entity.Property(e => e.NMaterialId).HasComment("ref to t_statik_material.n_id");

                entity.Property(e => e.NResultVergleichsspannung)
                    .HasDefaultValueSql("'0.000'")
                    .HasComment("Ergebnisse der FEM Berechnung - Max. Spannung im Objekt Kantholz,Brett,...");

                entity.Property(e => e.NSigmaZul).HasComment("Sigma zulässig für das Elemenent");

                entity.Property(e => e.NTypeId).HasComment("1=LK, 2=QK, 3=BH, 5=Bodenplatte, 10=T-Traeger, 11=Doppel-T-Traeger, 12=U-Traeger");

                entity.Property(e => e.NX).HasComment("Position X-Koordinate");

                entity.Property(e => e.NXDelta).HasComment("Ausdehnung in X-Richtung");

                entity.Property(e => e.NY).HasComment("Position Y-Koordinate");

                entity.Property(e => e.NYDelta).HasComment("Ausdehnung in Y-Richtung");

                entity.Property(e => e.NZ).HasComment("Position Z-Koordinate");

                entity.Property(e => e.NZDelta).HasComment("Ausdehnung in Z-Richtung");
            });

            modelBuilder.Entity<Firma>(entity =>
            {
                entity.HasKey(e => e.Firmakey)
                    .HasName("PRIMARY");

                entity.HasComment("Speichert die Firmen");

                entity.Property(e => e.DErstkontakt).HasComment("Wird für die Neukundenentwicklung benutzt.");

                entity.Property(e => e.DLetzterKontakt).HasComment("Wird für die Neukundenentwicklung benutzt.");

                entity.Property(e => e.NAddTelefon)
                    .HasDefaultValueSql("'0'")
                    .HasComment("use for telefon book");

                entity.Property(e => e.NBeipackhNichtLoeschen)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Beipackhölzer für diesen Kunden nicht löschen, wenn sich bei der Verpackung Dimensionen ändern.");

                entity.Property(e => e.NBetragRunden).HasComment("0=nicht runden, 1=Runden, -1=Abrunden, 2=Aufrunden");

                entity.Property(e => e.NBevZahlungsartId).HasComment("kat_grp=29");

                entity.Property(e => e.NDeaktiviert).HasDefaultValueSql("'0'");

                entity.Property(e => e.NKalklNachRasterpreis)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Die Kalkulation wird über die Rasterkalkulation durchgeführt.");

                entity.Property(e => e.NKarenzzeit).HasDefaultValueSql("'7'");

                entity.Property(e => e.NLogiEntfernung1)
                    .HasDefaultValueSql("'1'")
                    .HasComment("Entfernung zum Kunden. Was in Verbindung mit dem ausgewählten Fahrzeug und den anfallen Kosten pro KM die Kosten in der Nachkalkulation ergibt.");

                entity.Property(e => e.NMahnung1).HasDefaultValueSql("'7'");

                entity.Property(e => e.NMahnung2).HasDefaultValueSql("'7'");

                entity.Property(e => e.NMahnung3).HasDefaultValueSql("'7'");

                entity.Property(e => e.NMahnungErlaubt).HasDefaultValueSql("'1'");

                entity.Property(e => e.NNettoZahlbarTage).HasDefaultValueSql("'14'");

                entity.Property(e => e.NPotenzialId).HasComment("Wird für die Neukundenentwicklung benutzt. kat_grp = 41");

                entity.Property(e => e.NPrintAdrInRechnung).HasDefaultValueSql("'0'");

                entity.Property(e => e.NPrintRechBriefkopf).HasDefaultValueSql("'1'");

                entity.Property(e => e.NPrintRechVerpInhalt)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Kennzeichen ob Inhalt bei Rechnung gedruckt werden soll.");

                entity.Property(e => e.NStatusId)
                    .HasDefaultValueSql("'100'")
                    .HasComment("kat_grp = 40");

                entity.Property(e => e.NSubtypeId).HasComment("kat_grp=110");

                entity.Property(e => e.NVQkUeber).HasComment("Ueberstand bei QK");

                entity.Property(e => e.NVerpPlattenwerkstoffId).HasDefaultValueSql("'0'");
            });

            modelBuilder.Entity<TFirmaFuhrpark>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Speichert den Fuhrpark zur Firma. WIr aktuell nur für die eigene Firma genutzt.");

                entity.Property(e => e.DCreated).HasDefaultValueSql("'0000-00-00 00:00:00'");

                entity.Property(e => e.DLastmodified).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.NArtId)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Hängerzug offen, Sattelzug offen, PKW, LKW kat_grp=20, 21");

                entity.Property(e => e.NAusgeschieden).HasDefaultValueSql("'0'");

                entity.Property(e => e.NHerstellerId).HasDefaultValueSql("'0'");

                entity.Property(e => e.NIsResource).HasDefaultValueSql("'0'");

                entity.Property(e => e.NKostenKm).HasDefaultValueSql("'0.00'");

                entity.Property(e => e.NResourceId).HasComment("reference t_resource");
            });

            modelBuilder.Entity<TFirmaGruppentyp>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Gruppentypen der Firmen wie Kunde, Lieferant, etc.");

                entity.Property(e => e.NIcon).HasDefaultValueSql("'-1'");
            });

            modelBuilder.Entity<TFirmaMailgruppe>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Mailgruppe zu einer Firma. An diese wird der eingescannte Lieferschein geschickt. Wird in t_auftrag konfiguriert.");
            });

            modelBuilder.Entity<TFirmaMailgruppeEmail>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Die EMail Adressen die zu einer Gruppe gehören");
            });

            modelBuilder.Entity<TFirmaMaterialbilder>(entity =>
            {
                entity.HasKey(e => new { e.NFirmaId, e.NMaterialId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                entity.HasComment("Bilder zum Material einer Firma");

                entity.Property(e => e.NId).ValueGeneratedOnAdd();

                entity.Property(e => e.DCreated)
                    .ValueGeneratedOnAddOrUpdate()
                    .HasDefaultValueSql("CURRENT_TIMESTAMP");
            });

            modelBuilder.Entity<TFirmaRechnungsanschrift>(entity =>
            {
                entity.HasKey(e => e.NFirmaId)
                    .HasName("PRIMARY");

                entity.HasComment("Rechnungsanschrift zu einer Firma");

                entity.Property(e => e.NFirmaId).ValueGeneratedNever();

                entity.Property(e => e.NLandId).HasDefaultValueSql("'162'");
            });

            modelBuilder.Entity<TFirmaTyp>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Firmentypen wie Verppackungkunde, Lagerkunde, Transportuer, .. die in Gruppen wie Kunde, Lieferant,.. unterteilt sind.");

                entity.Property(e => e.NGruppenTypId).HasComment("t_firma_gruppentyp");

                entity.Property(e => e.NIcon).HasDefaultValueSql("'-1'");
            });

            modelBuilder.Entity<TFirmazweigstelle>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Zweigstellen zu einer Firma. Diese Zweigstellen können z.B. beim Lieferschein ausgewählt werden.");

                entity.Property(e => e.NNiederlassungId).HasDefaultValueSql("'1'");
            });

            modelBuilder.Entity<TFirmenKommMail>(entity =>
            {
                entity.HasKey(e => new { e.NFirmaId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.Property(e => e.NId).ValueGeneratedOnAdd();

                entity.Property(e => e.NDefault).HasDefaultValueSql("'0'");

                entity.Property(e => e.NTypId).HasComment("kat_grp = 95");
            });

            modelBuilder.Entity<TFreigabe>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Kopfdaten für die Fertigmeldung, welche die finalen Verpckungsdaten beinhaltet");

                entity.Property(e => e.DGeaendertAm).HasComment("Datum wann der Datensatz geändert wurde");

                entity.Property(e => e.DGedruckt).HasComment("Zeit wann Dokument gedruckt wurde");

                entity.Property(e => e.NUserIdErstellt).HasComment("ID des Benutzers der den Datensatz erstellt hat.");

                entity.Property(e => e.NUserIdGeaendert).HasComment("ID des Benutzers der den Datensatz geändert hat.");
            });

            modelBuilder.Entity<TFreigabePosten>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Posten der Fertigmeldung, welche die finalen Verpckungsdaten beinhaltet");

                entity.Property(e => e.DCreated)
                    .ValueGeneratedOnAddOrUpdate()
                    .HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.NEinzelgewicht)
                    .HasDefaultValueSql("'1'")
                    .HasComment("0=Gesamtgewicht; 1=Einzelgewicht' AFTER `n_gewicht_tara");

                entity.Property(e => e.NPosition).HasDefaultValueSql("'0'");
            });

            modelBuilder.Entity<TFremdboden>(entity =>
            {
                entity.HasKey(e => e.BdId)
                    .HasName("PRIMARY");

                entity.HasComment("Fremdböden die bei der Stülpkiste eingesetzt werden können");

                entity.Property(e => e.BdVdBlSt).HasComment("Bodenlagestärke");

                entity.Property(e => e.BdVdDlSt).HasComment("Decklagenstärke");

                entity.Property(e => e.BdVdKhCheck).HasComment("Kantholzlage");

                entity.Property(e => e.BdVdZlSt).HasComment("Zwischenlagestärke");
            });

            modelBuilder.Entity<TFtpServerConfig>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("FTP Server Konfiguration für den Upload der Fotodokumentation");

                entity.Property(e => e.NPort).HasDefaultValueSql("'21'");

                entity.Property(e => e.NProtokoll)
                    .HasDefaultValueSql("'1'")
                    .HasComment("1=ftp, 2=sftp");

                entity.Property(e => e.NTlsType)
                    .HasDefaultValueSql("'1'")
                    .HasComment("1=no, 2=implizit, 3=erfordert, 4=explizit");
            });

            modelBuilder.Entity<TGefahrgut>(entity =>
            {
                entity.HasKey(e => e.GgId)
                    .HasName("PRIMARY");

                entity.HasComment("Liste des Gefahrguts");

                entity.Property(e => e.GgPollutantS).HasDefaultValueSql("'0'");
            });

            modelBuilder.Entity<TGesamtpreisDetail>(entity =>
            {
                entity.HasKey(e => new { e.NAuftragId, e.NPostenId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                entity.HasComment("Gesamtpreis eines Auftrags. Wird genutzt für Nachverhandlungen mit dem Kunde, damit die eigentlichen Preise sichtbar sind und bleiben.");

                entity.Property(e => e.NId).ValueGeneratedOnAdd();

                entity.Property(e => e.NTypId).HasComment("kat_grp = 61");
            });

            modelBuilder.Entity<TGutschrift>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Kopfdaten zur Gutschrift");

                entity.Property(e => e.DCreated)
                    .ValueGeneratedOnAddOrUpdate()
                    .HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.DGeaendertAm).HasComment("Datum wann der Datensatz geändert wurde");

                entity.Property(e => e.DGedruckt).HasComment("Zeit wann Rechnung gedruckt wurde");

                entity.Property(e => e.NAktiv).HasDefaultValueSql("'1'");

                entity.Property(e => e.NKundeIdEmpfaenger).HasComment("Der Rechnungsempfaenger");

                entity.Property(e => e.NMwst).HasDefaultValueSql("'0.00'");

                entity.Property(e => e.NNurGesamtsumme).HasDefaultValueSql("'0'");

                entity.Property(e => e.NSortierungAusdruckPostenPos).HasDefaultValueSql("'0'");

                entity.Property(e => e.NSteuerparagraphen).HasDefaultValueSql("'0'");

                entity.Property(e => e.NUserIdGeaendert).HasComment("ID des Benutzers der den Datensatz geändert hat.");
            });

            modelBuilder.Entity<TGutschriftPosten>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Posten zur Gutschrift");

                entity.Property(e => e.DCreated)
                    .ValueGeneratedOnAddOrUpdate()
                    .HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.DLeistungsDatum).HasDefaultValueSql("'0000-00-00'");

                entity.Property(e => e.NInEu).HasDefaultValueSql("'0'");

                entity.Property(e => e.NKostenstelleId).HasComment("t_kostenstelle");

                entity.Property(e => e.NMitMwst).HasDefaultValueSql("'1'");

                entity.Property(e => e.NPosition).HasComment("Position innehalb der Rechnung");
            });

            modelBuilder.Entity<THoliday>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Liste der gesetzlichen Feiertage");

                entity.Property(e => e.NYearly).HasDefaultValueSql("'0'");
            });

            modelBuilder.Entity<TImoDetail>(entity =>
            {
                entity.HasKey(e => new { e.NImoId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Posten zur IMO Erklärung");

                entity.Property(e => e.NId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<TImoMain>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Kopfdaten zur IMO Erklärung");

                entity.Property(e => e.NAktiv).HasDefaultValueSql("'1'");

                entity.Property(e => e.NAuftragbestaet).HasDefaultValueSql("'0'");

                entity.Property(e => e.NKostenstelleId).HasComment("t_kostenstelle");

                entity.Property(e => e.NVerrechnet).HasDefaultValueSql("'0'");
            });

            modelBuilder.Entity<TInitKonstrValue>(entity =>
            {
                entity.HasKey(e => new { e.NVerpTypId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Konstruktionsoptionen zu einem Verpackungstypen");

                entity.Property(e => e.NId).ValueGeneratedOnAdd();

                entity.Property(e => e.NIsStandard)
                    .HasDefaultValueSql("'0'")
                    .HasComment("1=Ist Standrad -> wird geladen, wenn der Verpackungstyp ausgewählt wurde");

                entity.Property(e => e.NKstrBbretterSeitlichEinrueck).HasDefaultValueSql("'0'");

                entity.Property(e => e.NKstrBbretterUnterBh)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Bodenbretter bis unter Bh");

                entity.Property(e => e.NKstrBbretterUnterK).HasDefaultValueSql("'0'");

                entity.Property(e => e.NKstrBbretterUnterKl)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Bodenbretter bis unter KL");

                entity.Property(e => e.NKstrDeckelDlUeberSl).HasDefaultValueSql("'0'");

                entity.Property(e => e.NKstrDeckelZwischenK)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Deckel zwischen den Koepfen");

                entity.Property(e => e.NKstrDeckelZwischenS)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Deckel zwischen den Seiten");

                entity.Property(e => e.NKstrDeckelklOhne)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Deckel ohne Deckelkopfleisten");

                entity.Property(e => e.NKstrDeckellAussen)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Deckelleisten quer laufen lassen");

                entity.Property(e => e.NKstrDeckellQuer)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Deckelleisten quer laufen lassen");

                entity.Property(e => e.NKstrDeckelslanzWieLkanz)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Anzahl Deckelseitenleiste wie LK Anzahl");

                entity.Property(e => e.NKstrDklUeberQk)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Deckelkopfleisten wie QK einruecken");

                entity.Property(e => e.NKstrFlUeberQk).HasDefaultValueSql("'0'");

                entity.Property(e => e.NKstrIbreiteWandZuWand)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Innenbreite zwischen Wand zu Wand. 1=dann wird die eingegeben Innenbreite anders interpretiert.");

                entity.Property(e => e.NKstrIsSteckkiste)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Kistentyp-Steckkiste für VTT Verbinder");

                entity.Property(e => e.NKstrKLa)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Kopfleisten nach aussen");

                entity.Property(e => e.NKstrKOhneZl).HasDefaultValueSql("'0'");

                entity.Property(e => e.NKstrKQk0KopfAufBoden)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Wenn Qk einruecken 0 Kopf bis auf Boden");

                entity.Property(e => e.NKstrKSZfuge)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Kopf und Seit mit Z-Fuge verbinden");

                entity.Property(e => e.NKstrKZwischenS)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Kopf zwischen Seiten (Z-Fuge)");

                entity.Property(e => e.NKstrKlAufZwischenl)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Kopfleisten auf Zwischenlage bei 4-Wegeboden");

                entity.Property(e => e.NKstrKlBisBodenBeiQk0)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Kopfleisten bis Boden bei Qk-Einrueck=0");

                entity.Property(e => e.NKstrKlBisQkWennQkeinrueckNull)
                    .HasDefaultValueSql("'0'")
                    .HasComment("KL bis unten zu QK wenn diese buendig");

                entity.Property(e => e.NKstrKlEinrueckBh).HasDefaultValueSql("'0'");

                entity.Property(e => e.NKstrKlObenBuendig)
                    .HasDefaultValueSql("'15'")
                    .HasComment("KL oben buendig");

                entity.Property(e => e.NKstrKlObenUeberstehen).HasDefaultValueSql("'0'");

                entity.Property(e => e.NKstrKlSenkrecht).HasDefaultValueSql("'0'");

                entity.Property(e => e.NKstrKlUmSUndSlEinrueck)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Kopfleisten um Seite und SeitenL einruecken");

                entity.Property(e => e.NKstrKlUntenUeberstehen).HasDefaultValueSql("'0'");

                entity.Property(e => e.NKstrLiLaseiten)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Seitenleisten aussen");

                entity.Property(e => e.NKstrOhneFl)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Seite ohne Futterleisten");

                entity.Property(e => e.NKstrQkUeberLk).HasDefaultValueSql("'0'");

                entity.Property(e => e.NKstrQkUmSlKuerzen)
                    .HasDefaultValueSql("'15'")
                    .HasComment("QK immer um SL kuerzen");

                entity.Property(e => e.NKstrQklaengeAussenbreite).HasDefaultValueSql("'0'");

                entity.Property(e => e.NKstrSBisAufBoden)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Seite bis auf den Boden");

                entity.Property(e => e.NKstrSeiteAufQk).HasDefaultValueSql("'0'");

                entity.Property(e => e.NKstrSeiteRuecksprung)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Seitenruecksprung bei LK");

                entity.Property(e => e.NKstrSeiteSlInnen).HasDefaultValueSql("'0'");

                entity.Property(e => e.NKstrSeiteSlNebenQk)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Seitenleisten neben Qk");

                entity.Property(e => e.NKstrSeiteSlWaagAussen)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Deckel ohne Deckelkopfleisten");

                entity.Property(e => e.NKstrSeiteSlWaagInnen)
                    .HasDefaultValueSql("'15'")
                    .HasComment("QK immer um SL kuerzen");

                entity.Property(e => e.NKstrSl2Waag)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Nur 2 waag. laufende Seitenleisten");

                entity.Property(e => e.NKstrZlOhneOben)
                    .HasDefaultValueSql("'15'")
                    .HasComment("Obere ZL nicht nutzen");

                entity.Property(e => e.NKstrhDeckelDh)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Deckelholz nutzen");

                entity.Property(e => e.NKstrhDeckelLBreite)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Deckelleistenstaerke");

                entity.Property(e => e.NKstrhDeckelLStaerke)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Deckelleistenstaerke");

                entity.Property(e => e.NKstrhFlRaster)
                    .HasDefaultValueSql("'0'")
                    .HasComment("FL Raster");

                entity.Property(e => e.NKstrhKopfLBreite)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Kopfleistenstaerke");

                entity.Property(e => e.NKstrhKopfLStaerke)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Kopfleistenstaerke");

                entity.Property(e => e.NKstrhSeiteLBreite)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Seitenleistenstaerke");

                entity.Property(e => e.NKstrhSeiteLStaerke)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Seitenleistenstaerke");

                entity.Property(e => e.NKstrhZlRaster)
                    .HasDefaultValueSql("'0'")
                    .HasComment("ZL Raster");
            });

            modelBuilder.Entity<TInitbelegungvalue>(entity =>
            {
                entity.HasKey(e => new { e.NVerpTyp, e.NMatTyp })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Prozentuale Belegung der Verschalung inkl. Boden für Verschläge in Abhängigkeit vom Materialtyp");

                entity.Property(e => e.NMatTyp).HasComment("kat_grp=1");
            });

            modelBuilder.Entity<TInitdimvalue>(entity =>
            {
                entity.HasKey(e => new { e.ValVerpTyp, e.ValMatTyp, e.ValValTyp })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                entity.HasComment("Initiale Werte für bestimmte Dimension. Aktuel wird es nur für den Glasverschlag bei den seitlichen Distanzhölzer genutzt.");
            });

            modelBuilder.Entity<TInitstaerkevalue>(entity =>
            {
                entity.HasKey(e => new { e.ValVerpTyp, e.ValMatTyp, e.ValValTyp })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                entity.HasComment("Initilae Werte für die Leisten einer Verpackung");

                entity.Property(e => e.ValMatTyp).HasComment("kat_grp=1");

                entity.Property(e => e.ValValTyp).HasComment("0=VerschalungStearke,1=LeistenStaerke, 2=LeistenBreite, 3=BrettBreite, 4=VerschalungBreite");
            });

            modelBuilder.Entity<TInterfAuftrag>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("main record for external erp systems");

                entity.Property(e => e.NId).ValueGeneratedNever();

                entity.Property(e => e.DCreated).HasDefaultValueSql("'0000-00-00 00:00:00'");

                entity.Property(e => e.NExtsysExport)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Kennzeichen fuer eine Exportsendung");

                entity.Property(e => e.NRabattVerp).HasDefaultValueSql("'0'");
            });

            modelBuilder.Entity<TInterfAuftragPosten>(entity =>
            {
                entity.HasKey(e => new { e.NAuftragId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("detail record for external erp systems");

                entity.Property(e => e.NId).ValueGeneratedOnAdd();

                entity.Property(e => e.NBreiteI).HasComment("Innenhoehe des Packstuecks");

                entity.Property(e => e.NHoeheI).HasComment("Innenhoehe des Packstuecks");

                entity.Property(e => e.NLaengeI).HasComment("Innenhoehe des Packstuecks");
            });

            modelBuilder.Entity<TInterfAuftragPostenInhalt>(entity =>
            {
                entity.HasKey(e => new { e.NAuftragId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("content of package");

                entity.Property(e => e.NId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<TInventarArtikel>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Liste des eigenen Inventars");

                entity.Property(e => e.NAnzahl).HasDefaultValueSql("'1.00'");

                entity.Property(e => e.NArtikelId).HasComment("t_artikel.n_id");

                entity.Property(e => e.NAusgeschieden).HasDefaultValueSql("'0'");

                entity.Property(e => e.NKategorieId).HasComment("t_artikel_kategorie.n_id");

                entity.Property(e => e.NKategorieSubId).HasComment("t_artikel_kategorie.n_id");
            });

            modelBuilder.Entity<TInventarArtikelVerlauf>(entity =>
            {
                entity.HasKey(e => new { e.NArtikelId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Der Verlauf des Inventar Artikels Revesion, Reparatur etc.");

                entity.Property(e => e.NId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<TIppcStandard>(entity =>
            {
                entity.HasComment("Länderliste die dem IPPC fordern");

                entity.Property(e => e.NBehandlungsartId).HasDefaultValueSql("'1'");
            });

            modelBuilder.Entity<TKalkulation>(entity =>
            {
                entity.HasKey(e => new { e.NVerpId, e.NVerptypId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Hauptdatensatz der Feinkalkulation");

                entity.Property(e => e.DCreated)
                    .ValueGeneratedOnAddOrUpdate()
                    .HasDefaultValueSql("CURRENT_TIMESTAMP");
            });

            modelBuilder.Entity<TKalkulationAllgOptionen>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Allgemeine Optionen zur Kalkulation");

                entity.Property(e => e.NHolzM2Linked)
                    .HasDefaultValueSql("'1'")
                    .HasComment("Einheitlicher Preis für alle Hoelzer die nach m² berechnet werden");

                entity.Property(e => e.NHolzM3Linked)
                    .HasDefaultValueSql("'1'")
                    .HasComment("Einheitlicher Preis für alle Hoelzer die nach m³ berechnet werden");

                entity.Property(e => e.NHolzM3LinkedDim)
                    .HasDefaultValueSql("'1'")
                    .HasComment("Einheitlicher Preis für alle  m³ Hoelzer mit gleichem Querschnitt");

                entity.Property(e => e.NHolzPreisBegastM3).HasComment("Aufschalg fuer begast Holz pro Qubikmeter");

                entity.Property(e => e.NHolzPreisHitzeM3).HasComment("Aufschalg fuer hitzebehandeltes Holz pro Qubikmeter");

                entity.Property(e => e.NHolzPreisSirexM3).HasComment("Aufschalg fuer Sirex-Holz pro Qubikmeter");

                entity.Property(e => e.NHolzVerschnittBrett)
                    .HasDefaultValueSql("'10'")
                    .HasComment("Verschnitt fuer Brett");

                entity.Property(e => e.NHolzVerschnittDiele)
                    .HasDefaultValueSql("'10'")
                    .HasComment("Verschnitt fuer Plattenwerkstoff");

                entity.Property(e => e.NHolzVerschnittKh)
                    .HasDefaultValueSql("'10'")
                    .HasComment("Verschnitt fuer Kantholz");

                entity.Property(e => e.NHolzVerschnittNutfeder)
                    .HasDefaultValueSql("'10'")
                    .HasComment("Verschnitt fuer Plattenwerkstoff");

                entity.Property(e => e.NHolzVerschnittPlattenw)
                    .HasDefaultValueSql("'10'")
                    .HasComment("Verschnitt fuer Plattenwerkstoff");

                entity.Property(e => e.NNaegelBrettmeter)
                    .HasDefaultValueSql("'20'")
                    .HasComment("Anzahl der Naegel pro Brettmeter");

                entity.Property(e => e.NNaegelQkLk)
                    .HasDefaultValueSql("'3'")
                    .HasComment("Anzahl Naegel pr Kreuzverbindung von Lk und QK bzw. GK");

                entity.Property(e => e.NSonsGewinn).HasComment("Kalulierter Gewinn in Prozent");

                entity.Property(e => e.NSonsMatgemeinkosten)
                    .HasDefaultValueSql("'25'")
                    .HasComment("Materialgemeinkosten in Prozent");

                entity.Property(e => e.NSonsPersgermeinkosten)
                    .HasDefaultValueSql("'25'")
                    .HasComment("Personalgemeinkosten in Prozent");

                entity.Property(e => e.NSonsVerschnittAkylux)
                    .HasDefaultValueSql("'25'")
                    .HasComment("Verschnitt fuer Akylux");

                entity.Property(e => e.NSonsVerschnittPapier)
                    .HasDefaultValueSql("'25'")
                    .HasComment("Verschnitt fuer Papier");
            });

            modelBuilder.Entity<TKalkulationFertigung>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.Property(e => e.NM2PlattenholzKiste)
                    .HasDefaultValueSql("'0.000'")
                    .HasComment("Anzahl Minuten pro Aussenqm Plattenwerkstoffkiste");

                entity.Property(e => e.NM2SchnittholzKiste)
                    .HasDefaultValueSql("'0.000'")
                    .HasComment("Anzahl Minuten pro Aussenqm Schnittkiste");

                entity.Property(e => e.NM2Verschlag)
                    .HasDefaultValueSql("'0.000'")
                    .HasComment("Anzahl Minuten pro Aussenqm Verschlag");

                entity.Property(e => e.NM3BeipackHolz)
                    .HasDefaultValueSql("'0.000'")
                    .HasComment("Anzahl Minuten pro Qubik Beipack/Zuschnitt");

                entity.Property(e => e.NM3KonstruktionsHolz)
                    .HasDefaultValueSql("'0.000'")
                    .HasComment("Anzahl Minuten Qubik pro Mannstunde Beipack/Konstruktionsholz");

                entity.Property(e => e.NM3Palette)
                    .HasDefaultValueSql("'0.000'")
                    .HasComment("Anzahl Minuten pro Qubik Palette");

                entity.Property(e => e.NM3PlattenholzKiste)
                    .HasDefaultValueSql("'0.000'")
                    .HasComment("Anzahl Minuten Qubik pro Mannstunde Plattenwerkstoffkiste");

                entity.Property(e => e.NM3SchnittholzKiste)
                    .HasDefaultValueSql("'0.000'")
                    .HasComment("Anzahl Minuten pro Qubik pro Mannstunde Schnittkiste");

                entity.Property(e => e.NM3Verschlag)
                    .HasDefaultValueSql("'0.000'")
                    .HasComment("Anzahl Minuten Qubik pro Mannstunde Verschlag");
            });

            modelBuilder.Entity<TKalkulationHolz>(entity =>
            {
                entity.HasKey(e => new { e.NVerpId, e.NVerptypId, e.NParentId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

                entity.Property(e => e.DCreated)
                    .ValueGeneratedOnAddOrUpdate()
                    .HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.NAnzahl).HasDefaultValueSql("'1.00'");

                entity.Property(e => e.NBelegung).HasDefaultValueSql("'100.00'");

                entity.Property(e => e.NBreite).HasDefaultValueSql("'1.00'");

                entity.Property(e => e.NHoehe).HasDefaultValueSql("'1.00'");

                entity.Property(e => e.NLaenge).HasDefaultValueSql("'1.00'");

                entity.Property(e => e.NMattypId).HasComment("FichteTanne=1, Eiche, Buche, Sperrholz=10, OSB3, Spanplatte");

                entity.Property(e => e.NPreisPro).HasDefaultValueSql("'0.00'");

                entity.Property(e => e.NPreisProEinheitId).HasDefaultValueSql("'0'");

                entity.Property(e => e.NPreisSource).HasComment("1=Standardwert,\r\n2=Allgemein, 4=Manuell");

                entity.Property(e => e.NQm2).HasComment("Quadratmeter");

                entity.Property(e => e.NQm3).HasComment("Qubikmeter");
            });

            modelBuilder.Entity<TKalkulationNagel>(entity =>
            {
                entity.HasKey(e => new { e.NVerpId, e.NVerptypId, e.NParentId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

                entity.Property(e => e.DCreated)
                    .ValueGeneratedOnAddOrUpdate()
                    .HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.NAbmessung1).HasComment("Abmessung des kleineren Verbindungsteil");

                entity.Property(e => e.NAbmessung2).HasComment("Abmessung des groesseren Verbindungsteil");

                entity.Property(e => e.NBelegungHolzId).HasComment("Referenz zu t_kalkulation_holz child id fuer Belegung");

                entity.Property(e => e.NHoehe).HasComment("Hoehe der Verbindung z.B. Lk Höhe+Bretthöhe");

                entity.Property(e => e.NLaenge).HasDefaultValueSql("'1.00'");

                entity.Property(e => e.NTypId).HasComment("Nageltypen t_katalog.kat_grp=?");
            });

            modelBuilder.Entity<TKalkulationPersonal>(entity =>
            {
                entity.HasKey(e => new { e.NVerpId, e.NVerptypId, e.NParentId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

                entity.Property(e => e.DCreated)
                    .ValueGeneratedOnAddOrUpdate()
                    .HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.NAnzahl).HasDefaultValueSql("'1.00'");

                entity.Property(e => e.NAnzahlEinheitId).HasComment("kat_grp=11");

                entity.Property(e => e.NMinutenPro)
                    .HasDefaultValueSql("'0.00'")
                    .HasComment("Minuten pro Quadratmeter, Qubikmeter oder Stueck");

                entity.Property(e => e.NPreisPro)
                    .HasDefaultValueSql("'0.00'")
                    .HasComment("Preis pro Stunde");
            });

            modelBuilder.Entity<TKalkulationSchnell>(entity =>
            {
                entity.HasKey(e => e.CId)
                    .HasName("PRIMARY");

                entity.Property(e => e.NKgTara).HasDefaultValueSql("'0.000'");

                entity.Property(e => e.NQb3MaterialSchnitt).HasDefaultValueSql("'0.000'");

                entity.Property(e => e.NQm2AussenPreis).HasDefaultValueSql("'0.000'");

                entity.Property(e => e.NQm2BodenPreis).HasDefaultValueSql("'0.000'");

                entity.Property(e => e.NQm2MaterialPlatte).HasDefaultValueSql("'0.000'");

                entity.Property(e => e.NZuschlagEinmalAllg).HasDefaultValueSql("'0.000'");

                entity.Property(e => e.NZuschlagKurzfristigkeit).HasDefaultValueSql("'0.000'");
            });

            modelBuilder.Entity<TKalkulationSonstige>(entity =>
            {
                entity.HasKey(e => new { e.NVerpId, e.NVerptypId, e.NParentId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

                entity.Property(e => e.DCreated)
                    .ValueGeneratedOnAddOrUpdate()
                    .HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.NAnzahl).HasDefaultValueSql("'0.000'");

                entity.Property(e => e.NPreisEinheitId).HasDefaultValueSql("'0'");

                entity.Property(e => e.NPreisPro).HasDefaultValueSql("'0.0000'");
            });

            modelBuilder.Entity<TKalkulationSonstigesAllg>(entity =>
            {
                entity.HasKey(e => new { e.NVerpId, e.NVerptypId, e.NParentId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

                entity.Property(e => e.DCreated)
                    .ValueGeneratedOnAddOrUpdate()
                    .HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.NFaktor).HasDefaultValueSql("'0.00'");
            });

            modelBuilder.Entity<TKalkulationStdwerteHolz>(entity =>
            {
                entity.HasKey(e => new { e.NLieferantId, e.NArtikelId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Standardwerte für Holz bei der Kalkulation");
            });

            modelBuilder.Entity<TKalkulationStdwerteNaegel>(entity =>
            {
                entity.HasKey(e => new { e.NStaerke1, e.NStaerke2, e.NLieferantId, e.NArtikelId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

                entity.HasComment("Standardwerte für Naegel bei der Kalkulation");
            });

            modelBuilder.Entity<TKalkulationStdwertePersonal>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Standardwerte zur Kalkulation der Gruppe Personal");

                entity.Property(e => e.NMonBerechBoden)
                    .HasDefaultValueSql("'2'")
                    .HasComment("1=Berechnung nach Quadratmeter; 2=Berechnung nach Qubikmeter");

                entity.Property(e => e.NMonBerechDeckel)
                    .HasDefaultValueSql("'2'")
                    .HasComment("1=Berechnung nach Quadratmeter; 2=Berechnung nach Qubikmeter");

                entity.Property(e => e.NMonBerechKopf)
                    .HasDefaultValueSql("'2'")
                    .HasComment("1=Berechnung nach Quadratmeter; 2=Berechnung nach Qubikmeter");

                entity.Property(e => e.NMonBerechSeite)
                    .HasDefaultValueSql("'2'")
                    .HasComment("1=Berechnung nach Quadratmeter; 2=Berechnung nach Qubikmeter");

                entity.Property(e => e.NMonBodenM2Min)
                    .HasDefaultValueSql("'30'")
                    .HasComment("Boden-Montage Minuten pro  Quadratmeter");

                entity.Property(e => e.NMonBodenM3Min)
                    .HasDefaultValueSql("'30'")
                    .HasComment("Boden-Montage Minuten pro  Qubiktmeter");

                entity.Property(e => e.NMonDeckelM2Min)
                    .HasDefaultValueSql("'30'")
                    .HasComment("Deckel-Montage Minuten pro  Quadratmeter");

                entity.Property(e => e.NMonDeckelM3Min)
                    .HasDefaultValueSql("'30'")
                    .HasComment("Deckel-Montage Minuten pro  Qubiktmeter");

                entity.Property(e => e.NMonKopfM2Min)
                    .HasDefaultValueSql("'30'")
                    .HasComment("Kopf-Montage Minuten pro  Quadratmeter");

                entity.Property(e => e.NMonKopfM3Min)
                    .HasDefaultValueSql("'30'")
                    .HasComment("Kopf-Montage Minuten pro  Qubiktmeter");

                entity.Property(e => e.NMonPaletteM3Min)
                    .HasDefaultValueSql("'30'")
                    .HasComment("Paletten-Montage Minuten pro  Qubiktmeter");

                entity.Property(e => e.NMonSeiteM2Min)
                    .HasDefaultValueSql("'30'")
                    .HasComment("Seiten-Montage Minuten pro  Quadratmeter");

                entity.Property(e => e.NMonSeiteM3Min)
                    .HasDefaultValueSql("'30'")
                    .HasComment("Seite-Montage Minuten pro  Qubiktmeter");

                entity.Property(e => e.NStundenpreis)
                    .HasDefaultValueSql("'30.00'")
                    .HasComment("Stundepreis der Mannstunde");

                entity.Property(e => e.NVpSeemKiste).HasComment("Aussenqmpreis");

                entity.Property(e => e.NVpSeemPal).HasComment("Aussenqmpreis");

                entity.Property(e => e.NVpVerpacktKiste).HasComment("Aussenqmpreis");

                entity.Property(e => e.NVpVerpacktPal).HasComment("Aussenqmpreis");

                entity.Property(e => e.NZkBhGebohrt).HasComment("Zuschlagkalkulations pro gebohrtes Bohrholz");

                entity.Property(e => e.NZkBhGenagelt).HasComment("Zuschlagkalkulations pro genageltes Bohrholz");

                entity.Property(e => e.NZkKupplung).HasComment("Zuschlagkalkulations pro Kupplung");

                entity.Property(e => e.NZkMarkierungBuchstabe).HasComment("Zuschlagkalkulations pro Markierungsbuchstabe");

                entity.Property(e => e.NZkUstahl).HasComment("Zuschlagkalkulations pro U-Stahl");

                entity.Property(e => e.NZuschnittBerech)
                    .HasDefaultValueSql("'2'")
                    .HasComment("1=Berechnung nach Quadratmeter; 2=Berechnung nach Qubikmeter");

                entity.Property(e => e.NZuschnittM2Min)
                    .HasDefaultValueSql("'30'")
                    .HasComment("Minuten  fuer Zuschnitt pro Quadratmeterware");

                entity.Property(e => e.NZuschnittM3Min)
                    .HasDefaultValueSql("'30'")
                    .HasComment("Minuten  fuer Zuschnitt pro Qubiktmeterware");
            });

            modelBuilder.Entity<TKalkulationStdwertePersonalKomplex>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.Property(e => e.NMaterialGrpId).HasComment("kat_grp=28");

                entity.Property(e => e.NTypId).HasComment("kat_grp=72");

                entity.Property(e => e.NVerpackungsGrpId).HasComment("kat_grp=50");

                entity.Property(e => e.NZuschlag).HasComment("Zuschlag in\r\nWaehrung");
            });

            modelBuilder.Entity<TKalkulationStdwerteSonstige>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Standardwerte zur Kalkulation");
            });

            modelBuilder.Entity<TKalkulationVerpackung>(entity =>
            {
                entity.HasKey(e => new { e.NVerpId, e.NVerptypId, e.NParentId, e.NChildId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

                entity.Property(e => e.DCreated)
                    .ValueGeneratedOnAddOrUpdate()
                    .HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.NAuto)
                    .HasDefaultValueSql("'1'")
                    .HasComment("1=von System erzeugt; 0=manuell erzeugt");
            });

            modelBuilder.Entity<TKalkulationVerpackungTemplate>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.Property(e => e.DCreated)
                    .ValueGeneratedOnAddOrUpdate()
                    .HasDefaultValueSql("CURRENT_TIMESTAMP");
            });

            modelBuilder.Entity<TKalkulationVerpackungTemplateField>(entity =>
            {
                entity.HasKey(e => new { e.NTemplateId, e.NParentId, e.NChildId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                entity.Property(e => e.DCreated)
                    .ValueGeneratedOnAddOrUpdate()
                    .HasDefaultValueSql("CURRENT_TIMESTAMP");
            });

            modelBuilder.Entity<TKantholz>(entity =>
            {
                entity.HasKey(e => e.KhId)
                    .HasName("PRIMARY");

                entity.HasComment("Liste der Kanthölzer die in den Liste der Kanthölzer zur Auswahl stehen");
            });

            modelBuilder.Entity<TKatalog>(entity =>
            {
                entity.HasKey(e => new { e.KatGrp, e.KatId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Katalog für alle allgemeine Listen");

                entity.Property(e => e.NInternal).HasDefaultValueSql("'0'");

                entity.Property(e => e.NNoAppUse)
                    .HasDefaultValueSql("'0'")
                    .HasComment("1=wird in einer app nicht angezeigt");
            });

            modelBuilder.Entity<TKatalogC>(entity =>
            {
                entity.HasKey(e => new { e.KatGrp, e.KatId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.Property(e => e.NInternal).HasDefaultValueSql("'0'");
            });

            modelBuilder.Entity<TKatalogEn>(entity =>
            {
                entity.HasKey(e => new { e.KatGrp, e.KatId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.Property(e => e.NInternal).HasDefaultValueSql("'0'");
            });

            modelBuilder.Entity<TKhlager>(entity =>
            {
                entity.HasKey(e => e.KhlId)
                    .HasName("PRIMARY");

                entity.HasComment("Liste der Lagerknathölzer. Wird gelöstcht, wenn die Materialwirtschaft existiert.");

                entity.Property(e => e.KhlBehandlsart).HasComment("kat_grp=5");
            });

            modelBuilder.Entity<TKhzukauf>(entity =>
            {
                entity.HasKey(e => e.KhzId)
                    .HasName("PRIMARY");

                entity.HasComment("Liste der Kanthölzer die zugekauft werden können und dem Flag in welcher Liste das Kantholz angezeigt wird.");

                entity.Property(e => e.KhzBh).HasComment("1=wird in der Liste der Bohrhölzer angezeigt");

                entity.Property(e => e.KhzDh).HasComment("1=wird in der Liste der Deckelhölzer angezeigt");

                entity.Property(e => e.KhzGk).HasComment("1=wird in der Liste deGleitkufen angezeigt");

                entity.Property(e => e.KhzLk).HasComment("1=wird in der Liste de Längskufen angezeigt");

                entity.Property(e => e.KhzLkFlach)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Zeigt an, ob die Lk standardmäßig flach statt hochkant vorbelegt werden");

                entity.Property(e => e.KhzQk).HasComment("1=wird in der Liste de Querkufen angezeigt");

                entity.Property(e => e.KhzRh).HasComment("1=wird in der Liste der Rahmen angezeigt");

                entity.Property(e => e.KhzSb).HasComment("Schiebebretter");

                entity.Property(e => e.KhzSt).HasComment("1=wird in der Liste der Steher angezeigt");
            });

            modelBuilder.Entity<TKnowHow>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("KnowHow Datenbank. Beschreibung von speziellen Prozessen die mit Suchbegriffen und Verweisen auf andere Objekte hinterlegt werden.");
            });

            modelBuilder.Entity<TKnowHowAttachment>(entity =>
            {
                entity.HasKey(e => new { e.NKnowHowId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.Property(e => e.NId).ValueGeneratedOnAdd();

                entity.Property(e => e.NTypeId).HasDefaultValueSql("'1'");
            });

            modelBuilder.Entity<TKnowHowLink>(entity =>
            {
                entity.HasKey(e => new { e.NKnowHowId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Verweise auf andere Objekte des KnowHow Eintrags");

                entity.Property(e => e.NId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<TKnowHowTag>(entity =>
            {
                entity.HasKey(e => new { e.NKnowHowId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Suchbegriffe für einen KnowHow Eintrag");
            });

            modelBuilder.Entity<TKostenstelle>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Kostenstellen - wurde angefangen aber bisher nicht weiter entwickelt, bedeingt durch geringe Nachfrage");

                entity.Property(e => e.NParentId).HasDefaultValueSql("'0'");
            });

            modelBuilder.Entity<TKundeContainerPreise>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Kundenabhängige Containerpreise");

                entity.Property(e => e.NContTypId).HasComment("t_container_typen.n_id");
            });

            modelBuilder.Entity<TKundeKgDim>(entity =>
            {
                entity.HasKey(e => new { e.NKundeId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Kunden- und gewichtsabhängige Längskufendimension ");

                entity.Property(e => e.NId).ValueGeneratedOnAdd();

                entity.Property(e => e.NLkHochkant).HasDefaultValueSql("'1'");
            });

            modelBuilder.Entity<TKundeLkAbstand>(entity =>
            {
                entity.HasKey(e => new { e.NKundeId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Kundenabhängige Abstand der Längskufen mit Angabe der Anzahl");

                entity.Property(e => e.NId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<TKundeMaschineRasterprei>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Kunden-Preisdefinition für bestimmtes Material. Der Preis definiert sich über verschiedene Eigenschaften.");
            });

            modelBuilder.Entity<TKundeMeldung>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Erfassung von Reklamationen zur Qualitätssicherung");

                entity.Property(e => e.NErrBereichId).HasComment("kat_grp=123");

                entity.Property(e => e.NErrUrsacheId).HasComment("kat_grp=122");

                entity.Property(e => e.NErrVerursachtDurchId).HasComment("kat_grp=124");

                entity.Property(e => e.NErrVerursachtDurchPersonId).HasComment("t_ansprechpartner");

                entity.Property(e => e.NMeldungTypId)
                    .HasDefaultValueSql("'1'")
                    .HasComment("kat_grp=120");

                entity.Property(e => e.NZufriedenheitId).HasComment("kat_grp=121");
            });

            modelBuilder.Entity<TKundeVerpPreise>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Kundenabhängige Preisdefinition der Verpackung");

                entity.Property(e => e.NBPreisSeemUnterAqmpreis).HasDefaultValueSql("'0.00'");

                entity.Property(e => e.NBPreisSeemUnterAqmpreisAdapt).HasDefaultValueSql("'0.000'");

                entity.Property(e => e.NBPreisVerpacktUnterAqmpreis).HasDefaultValueSql("'0.00'");

                entity.Property(e => e.NBPreisVerpacktUnterAqmpreisAdapt).HasDefaultValueSql("'0.000'");

                entity.Property(e => e.NFertigungKalkDetailId)
                    .HasDefaultValueSql("'0'")
                    .HasComment("t_schnell_kalk_initval_fertigung.n_id");

                entity.Property(e => e.NMPreisPlattenwerkstoff).HasDefaultValueSql("'0.000'");

                entity.Property(e => e.NMPreisSchnittholz).HasDefaultValueSql("'0.000'");

                entity.Property(e => e.NVerpackungKalkDetailId)
                    .HasDefaultValueSql("'0'")
                    .HasComment("t_schnell_kalk_initval_verpackung.n_id");
            });

            modelBuilder.Entity<TKundeVerpPreiseZuschlag>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Zuschlaege fuer die Preise der Verpackung");

                entity.Property(e => e.NQm)
                    .HasDefaultValueSql("'1'")
                    .HasComment("qm=1 Quadratmeterzuschlag, sonst einmalig");

                entity.Property(e => e.NTypId).HasComment("kat_grp = 100");

                entity.Property(e => e.NWert).HasComment("Wert ist >0, wenn es ein ab Wert ist siehe KAT_GRP=100");
            });

            modelBuilder.Entity<TKundeartikel>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Details zur Artikel-Kunden Beziehung");

                entity.Property(e => e.NPreisanpassungInc).HasDefaultValueSql("'1'");
            });

            modelBuilder.Entity<TLadeentladestellen>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Lade und Entladestellen die im Lieferschein oder Transportauftrag ausgewählt werden können");

                entity.Property(e => e.NEntladestelle).HasDefaultValueSql("'1'");

                entity.Property(e => e.NFirmaId).HasComment("Ist nur gfuellt wenn Kundenbeziehung");

                entity.Property(e => e.NLadestelle).HasDefaultValueSql("'1'");
            });

            modelBuilder.Entity<TLager>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Eigenes Lager. Unter derm Lager gibt es noch die Lagerplätze.");
            });

            modelBuilder.Entity<TLagerKosten>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Berechnete Lagerkosten für einen  Kunden in einem Zeitraum. Die Einzelpositionen sind in der Tabelle t_lager_kosten_posten");
            });

            modelBuilder.Entity<TLagerKostenAllgdef>(entity =>
            {
                entity.HasKey(e => e.NKundeId)
                    .HasName("PRIMARY");

                entity.HasComment("Allgemeine Lagerkosten-Einstellungen zu einem Kunden");

                entity.Property(e => e.NKundeId).ValueGeneratedNever();

                entity.Property(e => e.NIsWeBerechnen)
                    .HasDefaultValueSql("'0'")
                    .HasComment("1=Wareneinagng wird berechnet");
            });

            modelBuilder.Entity<TLagerKostenPosten>(entity =>
            {
                entity.HasKey(e => new { e.NMainId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Lagerkosteberechnung der einzelnen Positionen im Lager");

                entity.Property(e => e.NId).ValueGeneratedOnAdd();

                entity.Property(e => e.NAuftragId).HasDefaultValueSql("'0'");

                entity.Property(e => e.NBerechnungNachId).HasComment("kat_grp=63");

                entity.Property(e => e.NKostenZuwegung).HasDefaultValueSql("'0.00'");

                entity.Property(e => e.NZuwegung).HasDefaultValueSql("'0.0000'");
            });

            modelBuilder.Entity<TLagerKundePreiseAuslagerung>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Kunden-Auslagerlagerungskosten in Abhängigkeit vom Typ wie Europalette, Karton, Kiste");

                entity.Property(e => e.NTypId).HasComment("kat_grp=10");
            });

            modelBuilder.Entity<TLagerKundePreiseAuslagerungAZuschlag>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Zuschläge in Abhängigkeit von Dimension oder Gewicht auf t_lager_kunde_preise_auslagerung_artikel");

                entity.Property(e => e.NPreisId).HasComment("PK von t_lager_kunde_preise_auslagerung");

                entity.Property(e => e.NZuschlagTypId).HasComment("kat_grp=62");
            });

            modelBuilder.Entity<TLagerKundePreiseAuslagerungArtikel>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Kunden-Auslagerlagerungskosten für Auslagerung von Artikeln");

                entity.Property(e => e.NTypId).HasComment("kat_grp=10");
            });

            modelBuilder.Entity<TLagerKundePreiseAuslagerungZuschlag>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Zuschläge in Abhängigkeit von Dimension oder Gewicht auf t_lager_kunde_preise_auslagerung");

                entity.Property(e => e.NPreisId).HasComment("PK von t_lager_kunde_preise_auslagerung");

                entity.Property(e => e.NZuschlagTypId).HasComment("kat_grp=62");
            });

            modelBuilder.Entity<TLagerKundePreiseLagerplatz>(entity =>
            {
                entity.HasKey(e => new { e.NKundeId, e.NLagerId, e.NLagerplatzId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                entity.HasComment("Lagerplatzpreise pro Kunde");
            });

            modelBuilder.Entity<TLagerKundePreiseWareneingang>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Kunden-Wareneingangskosten in Abhängigkeit vom Typ wie Europalette, Karton, Kiste");

                entity.Property(e => e.NTypId).HasComment("kat_grp=10");
            });

            modelBuilder.Entity<TLagerKundePreiseWareneingangZuschlag>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Zuschläge in Abhängigkeit von Dimension oder Gewicht auf t_lager_kunde_preise_wreneingang");

                entity.Property(e => e.NPreisId).HasComment("PK von t_lager_kunde_preise_wareneingang");

                entity.Property(e => e.NZuschlagTypId).HasComment("kat_grp=62");
            });

            modelBuilder.Entity<TLagerKundenWepArtikel>(entity =>
            {
                entity.HasKey(e => e.NArtikelId)
                    .HasName("PRIMARY");

                entity.HasComment("Artikel des Kunden die auf einem Wareneingangspackstück eingelagert wurden");

                entity.Property(e => e.NArtikelId)
                    .ValueGeneratedNever()
                    .HasComment("t_wareneingangartikel.n_id");

                entity.Property(e => e.DCreated)
                    .ValueGeneratedOnAddOrUpdate()
                    .HasDefaultValueSql("CURRENT_TIMESTAMP");
            });

            modelBuilder.Entity<TLagerKundenWepArtikelKorrektur>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Korrektur bei den eingelgarten Artikeln");

                entity.Property(e => e.NWepArtikelId).HasComment("t_wareneingangartikel.n_id");

                entity.Property(e => e.NWepId).HasComment("t_wareneingangpackstueck.n_id");
            });

            modelBuilder.Entity<TLagerplatz>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Vorhandene Lageplätze, welche dem t_lager untergeordnet sind.");
            });

            modelBuilder.Entity<TLagerverwaltung>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Alles eingelagerten Positionen.");

                entity.Property(e => e.DLastmodified)
                    .ValueGeneratedOnAddOrUpdate()
                    .HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.NAuslagerungVerpId).HasComment("id von t_auslagerungartikel_verp, wenn Artikel ausgelagert und verpackt werden");

                entity.Property(e => e.NGebrauchtVerpId).HasComment("id von t_packmittel_gebraucht_nr");
            });

            modelBuilder.Entity<TLagerverwaltungKorrektur>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Protokoll an den Änderungen de eingelagerten Lagerpositionen");

                entity.Property(e => e.DDate).HasDefaultValueSql("'0000-00-00'");

                entity.Property(e => e.DDateKorrektur).HasDefaultValueSql("'0000-00-00'");

                entity.Property(e => e.NGebrauchtVerpId).HasComment("id von t_packmittel_gebraucht_nr");
            });

            modelBuilder.Entity<TLagerverwaltungUmlagern>(entity =>
            {
                entity.HasKey(e => new { e.NId, e.NSubId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Protkoll für Umlagerung von Positionen");

                entity.Property(e => e.NSubId).ValueGeneratedOnAdd();

                entity.Property(e => e.DLastmodified)
                    .ValueGeneratedOnAddOrUpdate()
                    .HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.NAuslagerungVerpId).HasComment("id von t_auslagerungartikel_verp, wenn Artikel ausgelagert und verpackt werden");

                entity.Property(e => e.NGebrauchtVerpId).HasComment("id von t_packmittel_gebraucht_nr");
            });

            modelBuilder.Entity<TLieferschein>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Kopfdaten des Lieferscheins");

                entity.Property(e => e.DGeaendertAm).HasComment("Datum wann der Datensatz geändert wurde");

                entity.Property(e => e.DGedruckt).HasComment("Zeit wann Lieferschein gedruckt wurde");

                entity.Property(e => e.DLieferTermin)
                    .HasDefaultValueSql("'0000-00-00'")
                    .HasComment("Eindeutig mit lieferschein Id");

                entity.Property(e => e.DLieferscheinDatum).HasComment("Lieferschein Ausstellungsdatum");

                entity.Property(e => e.NUserIdErstellt).HasComment("ID des Benutzers der den Datensatz erstellt hat.");

                entity.Property(e => e.NUserIdGeaendert).HasComment("ID des Benutzers der den Datensatz geändert hat.");
            });

            modelBuilder.Entity<TLieferscheinPosten>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Posten zum Lieferschein");

                entity.Property(e => e.DCreated)
                    .ValueGeneratedOnAddOrUpdate()
                    .HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.NAnzahlRechnung)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Anzahl der schon erfassten xxx in einer Rechnung");

                entity.Property(e => e.NAuftragId).HasDefaultValueSql("'0'");

                entity.Property(e => e.NEinzelgewicht).HasComment("0=Gesamtgewicht; 1=Einzelgewicht' AFTER `n_gewicht_brutto");

                entity.Property(e => e.NPosition).HasDefaultValueSql("'0'");
            });

            modelBuilder.Entity<TMahnung>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Mahnliste. Die Mahnungen der Liste sind in Tabelle t_mahnungen");

                entity.Property(e => e.DCreated).HasDefaultValueSql("'0000-00-00 00:00:00'");
            });

            modelBuilder.Entity<TMahnungen>(entity =>
            {
                entity.HasKey(e => new { e.NMahnungId, e.NRechnungId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Die Liste der Mahnungen zu der Mahnliste und der entsprechenden Rechnung und der entsprechenden Massnahme, wie z.B. Mahnstufe erhöht.");

                entity.Property(e => e.NMahnungId).HasComment("t_mahnung.n_id");

                entity.Property(e => e.NRechnungId).HasComment("t_rechnung.n_id");

                entity.Property(e => e.DRechnungsZahlungsziel).HasDefaultValueSql("'0000-00-00'");

                entity.Property(e => e.NMahngebuehr).HasDefaultValueSql("'0.00'");

                entity.Property(e => e.NMahnstufeTel).HasComment("telefonische Mahnstufe");

                entity.Property(e => e.NRechnungsRechtsanwalt).HasComment("Rechnung liegt beim Rechtsanwalt");
            });

            modelBuilder.Entity<TMailServer>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Konfiguration für Mail Konten, die für verschiedene Zwecke in Cratemaker benötigt werden");

                entity.Property(e => e.NTlsType)
                    .HasDefaultValueSql("'1'")
                    .HasComment("1=utNoTLSSupport 2=ImplicitTLS 3=RequireTLS 4=ExplicitTLS");
            });

            modelBuilder.Entity<TMaterial>(entity =>
            {
                entity.HasKey(e => e.MtId)
                    .HasName("PRIMARY");

                entity.HasComment("Wiederkehrendes Material vom Kunden, welches verpackt wird.");

                entity.Property(e => e.MtEinheitId).HasComment("kat_grp=11");
            });

            modelBuilder.Entity<TMaterialKostenstelle>(entity =>
            {
                entity.HasKey(e => e.CId)
                    .HasName("PRIMARY");

                entity.HasComment("Material welcehs aus dem Lager zur Kostenstelle gebucht wurde");
            });

            modelBuilder.Entity<TMaterialLager>(entity =>
            {
                entity.HasKey(e => e.CId)
                    .HasName("PRIMARY");

                entity.HasComment("Lager der Materialwirtschaft");

                entity.Property(e => e.DCreated).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.DUpdated).ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.NWeArtikelId).HasComment("t_wareneingangartikel.n_id");
            });

            modelBuilder.Entity<TMaterialLagerAddionalAllowedEinheit>(entity =>
            {
                entity.HasKey(e => new { e.NFromEinheitId, e.NToEinheitId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Mapping für die App um weitere Einheiten für Auslagerung anzuzeigen z.B. m³ und Stück");
            });

            modelBuilder.Entity<TMaterialLagerHistory>(entity =>
            {
                entity.HasKey(e => e.CId)
                    .HasName("PRIMARY");

                entity.Property(e => e.NActionId).HasComment("1=Eingang-WE, 2=Ausgang, 3=Korrektur-WE, 4=Korrektur, 5=Korrektur-LS");

                entity.Property(e => e.NUserId).HasComment("user which die the update");
            });

            modelBuilder.Entity<TMaterialLagerPlaned>(entity =>
            {
                entity.HasKey(e => new { e.CId, e.NTypeId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                entity.HasComment("Geplante Artikelmengen die verplant sind");

                entity.Property(e => e.NTypeId).HasComment("1=Verpackung, 2=Beiblatt");

                entity.Property(e => e.NId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<TNachkalkulation>(entity =>
            {
                entity.HasKey(e => new { e.NPostenId, e.NPostenTypId, e.NPostenSubTypId, e.NPostenSubId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0, 0 });

                entity.HasComment("Die Position die bei der Nachkulation zum Posten ermittelt werden konnten");

                entity.Property(e => e.NId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<TNachkalkulationV2>(entity =>
            {
                entity.HasKey(e => e.CId)
                    .HasName("PRIMARY");

                entity.HasComment("Wird von t_capi_time_event geschrieben, wenn status = locked");
            });

            modelBuilder.Entity<TNeukundeLogbuch>(entity =>
            {
                entity.HasKey(e => new { e.NFirmaId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Logpuch für die Akquise von Neukunden");

                entity.Property(e => e.NId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<TNeukundeTermin>(entity =>
            {
                entity.HasKey(e => new { e.NFirmaId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Termine zu der möglichen Neukunden");

                entity.Property(e => e.NId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<TNiederlassung>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Niederlassungen die im Cratemaker Admin konfiguriert werden");
            });

            modelBuilder.Entity<TNotificationLieferschein>(entity =>
            {
                entity.HasKey(e => new { e.NLieferscheinId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Wenn zu einem Auftrag eine EMailgruppe definiert, welche über den VErsand der Ware infomiert werden sollte erfolgt hier ein Eintrag. Ein nachgelagerter Prozesse verschickt die EMail und setzt d_processed.");

                entity.Property(e => e.NId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<TNr>(entity =>
            {
                entity.HasKey(e => new { e.NTypId, e.CGroup, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                entity.HasComment("Wird für die Generierung einer nächsten Nr benötigt");
            });

            modelBuilder.Entity<TPacklisteDetailMaterial>(entity =>
            {
                entity.HasKey(e => new { e.NDetailId, e.NMaterialId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Material zum Packstück (t_packliste_packstuecke_detail) einer Packliste (t_packliste_packstuecke_main)");

                entity.Property(e => e.NMaterialId).ValueGeneratedOnAdd();

                entity.Property(e => e.NBeiblattId).HasComment("Referenz auf das Beiblatt");

                entity.Property(e => e.NBeiblattMaterialId).HasComment("Referenz auf das Material vom Beiblatt");

                entity.Property(e => e.NEinzelgewicht).HasDefaultValueSql("'1'");

                entity.Property(e => e.NLangId).HasComment("kat_grp=19");

                entity.Property(e => e.NTransId)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Referenz auf t_translation wenn in Uebrsetzng aufgenommen");
            });

            modelBuilder.Entity<TPacklistePackstueckeDetail>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Posten der Packliste mit Referenz auf die Packstücke der Aufträgen");

                entity.Property(e => e.NVerpSubTypId).HasComment("kat_gr=10");
            });

            modelBuilder.Entity<TPacklistePackstueckeMain>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.Property(e => e.NContTara).HasDefaultValueSql("'0'");

                entity.Property(e => e.NContTypId).HasDefaultValueSql("'0'");

                entity.Property(e => e.NLadungSichGewicht).HasDefaultValueSql("'0'");
            });

            modelBuilder.Entity<TPackmittelGebraucht>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Gebrauchte Packmittel zur Weiterverarbeitug - aktuell nicht mehr in Benutzung");

                entity.Property(e => e.NNettoGewicht).HasDefaultValueSql("'0'");
            });

            modelBuilder.Entity<TPackmittelGebrauchtDetail>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Verwaltung der fortlaufenden Nummer der gebraucht Packmittel");

                entity.Property(e => e.VerpAktiv).HasDefaultValueSql("'1'");

                entity.Property(e => e.VerpAnzahl).HasDefaultValueSql("'1'");

                entity.Property(e => e.VerpLkQkVerschrauben).HasDefaultValueSql("'0'");
            });

            modelBuilder.Entity<TPackmittelGebrauchtEingang>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Eingang der gebrauchten Packmittel");

                entity.Property(e => e.DCreated).HasDefaultValueSql("'0000-00-00 00:00:00'");

                entity.Property(e => e.DErfassungsDatum).HasDefaultValueSql("'0000-00-00'");

                entity.Property(e => e.NAnzahl).HasDefaultValueSql("'1'");
            });

            modelBuilder.Entity<TPalette>(entity =>
            {
                entity.HasKey(e => e.PlId)
                    .HasName("PRIMARY");

                entity.HasComment("Details der erfassten Palette");

                entity.Property(e => e.NBodenramhenFl).HasDefaultValueSql("'0'");

                entity.Property(e => e.NBodenramhenHk).HasDefaultValueSql("'0'");

                entity.Property(e => e.NBodenramhenInnenLiegend).HasDefaultValueSql("'0'");

                entity.Property(e => e.NColloBreite).HasDefaultValueSql("'0'");

                entity.Property(e => e.NColloHoehe).HasDefaultValueSql("'0'");

                entity.Property(e => e.NColloLaenge).HasDefaultValueSql("'0'");

                entity.Property(e => e.NColloTara).HasDefaultValueSql("'0'");

                entity.Property(e => e.NKostenstelleId).HasComment("t_kostenstelle");

                entity.Property(e => e.NKuerzelId).HasComment("kat_grp=150");

                entity.Property(e => e.NKurzfristigkeitszuschlagPreis).HasDefaultValueSql("'0.0000'");

                entity.Property(e => e.NLkqkRingmutter)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Ringmutter für LK-QK");

                entity.Property(e => e.NMaschinenMass)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Daten im Maschinenmass eingegeben");

                entity.Property(e => e.NQkAusfuettern)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Hoelzer zwischen den QK");

                entity.Property(e => e.NQkLaenge)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Benutzer Qk Laenge");

                entity.Property(e => e.NQkNut)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Querkufen mit Nut");

                entity.Property(e => e.NRabatt).HasDefaultValueSql("'0'");

                entity.Property(e => e.NSchraubeMmLkqk)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Schlossschraubenlaenge fuer Lk-QK Verbindung");

                entity.Property(e => e.NSchraubeMmLkqkAussenQk)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Lk-QK Schrauben nur in auessere QK");

                entity.Property(e => e.NSchrumpfenKomplett).HasDefaultValueSql("'0'");

                entity.Property(e => e.NStatikStahlId)
                    .HasDefaultValueSql("'0'")
                    .HasComment("t_statik_material.n_id");

                entity.Property(e => e.NTaraEinbauten)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Bruttogewicht Einbauten");

                entity.Property(e => e.NWaehrungId).HasDefaultValueSql("'0'");

                entity.Property(e => e.PlAktiv).HasDefaultValueSql("'1'");

                entity.Property(e => e.PlAnzahlGeliefert).HasDefaultValueSql("'0'");

                entity.Property(e => e.PlAnzahlTransportiert).HasDefaultValueSql("'0'");

                entity.Property(e => e.PlBhRingmutter)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Ringmutter für BH");

                entity.Property(e => e.PlBhUnten).HasDefaultValueSql("'0'");

                entity.Property(e => e.PlDEinrueckBreite).HasDefaultValueSql("'0'");

                entity.Property(e => e.PlDEinrueckLaenge).HasDefaultValueSql("'0'");

                entity.Property(e => e.PlEinmalzuschlagPreis).HasDefaultValueSql("'0.0000'");

                entity.Property(e => e.PlFolienhaube).HasDefaultValueSql("'0'");

                entity.Property(e => e.PlKonservierung).HasComment("1=Trockenmittel, 2=VCI Methode");

                entity.Property(e => e.PlLieferantId).HasComment("Wenn Verpackung von anderer Firma gerfertigt wird");

                entity.Property(e => e.PlLkAusfuettern).HasDefaultValueSql("'0'");

                entity.Property(e => e.PlLkQkVerschrauben).HasDefaultValueSql("'0'");

                entity.Property(e => e.PlNettoGewicht).HasDefaultValueSql("'0'");

                entity.Property(e => e.PlOhnefolienhaube).HasDefaultValueSql("'0'");

                entity.Property(e => e.PlStatikBohrholzUeberlappen).HasDefaultValueSql("'0'");

                entity.Property(e => e.PlStatikStuetzflUeberlappen).HasDefaultValueSql("'0'");

                entity.Property(e => e.PlTellerkopfSchraubeLaenge).HasDefaultValueSql("'0'");

                entity.Property(e => e.PlTyp).HasComment("kat_grp=23");
            });

            modelBuilder.Entity<TPaletteinitval>(entity =>
            {
                entity.HasKey(e => e.PaTyp)
                    .HasName("PRIMARY");

                entity.HasComment("Werte zur Palette die vorbesetzt sind in Abhängigkeit vom Palettentyp");

                entity.Property(e => e.PaTyp).ValueGeneratedNever();
            });

            modelBuilder.Entity<TPbaufeldkunden>(entity =>
            {
                entity.HasKey(e => new { e.PbaukPbauId, e.PbaukKundeId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Verbindung von Baufeld zum Kunden");
            });

            modelBuilder.Entity<TPdeclaration>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Kopfdaten zur Packing Declaration");

                entity.Property(e => e.DGeaendertAm).HasComment("Datum wann der Datensatz geändert wurde");

                entity.Property(e => e.DGedruckt).HasComment("Zeit wann Dokument gedruckt wurde");

                entity.Property(e => e.NDocType)
                    .HasDefaultValueSql("'2'")
                    .HasComment("1=allg., 2=Australia");

                entity.Property(e => e.NQ5).HasDefaultValueSql("'0'");

                entity.Property(e => e.NQ6).HasDefaultValueSql("'0'");

                entity.Property(e => e.NType)
                    .HasDefaultValueSql("'1'")
                    .HasComment("1=FCL, 2=LCL");

                entity.Property(e => e.NUserIdErstellt).HasComment("ID des Benutzers der den Datensatz erstellt hat.");

                entity.Property(e => e.NUserIdGeaendert).HasComment("ID des Benutzers der den Datensatz geändert hat.");
            });

            modelBuilder.Entity<TPdeclarationPosten>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Packstücke die zur Declaration hinzugefügt wurden");

                entity.Property(e => e.DCreated)
                    .ValueGeneratedOnAddOrUpdate()
                    .HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.NEinzelgewicht)
                    .HasDefaultValueSql("'1'")
                    .HasComment("0=Gesamtgewicht; 1=Einzelgewicht' AFTER `n_gewicht_tara");
            });

            modelBuilder.Entity<TPhrasen>(entity =>
            {
                entity.HasKey(e => new { e.NKundeId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Kundenabhängie Phrasen für Dokumente wie Angebot, Ab, ..");

                entity.Property(e => e.NId).ValueGeneratedOnAdd();

                entity.Property(e => e.NSubtypId).HasDefaultValueSql("'-1'");

                entity.Property(e => e.NTypId).HasComment("1=Angebot, 2=Auftragsbestaetigung, 3=Fertigmeldung");
            });

            modelBuilder.Entity<TPlattenwerkstoffe>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Plattenwerkstoffe mit Dim. Können bei den Kisten ausgewählt werden.");

                entity.Property(e => e.CMaterialCode).HasComment("is used for some cutting stations");

                entity.Property(e => e.CPlattenCode).HasComment("is used for some cutting stations");

                entity.Property(e => e.NMaterialId).HasComment("kat_grp=1");
            });

            modelBuilder.Entity<TPrintlist>(entity =>
            {
                entity.HasKey(e => e.PrnlVerpTyp)
                    .HasName("PRIMARY");

                entity.HasComment("Einstellungen für das Druckfenster der Verpackungen");

                entity.Property(e => e.PrnlVerpTyp).ValueGeneratedNever();
            });

            modelBuilder.Entity<TProcessItem>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Frei definierbare Prozess die bei CrateApp für Zeitmessung genutzt werden können");

                entity.Property(e => e.CColHeader).HasComment("Spaletnueberschrift");

                entity.Property(e => e.CMode).HasComment("time, status, NULL");

                entity.Property(e => e.NColMapping)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Mapping auf die Spalte c_process_status_x von 1 bis 10");

                entity.Property(e => e.NTypeId).HasComment("t_process_type.n_id");
            });

            modelBuilder.Entity<TProcessItemPackaging>(entity =>
            {
                entity.HasKey(e => e.CPackageId)
                    .HasName("PRIMARY");

                entity.HasComment("Zeigt pro Packstueck den Status. Das Mapping der status_x Spalte ist in der Tabelle t_proces_item definiert");
            });

            modelBuilder.Entity<TProcessType>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Der übergeordnete Prozess der t_prozess_item wie z.B. Fertigung, Verpackung, ...");
            });

            modelBuilder.Entity<TProjekt>(entity =>
            {
                entity.HasKey(e => e.PrjId)
                    .HasName("PRIMARY");

                entity.HasComment("Tabelle für Projekt der Kunden. Wird genutzt für Aufträge mit Verpackungsvorschriften.");

                entity.Property(e => e.NBehandlungsart).HasDefaultValueSql("'-1'");

                entity.Property(e => e.NDeckelHaube).HasDefaultValueSql("'0'");

                entity.Property(e => e.NFolienTyp).HasComment("0-PE Folie, 1 AL Folie");

                entity.Property(e => e.NGebrVerpVerwenden).HasDefaultValueSql("'1'");
            });

            modelBuilder.Entity<TProjektAnsprechpartner>(entity =>
            {
                entity.HasKey(e => new { e.NPrjId, e.NFirmaId, e.NAnpId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                entity.HasComment("Verknüpfung von Projekten und Ansprechpartner einer Firma");
            });

            modelBuilder.Entity<TProjektkunden>(entity =>
            {
                entity.HasKey(e => new { e.PrjkPrjId, e.PrjkKundeId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Verknüpfung von Projekt mit Kunde. ");

                entity.Property(e => e.NVerpnrIncbyAuftrag)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Verpnr auftrtag und kundenbahängig erhoehen");

                entity.Property(e => e.NVerpnrIncbyProjekt).HasComment("Verpnr projekt und kundenbahängig erhoehen");
            });

            modelBuilder.Entity<TPropertiesCommon>(entity =>
            {
                entity.HasKey(e => e.CProperty)
                    .HasName("PRIMARY");

                entity.HasComment("Allgemeine Eigenschaften von Cratemaker, die für alle MA gelten.");
            });

            modelBuilder.Entity<TRaumstauObjekte>(entity =>
            {
                entity.HasKey(e => new { e.NPlanungId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Objekte wie Packstücke die zu einer Planung einer Verladung/Stauung gehören");

                entity.Property(e => e.NId).ValueGeneratedOnAdd();

                entity.Property(e => e.DCreated).HasDefaultValueSql("'0000-00-00 00:00:00'");

                entity.Property(e => e.NBreite).HasDefaultValueSql("'1'");

                entity.Property(e => e.NHoehe).HasDefaultValueSql("'1'");

                entity.Property(e => e.NLaenge).HasDefaultValueSql("'1'");

                entity.Property(e => e.NTypId)
                    .HasDefaultValueSql("'1'")
                    .HasComment("sotKiste=1, sotVerschlag, sotPalette, sotKarton, sotGitterbox");

                entity.Property(e => e.NVerpId).HasComment("Nur gefuellt wenn Referenz auf echte Verpackung");

                entity.Property(e => e.NVerpSubId).HasDefaultValueSql("'0'");

                entity.Property(e => e.NVerptypId).HasComment("Nur gefuellt wenn Referenz  auf echte Verpackung");
            });

            modelBuilder.Entity<TRaumstauPlanung>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Planung einer Verladung");

                entity.Property(e => e.DCreated).HasDefaultValueSql("'0000-00-00 00:00:00'");
            });

            modelBuilder.Entity<TRaumstauPlanungAuftrag>(entity =>
            {
                entity.HasKey(e => new { e.NPlanungId, e.NAuftragId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Aufträge/Anfragen die bei eine Planung berücksichtigt werden");
            });

            modelBuilder.Entity<TRaumstauRaeume>(entity =>
            {
                entity.HasKey(e => new { e.NPlanungId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Räume/Container die bei einer Planung zur Verfügung stehen bzw. genutzt werden.");

                entity.Property(e => e.NId).ValueGeneratedOnAdd();

                entity.Property(e => e.DCreated).HasDefaultValueSql("'0000-00-00 00:00:00'");

                entity.Property(e => e.NAchslastMax1).HasComment("Max. Last für Achse 1");

                entity.Property(e => e.NAchslastMax2).HasComment("Max. Last für Achse 2");

                entity.Property(e => e.NAchslastPos1).HasComment("Position der 1.Achse zur Berechnung der Achslast");

                entity.Property(e => e.NAchslastPos2).HasComment("Position der 2.Achse zur Berechnung der Achslast");

                entity.Property(e => e.NBreiteI).HasDefaultValueSql("'1'");

                entity.Property(e => e.NHoeheI)
                    .HasDefaultValueSql("'-1'")
                    .HasComment("-1 keine Hohe, z.B. Flat");

                entity.Property(e => e.NLadungSichHolzGewicht).HasDefaultValueSql("'0'");

                entity.Property(e => e.NLadungSichSaeckeGurte).HasDefaultValueSql("'0'");

                entity.Property(e => e.NLaengeI).HasDefaultValueSql("'1'");

                entity.Property(e => e.NRaumTyp)
                    .HasDefaultValueSql("'1'")
                    .HasComment("1=Container, 2=LKW, 3=Anhaenger kat_grp=31");

                entity.Property(e => e.NRaumTypId).HasComment("t_container_typen");
            });

            modelBuilder.Entity<TRaumstauRelRaumeObjekte>(entity =>
            {
                entity.HasKey(e => new { e.NObjektPlanungId, e.NObjektId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Verknüpfung von Räumen und Projekten");

                entity.Property(e => e.NX).HasComment("X-Position innerhalb des Raums");

                entity.Property(e => e.NY).HasComment("Y-Position innerhalb des Raums");

                entity.Property(e => e.NZ).HasComment("Z-Position innerhalb des Raums");
            });

            modelBuilder.Entity<TRechBuchungsText>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Buchungstexte auf die in einer Rechnung zurückgegriffen werden können.");
            });

            modelBuilder.Entity<TRechnung>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Kopfdaten zur Rechnung");

                entity.Property(e => e.DCreated)
                    .ValueGeneratedOnAddOrUpdate()
                    .HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.DGeaendertAm).HasComment("Datum wann der Datensatz geändert wurde");

                entity.Property(e => e.DGedruckt).HasComment("Zeit wann Rechnung gedruckt wurde");

                entity.Property(e => e.NGesamtPreisDef)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Gesamtpreis errechnet oder definiert");

                entity.Property(e => e.NGutschrift).HasComment("0=Rechnung 1=Gutschrift");

                entity.Property(e => e.NKundeIdEmpfaenger).HasComment("Der Rechnungsempfaenger");

                entity.Property(e => e.NMahngebuehr).HasDefaultValueSql("'0.00'");

                entity.Property(e => e.NMwst).HasDefaultValueSql("'0.00'");

                entity.Property(e => e.NNettoZahlbarTage).HasDefaultValueSql("'0'");

                entity.Property(e => e.NNurGesamtsumme).HasDefaultValueSql("'0'");

                entity.Property(e => e.NRechnungBezahlt).HasComment("manuelle Einstellung");

                entity.Property(e => e.NRechnungParentId).HasComment("Referenz auf den Parentdatensatz");

                entity.Property(e => e.NRechtsanwalt).HasComment("Rechnung liegt beim Rechtsanwalt");

                entity.Property(e => e.NSkonto).HasDefaultValueSql("'0.00'");

                entity.Property(e => e.NSkontoUeberschritten)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Anzahl der Tage wie weit Skonto ueberschritten wurde");

                entity.Property(e => e.NSkontoZahlbarTage).HasDefaultValueSql("'0'");

                entity.Property(e => e.NSortierungAusdruckPostenPos).HasDefaultValueSql("'0'");

                entity.Property(e => e.NSteuerparagraphen).HasDefaultValueSql("'0'");

                entity.Property(e => e.NUserIdGeaendert).HasComment("ID des Benutzers der den Datensatz geändert hat.");

                entity.Property(e => e.NZahlungsbedingungId)
                    .HasDefaultValueSql("'0'")
                    .HasComment("kat_grp=16");
            });

            modelBuilder.Entity<TRechnungEingang>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Kopfdaten zu den Eingangsrechnungen");

                entity.Property(e => e.NAbzugBruttoBetrag).HasDefaultValueSql("'0.00'");

                entity.Property(e => e.NAbzugMitMwstBetrag).HasDefaultValueSql("'0.00'");

                entity.Property(e => e.NAbzugOhneMwstBetrag).HasDefaultValueSql("'0.00'");

                entity.Property(e => e.NBestellungId).HasComment("t_bestellung.n_id");

                entity.Property(e => e.NBezahltArtId).HasComment("kat_grp=29");

                entity.Property(e => e.NTeilzahlung).HasDefaultValueSql("'0'");
            });

            modelBuilder.Entity<TRechnungEingangAuftrag>(entity =>
            {
                entity.HasKey(e => new { e.NRechnungEingangId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Eingangsrechnung mit Aufträgen verbinden, damit die Kosten bei der Nachkalkulation berücksichigt werden.");

                entity.Property(e => e.NId).ValueGeneratedOnAdd();

                entity.Property(e => e.NTypId).HasComment("kat_grp = 61");
            });

            modelBuilder.Entity<TRechnungEingangKostenstelle>(entity =>
            {
                entity.HasKey(e => new { e.NRechnungEingangId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.Property(e => e.NId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<TRechnungEingangLieferschein>(entity =>
            {
                entity.HasKey(e => new { e.NRechnungEingangId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Lieferschein fuer Eingangsrechnung");

                entity.Property(e => e.NId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<TRechnungEingangZahlung>(entity =>
            {
                entity.HasKey(e => new { e.NRechnungId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Enthält Zahlungen zu einer Eingangsrechnung, sofern es für die Rechnung mehrere Zahlungen gibt.");

                entity.Property(e => e.NId).ValueGeneratedOnAdd();

                entity.Property(e => e.NBezahltArtId).HasComment("kat_grp=29");
            });

            modelBuilder.Entity<TRechnungLagerplatz>(entity =>
            {
                entity.HasKey(e => new { e.NKundeId, e.NLagerId, e.NLagerplatzId, e.NWareneingangId, e.NRechnungsPostenId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0, 0 });

                entity.HasComment("Beinhaltet alle berechneten Lagerkosten");
            });

            modelBuilder.Entity<TRechnungNr>(entity =>
            {
                entity.HasKey(e => new { e.NYear, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Wird für die Generieung der Rechnungsnr. benutzt");

                entity.Property(e => e.NId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<TRechnungPosten>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Posten zur Rechnung");

                entity.Property(e => e.DCreated)
                    .ValueGeneratedOnAddOrUpdate()
                    .HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.DLeistungsDatum).HasDefaultValueSql("'0000-00-00'");

                entity.Property(e => e.NInEu).HasDefaultValueSql("'0'");

                entity.Property(e => e.NKostenstelleId).HasComment("t_kostenstelle");

                entity.Property(e => e.NLieferscheinId).HasComment("Rechnungsposten kann Bezug zu einem Lieferschein haben, aber muss nicht");

                entity.Property(e => e.NMitMwst).HasDefaultValueSql("'1'");

                entity.Property(e => e.NPosition).HasComment("Position innehalb der Rechnung");

                entity.Property(e => e.NRabatt).HasDefaultValueSql("'0'");

                entity.Property(e => e.NRabattWert).HasDefaultValueSql("'0.00'");
            });

            modelBuilder.Entity<TRechnungZahleingang>(entity =>
            {
                entity.HasKey(e => new { e.NRechnungId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("1 Zahlungseingänge zu n Ausgangsrechnung. Der Gesamtbetrag des Zahlungseingangs ist in t_rechnung_zahleingang_multi");

                entity.Property(e => e.NId).ValueGeneratedOnAdd();

                entity.Property(e => e.DDatum).HasDefaultValueSql("'0000-00-00'");

                entity.Property(e => e.NMultiId).HasComment("FK t_rechnung_zahleingang_multi.n_id");

                entity.Property(e => e.NZahlungsartId)
                    .HasDefaultValueSql("'1'")
                    .HasComment("kat_grp=29");
            });

            modelBuilder.Entity<TRechnungZahleingangMulti>(entity =>
            {
                entity.HasKey(e => new { e.NKundeId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Zahlungseingang des Kunden");

                entity.Property(e => e.NId).ValueGeneratedOnAdd();

                entity.Property(e => e.DCreated).HasDefaultValueSql("'0000-00-00 00:00:00'");

                entity.Property(e => e.DDatum).HasDefaultValueSql("'0000-00-00'");
            });

            modelBuilder.Entity<TRelFirmaBetreuer>(entity =>
            {
                entity.HasKey(e => new { e.NFirmaId, e.NUserId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Verbindung von Kunden zum Cratemaker-Benutzer. Optional");
            });

            modelBuilder.Entity<TRelFirmaFirma>(entity =>
            {
                entity.HasKey(e => new { e.NFirmaIdSrc, e.NFirmaIdDest })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Verbindung von Firma zu Firma mit den entsprecheden Nummern.");
            });

            modelBuilder.Entity<TRelFirmaFirmaMaterial>(entity =>
            {
                entity.HasKey(e => new { e.NFirmaIdSrc, e.NFirmaIdDest })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Verbindung von Firma zu Firma die auf die selbe Materialstruktur zugreifen.");
            });

            modelBuilder.Entity<TRelFirmaTyp>(entity =>
            {
                entity.HasKey(e => new { e.NFirmaId, e.NFirmaTypId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Relation zwischen Firma und dessen Typ");

                entity.Property(e => e.NFirmaTypId).HasComment("t_firma_typ");
            });

            modelBuilder.Entity<TRelKundeVerpStandard>(entity =>
            {
                entity.HasKey(e => new { e.NKundeId, e.NVerpTypId, e.NVerpId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                entity.HasComment("Relation von Kunden zu Standardverpackung mit entsrechedne Eigenschaften");

                entity.Property(e => e.NPreis).HasDefaultValueSql("'0.00'");
            });

            modelBuilder.Entity<TRelUserGroup>(entity =>
            {
                entity.HasKey(e => new { e.NUserId, e.NGroupId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Zuordnung von Benutzer zu Benutzergruppen");
            });

            modelBuilder.Entity<TReport>(entity =>
            {
                entity.HasKey(e => new { e.NUserId, e.CFilename })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Alle Reports die für den Ausdruck benötigt werden sind in dieser Tabelle gespeichert.");

                entity.Property(e => e.NSync).HasDefaultValueSql("'1'");
            });

            modelBuilder.Entity<TResource>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Alle Resourcen die Cratemaker verplant werden können.");

                entity.Property(e => e.NInternalType).HasComment("refrence to the linked table 10=t_ansprechpartner, 20=t_firma_fuhrpark");

                entity.Property(e => e.NTypeId).HasComment("10=person, 20=vehicle");
            });

            modelBuilder.Entity<Robo>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Alle Roboter die in der Firma im Einsatz sind.");
            });

            modelBuilder.Entity<TRoboConfig>(entity =>
            {
                entity.HasKey(e => e.CId)
                    .HasName("PRIMARY");

                entity.Property(e => e.CId).HasComment("Robo ID");

                entity.Property(e => e.CDefaultCulture)
                    .HasDefaultValueSql("'en_GB'")
                    .HasComment("Mögliche Werte: de_DE, en_GB, cs_CZ");

                entity.Property(e => e.COriginTable1)
                    .HasDefaultValueSql("'topRight'")
                    .HasComment("Position des Roboterarms an Tisch 1");

                entity.Property(e => e.COriginTable2)
                    .HasDefaultValueSql("'bottomRight'")
                    .HasComment("Position des Roboterarms an Tisch 2");

                entity.Property(e => e.CSorting).HasComment("Letzte gewählte Sortierung der Aufträge");

                entity.Property(e => e.NFixationType).HasComment("FK t_robo_fixation_type");

                entity.Property(e => e.NNailType).HasComment("FK t_robo_nail_type");
            });

            modelBuilder.Entity<TRoboConfigFixationType>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.Property(e => e.NId).HasComment("Referenziert in t_robo_config");

                entity.Property(e => e.CProperties).HasComment("key=value,...");

                entity.Property(e => e.CResourceKey).HasComment("Schlüssel der Resource (Mehrsprachigkeit)");
            });

            modelBuilder.Entity<TRoboConfigNailType>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.Property(e => e.NId).HasComment("Referenziert in t_robo_config");

                entity.Property(e => e.CProperties).HasComment("key=value,...");

                entity.Property(e => e.CResourceKey).HasComment("Schlüssel der Resource (Mehrsprachigkeit)");
            });

            modelBuilder.Entity<PackageItem>(entity =>
            {
                entity.HasKey(e => new { e.CPackageId, e.NItemId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("list of package item like side, top, .. to build with robot");

                entity.Property(e => e.NItemId).HasComment("1=Bottom, 2=Side, 3, Head, 4=Top");

                entity.Property(e => e.NPartCount).HasComment("number to build 2 sides and e.g. 1 top");
            });

            modelBuilder.Entity<TRoboPackageItemMovingDatum>(entity =>
            {
                entity.HasKey(e => new { e.CProcessId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("coordinates for robot when putting the items on nailing table");

                entity.Property(e => e.NId).ValueGeneratedOnAdd();

                entity.Property(e => e.NOrder).HasComment("order of items");

                entity.Property(e => e.NX).HasComment("x position of corner wich is nearest to zero point in x direction");

                entity.Property(e => e.NXLength).HasComment("length of item in x direction");

                entity.Property(e => e.NY).HasComment("y position of corner wich is nearest to zero point in y direction");

                entity.Property(e => e.NYLength).HasComment("length of item in y direction");

                entity.Property(e => e.NZ).HasComment("z position of corner wich is nearest to zero point in z direction");

                entity.Property(e => e.NZLength).HasComment("length of item in z direction");
            });

            modelBuilder.Entity<NailingData>(entity =>
            {
                entity.HasKey(e => new { e.CProcessId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("coordinates for robot");

                entity.Property(e => e.NId).ValueGeneratedOnAdd();

                entity.Property(e => e.NNailTypeId).HasComment("define e.g. length of nail");

                entity.Property(e => e.NOrder).HasComment("order of nails");

                entity.Property(e => e.NSaveShot).HasComment("0=shot without contact to wood, 1=contact with wood");
            });

            modelBuilder.Entity<PackageItemOrder>(entity =>
            {
                entity.HasKey(e => e.CProcessId)
                    .HasName("PRIMARY");

                entity.HasComment("the order when item has to be nailed");

                entity.Property(e => e.DDone).HasComment("indicates if the robot has done the job for the item");

                entity.Property(e => e.DStart).HasComment("indicates that the robot has git the data");

                entity.Property(e => e.NPartId).HasComment(" 1 for first tem, 2 for second ");

                entity.Property(e => e.NProcessPosition).HasComment("position of the day, position 9999 means undefined");
            });

            modelBuilder.Entity<RobotTaskItem>(entity =>
            {
                entity.HasKey(e => new { e.NRoboId, e.CVerpId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                entity.HasComment("The tasks which the robot has to process");

                entity.Property(e => e.CVerpId)
                    .HasDefaultValueSql("''")
                    .HasComment("t_verpackung.c_id");

                entity.Property(e => e.NId).ValueGeneratedOnAdd();

                entity.Property(e => e.NPartId).HasComment("1=side/Seite, 2=lid/Deckel, 3=end/Kopf, 4=bottom/Boden");

                entity.Property(e => e.Status)
                    .HasDefaultValueSql("'1'")
                    .HasComment("1=created, 2=progress, 3=finished");
            });

            modelBuilder.Entity<TRoboVerpackungPush>(entity =>
            {
                entity.HasKey(e => e.OId)
                    .HasName("PRIMARY");
            });

            modelBuilder.Entity<TSchnellKalkBeipack>(entity =>
            {
                entity.HasKey(e => new { e.CVerpId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Schnellkalkulation - Alle Artikel des Beiblatts");

                entity.Property(e => e.NId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<TSchnellKalkInitval>(entity =>
            {
                entity.HasKey(e => e.CVerpId)
                    .HasName("PRIMARY");

                entity.HasComment("Schnellkalkulation - Die Werte der Verpackung, die bei der Kalkulation benutzt wurden");

                entity.Property(e => e.NFertAllgKostenEk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertAllgKostenVk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertGesamtpreisEk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertGesamtpreisVk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertKleinteilEkBetrag).HasDefaultValueSql("'0.000'");

                entity.Property(e => e.NFertKleinteilEkProz).HasDefaultValueSql("'0.000'");

                entity.Property(e => e.NFertKleinteileFinalVk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatAkyluxEk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatAkyluxVerschnitt).HasDefaultValueSql("'0.000'");

                entity.Property(e => e.NFertMatAkyluxVk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatBeipackVk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatBeschlaegeEk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatBeschlaegeVk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatDeckelhEk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatDeckelhVerschhnitt).HasDefaultValueSql("'0.000'");

                entity.Property(e => e.NFertMatDeckelhVk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatEckverbinderEk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatEckverbinderVk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatKvhEk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatKvhVerschhnitt).HasDefaultValueSql("'0.000'");

                entity.Property(e => e.NFertMatKvhVk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatOelpapierEk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatOelpapierVerschhnitt).HasDefaultValueSql("'0.000'");

                entity.Property(e => e.NFertMatOelpapierVk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatOsbBeipackFinalEk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatOsbBeipackFinalVk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatOsbEk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatOsbFinalEk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatOsbFinalVk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatOsbVerschnitt).HasDefaultValueSql("'0.000'");

                entity.Property(e => e.NFertMatOsbVk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatPeauskleidenEk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatPeauskleidenVerschhnitt).HasDefaultValueSql("'0.000'");

                entity.Property(e => e.NFertMatPeauskleidenVk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatPreisKleinteileVk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatProzKleinteileVk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatSchlossEk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatSchlossVk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatSchnittBeipackEk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatSchnittBeipackFinalEk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatSchnittBeipackFinalVk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatSchnittBeipackKFinalEk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatSchnittBeipackKFinalVk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatSchnittBeipackVerschhnitt).HasDefaultValueSql("'0.000'");

                entity.Property(e => e.NFertMatSchnittBeipackVk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatSchnittEk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatSchnittFinalEk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatSchnittFinalVk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatSchnittKonstrEk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatSchnittKonstrVerschhnitt).HasDefaultValueSql("'0.000'");

                entity.Property(e => e.NFertMatSchnittKonstrVk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatSchnittKvhFinalEk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatSchnittKvhFinalVk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatSchnittVerschnitt).HasDefaultValueSql("'0.000'");

                entity.Property(e => e.NFertMatSchnittVk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatSchwingdaempfEk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatSchwingdaempfVk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatSiebdruckBeipackFinalEk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatSiebdruckBeipackFinalVk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatSiebdruckEk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatSiebdruckFinalEk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatSiebdruckFinalVk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatSiebdruckVerschnitt).HasDefaultValueSql("'0.000'");

                entity.Property(e => e.NFertMatSiebdruckVk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatSperrholzBeipackFinalEk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatSperrholzBeipackFinalVk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatSperrholzEk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatSperrholzFinalEk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatSperrholzFinalVk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatSperrholzVerschnitt).HasDefaultValueSql("'0.000'");

                entity.Property(e => e.NFertMatSperrholzVk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertPersBauEk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertPersBauVk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertPersCalcType)
                    .HasDefaultValueSql("'1'")
                    .HasComment("1=m³, 2=zeitangabe");

                entity.Property(e => e.NFertPersMinBau).HasDefaultValueSql("'0'");

                entity.Property(e => e.NFertPersMinZuschnitt).HasDefaultValueSql("'0'");

                entity.Property(e => e.NFertPersPlatteEk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertPersPlatteVk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertPersSchnitt3Ek).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertPersSchnitt3Vk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertPersStdEkKosten).HasDefaultValueSql("'0.000'");

                entity.Property(e => e.NFertPersStdProPlatteM3).HasDefaultValueSql("'0.000'");

                entity.Property(e => e.NFertPersStdProSchnittM3).HasDefaultValueSql("'0.000'");

                entity.Property(e => e.NFertPersZuschnittEk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertPersZuschnittVk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertQbmUser).HasDefaultValueSql("'0.00'");

                entity.Property(e => e.NFertQmAfUser).HasDefaultValueSql("'0.00'");

                entity.Property(e => e.NFertQmBodenUser).HasDefaultValueSql("'0.00'");

                entity.Property(e => e.NFertSonstigesPreis).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NGesamtpreisEk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NGesamtpreisVk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NGesamtpreisVkZuschlag).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NGewinnzuschlagBetrag).HasDefaultValueSql("'0.000'");

                entity.Property(e => e.NGewinnzuschlagProz).HasDefaultValueSql("'0.000'");

                entity.Property(e => e.NMethodFertId)
                    .HasDefaultValueSql("'0'")
                    .HasComment("t_schnell_kalk_initval_fertigung.n_id die ausgewählte Berechnungsmethode der Fertigung");

                entity.Property(e => e.NMethodVerpId)
                    .HasDefaultValueSql("'0'")
                    .HasComment("t_schnell_kalk_initval_verpackung.n_id die ausgewählte Berechnungsmethode der Verpackung");

                entity.Property(e => e.NVerpAllgKostenEk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NVerpAllgKostenVk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NVerpGesamtpreisEk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NVerpGesamtpreisVk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NVerpMatAlFolieEk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NVerpMatAlFolieVerschnitt).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NVerpMatAlFolieVk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NVerpMatPeFolieEk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NVerpMatPeFolieVerschnitt).HasDefaultValueSql("'0.000'");

                entity.Property(e => e.NVerpMatPeFolieVk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NVerpMatSchrumpfhEk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NVerpMatSchrumpfhVerschhnitt).HasDefaultValueSql("'0.000'");

                entity.Property(e => e.NVerpMatSchrumpfhVk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NVerpMatTrockenbeutelEk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NVerpMatTrockenbeutelVk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NVerpMatVciAlFolieEk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NVerpMatVciAlFolieVerschnitt).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NVerpMatVciAlFolieVk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NVerpMatVciPeFolieEk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NVerpMatVciPeFolieVerschnitt).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NVerpMatVciPeFolieVk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NVerpMatVciProduktEk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NVerpMatVciProduktVk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NVerpPersCalcType)
                    .HasDefaultValueSql("'1'")
                    .HasComment("1=m², 2=zeitangabe");

                entity.Property(e => e.NVerpPersMin).HasDefaultValueSql("'0.000'");

                entity.Property(e => e.NVerpPersStdEkKosten).HasDefaultValueSql("'0.000'");

                entity.Property(e => e.NVerpPersStdFahrzeit).HasDefaultValueSql("'0.00'");

                entity.Property(e => e.NVerpPersStdProAflM2).HasDefaultValueSql("'0.000'");

                entity.Property(e => e.NVerpQmAfUser).HasDefaultValueSql("'0.00'");

                entity.Property(e => e.NVerpQmBodenUser).HasDefaultValueSql("'0.00'");

                entity.Property(e => e.NVerpSonstigesPreis).HasDefaultValueSql("'0.00000'");
            });

            modelBuilder.Entity<TSchnellKalkInitvalFertigung>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Schnellkalkulation - Konfigurierte Berechnungsmethoden für die Fertigung");

                entity.Property(e => e.NFertMatAkyluxEk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatAkyluxVerschnitt).HasDefaultValueSql("'0.000'");

                entity.Property(e => e.NFertMatAkyluxVk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatBeschlaegeEk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatBeschlaegeVk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatDeckelhEk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatDeckelhVerschhnitt).HasDefaultValueSql("'0.000'");

                entity.Property(e => e.NFertMatDeckelhVk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatEckverbinderEk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatEckverbinderVk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatKvhEk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatKvhVerschhnitt).HasDefaultValueSql("'0.000'");

                entity.Property(e => e.NFertMatKvhVk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatOelpapierEk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatOelpapierVerschhnitt).HasDefaultValueSql("'0.000'");

                entity.Property(e => e.NFertMatOelpapierVk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatOsbEk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatOsbVerschnitt).HasDefaultValueSql("'0.000'");

                entity.Property(e => e.NFertMatOsbVk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatPeauskleidenEk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatPeauskleidenVerschhnitt).HasDefaultValueSql("'0.000'");

                entity.Property(e => e.NFertMatPeauskleidenVk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatPreisKleinteileVk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatProzKleinteileVk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatSchlossEk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatSchlossVk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatSchnittBeipackEk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatSchnittBeipackVerschhnitt).HasDefaultValueSql("'0.000'");

                entity.Property(e => e.NFertMatSchnittBeipackVk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatSchnittEk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatSchnittKonstrEk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatSchnittKonstrVerschhnitt).HasDefaultValueSql("'0.000'");

                entity.Property(e => e.NFertMatSchnittKonstrVk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatSchnittVerschnitt).HasDefaultValueSql("'0.000'");

                entity.Property(e => e.NFertMatSchnittVk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatSchwingdaempfEk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatSchwingdaempfVk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatSiebdruckEk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatSiebdruckVerschnitt).HasDefaultValueSql("'0.000'");

                entity.Property(e => e.NFertMatSiebdruckVk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatSperrholzEk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertMatSperrholzVerschnitt).HasDefaultValueSql("'0.000'");

                entity.Property(e => e.NFertMatSperrholzVk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NFertPersStdEkKosten).HasDefaultValueSql("'0.000'");

                entity.Property(e => e.NFertPersStdProPlatteM3).HasDefaultValueSql("'0.000'");

                entity.Property(e => e.NFertPersStdProSchnittM3).HasDefaultValueSql("'0.000'");

                entity.Property(e => e.NIsStandard).HasDefaultValueSql("'0'");
            });

            modelBuilder.Entity<TSchnellKalkInitvalVerpackung>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Schnellkalkulation - Konfigurierte Berechnungsmethoden für die Verpackung");

                entity.Property(e => e.NIsStandard).HasDefaultValueSql("'0'");

                entity.Property(e => e.NVerpMatAlFolieEk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NVerpMatAlFolieVerschnitt).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NVerpMatAlFolieVk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NVerpMatPeFolieEk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NVerpMatPeFolieVerschnitt).HasDefaultValueSql("'0.000'");

                entity.Property(e => e.NVerpMatPeFolieVk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NVerpMatSchrumpfhEk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NVerpMatSchrumpfhVerschhnitt).HasDefaultValueSql("'0.000'");

                entity.Property(e => e.NVerpMatSchrumpfhVk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NVerpMatTrockenbeutelEk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NVerpMatTrockenbeutelVk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NVerpMatVciAlFolieEk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NVerpMatVciAlFolieVerschnitt).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NVerpMatVciAlFolieVk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NVerpMatVciPeFolieEk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NVerpMatVciPeFolieVerschnitt).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NVerpMatVciPeFolieVk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NVerpMatVciProduktEk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NVerpMatVciProduktVk).HasDefaultValueSql("'0.00000'");

                entity.Property(e => e.NVerpPersStdEkKosten).HasDefaultValueSql("'0.000'");

                entity.Property(e => e.NVerpPersStdProAflM2).HasDefaultValueSql("'0.000'");
            });

            modelBuilder.Entity<TSolasDok>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("SOLAS Dokument für den Containerstau");

                entity.Property(e => e.NAuftragId).HasComment("t_auftrag.n_id");

                entity.Property(e => e.NContGewichtAbgelesen).HasDefaultValueSql("'1'");

                entity.Property(e => e.NKostenstelleId).HasComment("t_kostenstelle");

                entity.Property(e => e.NLieferscheinId).HasComment("n_lieferschein.n_id Referenz zum Lieferschein aus dem die Daten geladen wurden.");
            });

            modelBuilder.Entity<TSonderzeichen>(entity =>
            {
                entity.HasKey(e => new { e.CName, e.NVerptyp, e.NSonderzId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                entity.HasComment("Templates von Sonderzeichen die zu einem Verpackungstypen oder ggf. Kunden konfiguriert werden könne.");

                entity.Property(e => e.NStandard).HasDefaultValueSql("'0'");
            });

            modelBuilder.Entity<TStatikBelastungstyp>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Statische Belastungstypen mit entsprechenden Kennwerten");

                entity.Property(e => e.NAuflagedruckK90).HasComment("Querdruckbeiwert bei Auflagendruck für Nadelholz");

                entity.Property(e => e.NGammaF).HasComment("Teilsicherheitsbeiwert Gamma F");

                entity.Property(e => e.NGammaM).HasComment("Teilsicherheitsbeiwert Gamma M");

                entity.Property(e => e.NGammaQ).HasComment("Teilsicherheitsbeiwert Gamma Q");

                entity.Property(e => e.NKMod).HasComment("Modifikationsbeiwert");

                entity.Property(e => e.NSchwellendruckK90).HasComment("Querdruckbeiwert bei Schwellendruck für Nadelholz");

                entity.Property(e => e.NWegId).HasComment("kat_grp=130");
            });

            modelBuilder.Entity<TStatikCalc>(entity =>
            {
                entity.HasKey(e => e.CId)
                    .HasName("PRIMARY");

                entity.HasComment("Berechnete statische Werte einer Verpackung");

                entity.Property(e => e.NBiegungKennwert).HasComment("Tabelle 4");

                entity.Property(e => e.NWegAuflagedruckK90).HasComment("Querdruckbeiwert bei Auflagendruck für Nadelholz");

                entity.Property(e => e.NWegGammaF).HasComment("Teilsicherheitsbeiwert Gamma F");

                entity.Property(e => e.NWegGammaM).HasComment("Teilsicherheitsbeiwert Gamma M");

                entity.Property(e => e.NWegGammaQ).HasComment("Teilsicherheitsbeiwert Gamma Q");

                entity.Property(e => e.NWegKMod).HasComment("Modifikationsbeiwert");

                entity.Property(e => e.NWegSchwellendruckK90).HasComment("Querdruckbeiwert bei Schwellendruck für Nadelholz");
            });

            modelBuilder.Entity<TStatikMaterial>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Materiel wie z.B. U-Stahl und die benötigten statischen Werte");

                entity.Property(e => e.NA)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Flaeche");

                entity.Property(e => e.NBiegungDin1052).HasComment("Biegung nach DIN1052");

                entity.Property(e => e.NBiegungKennwert).HasComment("Tabelle 4");

                entity.Property(e => e.NBreite).HasDefaultValueSql("'0'");

                entity.Property(e => e.NElastizitaetsmodul).HasDefaultValueSql("'0.00'");

                entity.Property(e => e.NEy).HasDefaultValueSql("'0'");

                entity.Property(e => e.NGewichtProMeter).HasDefaultValueSql("'0'");

                entity.Property(e => e.NHoehe).HasDefaultValueSql("'0'");

                entity.Property(e => e.NIy).HasDefaultValueSql("'0'");

                entity.Property(e => e.NStaerke).HasDefaultValueSql("'0'");

                entity.Property(e => e.NSteelTypeId)
                    .HasDefaultValueSql("'1'")
                    .HasComment("1=T, 2=U");

                entity.Property(e => e.NTypeId)
                    .HasDefaultValueSql("'1'")
                    .HasComment("1=wood, 2=steel");

                entity.Property(e => e.NWy).HasDefaultValueSql("'0'");
            });

            modelBuilder.Entity<TSteuerparagraphen>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Steuerparagraphen die bei der Rechnung ausgewählt werden könnnen");

                entity.Property(e => e.NGegenkonto).HasComment("0=Nicht gesetzt sonst, wird bei Auswahl in der Rechnung das Gegenkonto gesetzt");
            });

            modelBuilder.Entity<TStuetzflaechen>(entity =>
            {
                entity.HasKey(e => new { e.StId, e.StVerpId, e.StVerpTyp })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                entity.HasComment("Erfassten Stützflächen einer Verpackung zu statischen Berechnung. Alte statische Berechnung.");

                entity.Property(e => e.StId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<TTankstelleBefuellung>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.Property(e => e.DCreated).HasDefaultValueSql("'0000-00-00 00:00:00'");
            });

            modelBuilder.Entity<TTankstelleStand>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.Property(e => e.NId).ValueGeneratedNever();
            });

            modelBuilder.Entity<TTextTemplate>(entity =>
            {
                entity.HasKey(e => new { e.NTypId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Text-Template für die Bemerkungen der Verpackung");

                entity.Property(e => e.NTypId).HasComment("1=Kopf, 2=Seite, 3=Deckel, 5=Boden, 6=Kantholzlage, 7=Bodenlage, 8=Zwischenlage, 9=Decklage");

                entity.Property(e => e.NId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<TTextTemplateCommon>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Allgemeine Textbausteine die in den Bemerkunsfeldern genutzt werden können");

                entity.Property(e => e.NPublic).HasDefaultValueSql("'1'");
            });

            modelBuilder.Entity<TTranslation>(entity =>
            {
                entity.HasKey(e => new { e.CLang, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Speichert die Uebersetzungen");

                entity.Property(e => e.NId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<TTransportAuftrag>(entity =>
            {
                entity.HasKey(e => new { e.NAuftragId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Transportaufträge");

                entity.Property(e => e.NId).ValueGeneratedOnAdd();

                entity.Property(e => e.DEmpfTermin).HasDefaultValueSql("'0000-00-00 00:00:00'");

                entity.Property(e => e.DLadeTermin).HasDefaultValueSql("'0000-00-00 00:00:00'");

                entity.Property(e => e.DTransfered).HasComment("Transfered to external application");

                entity.Property(e => e.NAktiv).HasDefaultValueSql("'1'");

                entity.Property(e => e.NAnzahlFreigabe).HasDefaultValueSql("'0'");

                entity.Property(e => e.NAnzahlRechnung).HasDefaultValueSql("'0'");

                entity.Property(e => e.NEinzelpreisEk).HasDefaultValueSql("'0.00'");

                entity.Property(e => e.NKostenstelleId).HasComment("t_kostenstelle");

                entity.Property(e => e.NTransArt)
                    .HasDefaultValueSql("'1'")
                    .HasComment("1-Lieferung, 1-Abholung");

                entity.Property(e => e.NTransferedUserId).HasComment("user who start the transfer");

                entity.Property(e => e.NTransportWegId)
                    .HasDefaultValueSql("'1'")
                    .HasComment("kat_grp = 140");

                entity.Property(e => e.NWaehrungId)
                    .HasDefaultValueSql("'1'")
                    .HasComment("kat_grp=25");
            });

            modelBuilder.Entity<TTransportAuftragPosten>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Posten zum Transportauftrag");

                entity.Property(e => e.DCreated)
                    .ValueGeneratedOnAddOrUpdate()
                    .HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.NEinzelgewicht).HasComment("0=Gesamtgewicht; 1=Einzelgewicht");
            });

            modelBuilder.Entity<TUmlagerungPackstueckAppInterface>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("App schreibt Packstuecke mit neuem Lagerort");

                entity.Property(e => e.NLagerId).HasComment("t_lager.n_id");

                entity.Property(e => e.NLagerortId).HasComment("t_wareneingangpackstueck.n_id");
            });

            modelBuilder.Entity<TUser>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Cratemaker Benutzer");

                entity.Property(e => e.NLaenge).HasDefaultValueSql("'0'");
            });

            modelBuilder.Entity<TUserAccountRightsAdjust>(entity =>
            {
                entity.HasKey(e => new { e.NUserId, e.NRightId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Speichert die individuellen Rechte-Anpassungen vom Benutzer");

                entity.Property(e => e.NAdjustement).HasComment("1=hat Recht -1=hat kein Recht");
            });

            modelBuilder.Entity<TUserAccountRole>(entity =>
            {
                entity.HasKey(e => new { e.NUserId, e.NRoleId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Speichert die Rollen eines Benutzers.");
            });

            modelBuilder.Entity<TUserCheckin>(entity =>
            {
                entity.HasKey(e => new { e.NFirmaId, e.NUserId, e.DCheckinTime })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                entity.HasComment("Protkolldatei über Ein-und Ausloggen über die Anwendung von Cratemaker Worker");

                entity.Property(e => e.NDeptId).HasComment("t_abteilung");
            });

            modelBuilder.Entity<TUserGridColor>(entity =>
            {
                entity.HasKey(e => new { e.CType, e.NUserId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                entity.HasComment("Benutzerdefinierte Farben um ini der Auftrgasverwaltung den Status farblich darzustellen");
            });

            modelBuilder.Entity<TUserLayout>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Stores the layout the user defined");
            });

            modelBuilder.Entity<TUserPause>(entity =>
            {
                entity.HasKey(e => new { e.NFirmaId, e.NUserId, e.DPauseStart })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                entity.HasComment("Protkoll über Pause Start und Ende des Benutzers bei Cratemaler Worker");
            });

            modelBuilder.Entity<TUserProperty>(entity =>
            {
                entity.HasKey(e => new { e.NFirmaId, e.NUserId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Abteilung wo sich der Benutzer von Cratemaker Worker zuletzt eingeloogt war");
            });

            modelBuilder.Entity<TUserRight>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Enthaelt alle in der Anwendung verfuegbaren Rechte.");
            });

            modelBuilder.Entity<TUserRole>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Enthaelt alle in der Anwendung verfuegbaren Rollen");
            });

            modelBuilder.Entity<TUserRoleRight>(entity =>
            {
                entity.HasKey(e => new { e.NRoleId, e.NRightId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Speichert, welche Rechte eine Rolle besitzt");
            });

            modelBuilder.Entity<TVciFolie>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("VCI Fole des Herstellers");

                entity.Property(e => e.NId).ValueGeneratedNever();
            });

            modelBuilder.Entity<TVciHersteller>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("VCI Hersteller");

                entity.Property(e => e.NId).ValueGeneratedNever();
            });

            modelBuilder.Entity<TVciProdukt>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("VCI Produkte des Herstellers");

                entity.Property(e => e.NId).ValueGeneratedNever();
            });

            modelBuilder.Entity<TVerpAssistent>(entity =>
            {
                entity.HasKey(e => new { e.NTypId, e.NNettoGewicht })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Verpackungsassistens der in Abhängigkeit des Nettogewichts bestimmte Werte vorbesetzt");

                entity.Property(e => e.NAkylux).HasDefaultValueSql("'0'");

                entity.Property(e => e.NKstrBbretterUnterBh)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Bodenbretter bis unter Bh");

                entity.Property(e => e.NKstrBbretterUnterK).HasDefaultValueSql("'0'");

                entity.Property(e => e.NKstrBbretterUnterKl)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Bodenbretter bis unter KL");

                entity.Property(e => e.NKstrIbreiteWandZuWand)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Innenbreite zwischen Wand zu Wand");

                entity.Property(e => e.NKstrKSZfuge).HasDefaultValueSql("'0'");

                entity.Property(e => e.NKstrQklaengeAussenbreite).HasDefaultValueSql("'0'");

                entity.Property(e => e.NLkHochkant).HasDefaultValueSql("'0'");

                entity.Property(e => e.NZn).HasDefaultValueSql("'0'");
            });

            modelBuilder.Entity<TVerpKonstruktion>(entity =>
            {
                entity.HasKey(e => new { e.NVerpId, e.NVerpTypId, e.NVerpSubId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

                entity.HasComment("Kantholzkonstruktion für die Einpauten der Verpackung");

                entity.Property(e => e.NId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<Verpackung>(entity =>
            {
                entity.HasKey(e => e.VeprId)
                    .HasName("PRIMARY");

                entity.HasComment("Speichert alle Kisten und Verschläge mit allen Ausprägung");

                entity.Property(e => e.CSDistanzBretter)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Distanzbretter an den Seiten");

                entity.Property(e => e.CSchraubeLkqk)
                    .HasDefaultValueSql("''")
                    .HasComment("Schlossschrauben fuer Lk-QK Verbindung");

                entity.Property(e => e.NBodenramhenFl).HasDefaultValueSql("'0'");

                entity.Property(e => e.NBodenramhenHk).HasDefaultValueSql("'0'");

                entity.Property(e => e.NBodenramhenInnenLiegend).HasDefaultValueSql("'0'");

                entity.Property(e => e.NBreiteBausatz)
                    .HasDefaultValueSql("'0'")
                    .HasComment("breite nicht zusammengebaut");

                entity.Property(e => e.NColloBreite).HasDefaultValueSql("'0'");

                entity.Property(e => e.NColloDlAnz).HasDefaultValueSql("'0'");

                entity.Property(e => e.NColloDlkAnz).HasDefaultValueSql("'0'");

                entity.Property(e => e.NColloFlAnz).HasDefaultValueSql("'0'");

                entity.Property(e => e.NColloHoehe).HasDefaultValueSql("'0'");

                entity.Property(e => e.NColloKlAnz).HasDefaultValueSql("'0'");

                entity.Property(e => e.NColloLaenge).HasDefaultValueSql("'0'");

                entity.Property(e => e.NColloSlAnz).HasDefaultValueSql("'0'");

                entity.Property(e => e.NColloTara).HasDefaultValueSql("'0'");

                entity.Property(e => e.NColloZlAnz).HasDefaultValueSql("'0'");

                entity.Property(e => e.NDeckelHaube).HasDefaultValueSql("'0'");

                entity.Property(e => e.NHoeheBausatz)
                    .HasDefaultValueSql("'0'")
                    .HasComment("hoehe nicht zusammengebaut");

                entity.Property(e => e.NKostenstelleId).HasComment("t_kostenstelle");

                entity.Property(e => e.NKstrBbretterUnterBh)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Bodenbretter bis unter Bh");

                entity.Property(e => e.NKstrBbretterUnterK)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Bodenbretter unter Kopf");

                entity.Property(e => e.NKstrBbretterUnterKl)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Bodenbretter bis unter KL");

                entity.Property(e => e.NKstrDeckelDlUeberSl)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Dl auf ueber SL anbringen, sonst zwischen");

                entity.Property(e => e.NKstrDeckelZwischenK)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Deckel zwischen den Koepfen");

                entity.Property(e => e.NKstrDeckelZwischenS)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Deckel zwischen den Seiten");

                entity.Property(e => e.NKstrDeckelklOhne)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Deckel ohne Deckelkopfleisten");

                entity.Property(e => e.NKstrDeckellAussen)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Deckelleisten quer laufen lassen");

                entity.Property(e => e.NKstrDeckellQuer)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Deckelleisten quer laufen lassen");

                entity.Property(e => e.NKstrDeckelslanzWieLkanz)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Anzahl Deckelseitenleiste wie LK Anzahl");

                entity.Property(e => e.NKstrDklUeberQk)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Deckelkopfleisten wie QK einruecken");

                entity.Property(e => e.NKstrFlUeberQk)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Fl wie QK einruecken");

                entity.Property(e => e.NKstrIbreiteWandZuWand)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Innenbreite zwischen Wand zu Wand");

                entity.Property(e => e.NKstrIsSteckkiste)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Kistentyp-Steckkiste für VTT Verbinder");

                entity.Property(e => e.NKstrKQk0KopfAufBoden)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Wenn Qk einruecken 0 Kopf bis auf Boden");

                entity.Property(e => e.NKstrKSZfuge)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Kopfleisten immer senkrecht. Kopf wird nicht gedreht");

                entity.Property(e => e.NKstrKZwischenS)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Kopf zwischen den Seiten");

                entity.Property(e => e.NKstrKlAufZwischenl)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Kopfleisten auf Zwischenlage bei 4-Wegeboden");

                entity.Property(e => e.NKstrKlBisBodenBeiQk0)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Kopfleisten bis Boden bei Qk-Einrueck=0");

                entity.Property(e => e.NKstrKlBisQkWennQkeinrueckNull)
                    .HasDefaultValueSql("'0'")
                    .HasComment("KL bis unten zu QK wenn diese buendig");

                entity.Property(e => e.NKstrKlEinrueckBh)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Kopfleisten um BhHoehe einruecken");

                entity.Property(e => e.NKstrKlObenBuendig)
                    .HasDefaultValueSql("'0'")
                    .HasComment("KL oben buendig");

                entity.Property(e => e.NKstrKlObenUeberstehen)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Kopfleisten stehen oben ueber");

                entity.Property(e => e.NKstrKlSenkrecht)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Kopfleisten immer senkrecht. Kopf wird nicht gedreht");

                entity.Property(e => e.NKstrKlUmSUndSlEinrueck)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Kopfleisten um Seite und SeitenL einruecken");

                entity.Property(e => e.NKstrKlUntenUeberstehen)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Kopfleisten stehen unten ueber");

                entity.Property(e => e.NKstrLiLaseiten)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Seitenleisten aussen");

                entity.Property(e => e.NKstrOhneFl)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Seite ohne Futterleisten");

                entity.Property(e => e.NKstrQkUeberLk)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Seiten stehen auf QK");

                entity.Property(e => e.NKstrQkUmSlKuerzen)
                    .HasDefaultValueSql("'0'")
                    .HasComment("QK immer um SL kuerzen");

                entity.Property(e => e.NKstrQklaengeAussenbreite)
                    .HasDefaultValueSql("'0'")
                    .HasComment("QkLaenge gleich Aussenbreite");

                entity.Property(e => e.NKstrSBisAufBoden)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Seite bis auf den Boden");

                entity.Property(e => e.NKstrSeiteAufQk)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Seiten stehen auf QK");

                entity.Property(e => e.NKstrSeiteRuecksprung)
                    .HasDefaultValueSql("'15'")
                    .HasComment("Seitenruecksprung bei LK");

                entity.Property(e => e.NKstrSeiteSlInnen)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Seitenleisten innen");

                entity.Property(e => e.NKstrSeiteSlNebenQk)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Seitenleisten innen");

                entity.Property(e => e.NKstrSeiteSlWaagAussen)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Deckel ohne Deckelkopfleisten");

                entity.Property(e => e.NKstrSeiteSlWaagInnen)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Seitenleisten waag. innen");

                entity.Property(e => e.NKstrSl2Waag)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Nur 2 waag. laufende Seitenleisten");

                entity.Property(e => e.NKstrZlOhneOben)
                    .HasDefaultValueSql("'15'")
                    .HasComment("Obere ZL nicht nutzen");

                entity.Property(e => e.NKstrhDeckelDh)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Deckelholz nutzen");

                entity.Property(e => e.NKstrhDeckelLBreite)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Deckelleistenstaerke");

                entity.Property(e => e.NKstrhDeckelLStaerke)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Deckelleistenstaerke");

                entity.Property(e => e.NKstrhFlRaster)
                    .HasDefaultValueSql("'0'")
                    .HasComment("FL Raster");

                entity.Property(e => e.NKstrhKopfLBreite)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Kopfleistenstaerke");

                entity.Property(e => e.NKstrhKopfLStaerke)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Kopfleistenstaerke");

                entity.Property(e => e.NKstrhSeiteLBreite)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Seitenleistenstaerke");

                entity.Property(e => e.NKstrhSeiteLStaerke)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Seitenleistenstaerke");

                entity.Property(e => e.NKstrhZlRaster)
                    .HasDefaultValueSql("'0'")
                    .HasComment("ZL Raster");

                entity.Property(e => e.NKuerzelId).HasComment("kat_grp = 150");

                entity.Property(e => e.NKurzfristigkeitszuschlagPreis).HasDefaultValueSql("'0.0000'");

                entity.Property(e => e.NLaengeBausatz)
                    .HasDefaultValueSql("'0'")
                    .HasComment("laenge nicht zusammengebaut");

                entity.Property(e => e.NLkqkRingmutter)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Ringmutter für LK-QK");

                entity.Property(e => e.NMaschinenMass)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Daten im Maschinenmass eingegeben");

                entity.Property(e => e.NPeUnterDeckel)
                    .HasDefaultValueSql("'0'")
                    .HasComment("PE-Folie unter den Deckel");

                entity.Property(e => e.NPlattenwerkstoffId)
                    .HasDefaultValueSql("'0'")
                    .HasComment("t_plattenwerkstoffe");

                entity.Property(e => e.NQkAusfuettern)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Distanzbretter an den Seiten");

                entity.Property(e => e.NQkLaenge)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Benutzer Qk Laenge");

                entity.Property(e => e.NQkNut)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Querkufen mit Nut");

                entity.Property(e => e.NRabatt).HasDefaultValueSql("'0'");

                entity.Property(e => e.NSchraubeMmLkqk)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Schlossschraubenlaenge fuer Lk-QK Verbindung");

                entity.Property(e => e.NSchraubeMmLkqkAussenQk)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Lk-QK Schrauben nur in auessere QK");

                entity.Property(e => e.NSchrumpfenKomplett).HasDefaultValueSql("'0'");

                entity.Property(e => e.NSeitenSchutzleisten)
                    .HasDefaultValueSql("'0'")
                    .HasComment("IVH- waag. Kiste");

                entity.Property(e => e.NSlSenkKopfA)
                    .HasDefaultValueSql("'0'")
                    .HasComment("senk. laufende sl an Kopf A");

                entity.Property(e => e.NSlSenkKopfB)
                    .HasDefaultValueSql("'0'")
                    .HasComment("senk. laufende sl an Kopf A");

                entity.Property(e => e.NStatikStahlId)
                    .HasDefaultValueSql("'0'")
                    .HasComment("t_statik_material.n_id");

                entity.Property(e => e.NTaraEinbauten)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Bruttogewicht Einbauten");

                entity.Property(e => e.NWaehrungId).HasDefaultValueSql("'0'");

                entity.Property(e => e.Verp4wegeBlAnzahl).HasDefaultValueSql("'0'");

                entity.Property(e => e.Verp4wegeBlBreite).HasDefaultValueSql("'0'");

                entity.Property(e => e.Verp4wegeBlGedreht).HasDefaultValueSql("'0'");

                entity.Property(e => e.Verp4wegeBlHoehe).HasDefaultValueSql("'0'");

                entity.Property(e => e.Verp4wegeBlLaenge).HasDefaultValueSql("'0'");

                entity.Property(e => e.Verp4wegeChecked).HasDefaultValueSql("'0'");

                entity.Property(e => e.Verp4wegeDlAufgelegt).HasDefaultValueSql("'0'");

                entity.Property(e => e.Verp4wegeDlBreite).HasDefaultValueSql("'0'");

                entity.Property(e => e.Verp4wegeDlHoehe).HasDefaultValueSql("'0'");

                entity.Property(e => e.Verp4wegeDlLaenge).HasDefaultValueSql("'0'");

                entity.Property(e => e.Verp4wegeKlotzAnzahl).HasDefaultValueSql("'0'");

                entity.Property(e => e.Verp4wegeKlotzBreite).HasDefaultValueSql("'0'");

                entity.Property(e => e.Verp4wegeKlotzHoehe).HasDefaultValueSql("'0'");

                entity.Property(e => e.Verp4wegeKlotzLaenge).HasDefaultValueSql("'0'");

                entity.Property(e => e.Verp4wegeZlAnzahl).HasDefaultValueSql("'0'");

                entity.Property(e => e.Verp4wegeZlBreite).HasDefaultValueSql("'0'");

                entity.Property(e => e.Verp4wegeZlHoehe).HasDefaultValueSql("'0'");

                entity.Property(e => e.Verp4wegeZlLaenge).HasDefaultValueSql("'0'");

                entity.Property(e => e.VerpAktiv).HasDefaultValueSql("'1'");

                entity.Property(e => e.VerpAnzahlGeliefert).HasDefaultValueSql("'0'");

                entity.Property(e => e.VerpAnzahlTransportiert).HasDefaultValueSql("'0'");

                entity.Property(e => e.VerpBbAlle).HasComment("Waag. Sparverschlag Brettbreite");

                entity.Property(e => e.VerpBbAlleCb).HasComment("Waag. Sparverschlag Brettbreite");

                entity.Property(e => e.VerpBbB).HasComment("Waag. Sparverschlag Brettbreite");

                entity.Property(e => e.VerpBbD).HasComment("Waag. Sparverschlag Brettbreite");

                entity.Property(e => e.VerpBbK).HasComment("Waag. Sparverschlag Brettbreite");

                entity.Property(e => e.VerpBbS).HasComment("Waag. Sparverschlag Brettbreite");

                entity.Property(e => e.VerpBbretterSeitlichEinrueck).HasDefaultValueSql("'0'");

                entity.Property(e => e.VerpBelAlle).HasComment("Verschlag Belegung in Prozent");

                entity.Property(e => e.VerpBelAlleGleich).HasComment("Verschlag alle gleich");

                entity.Property(e => e.VerpBelBoden).HasComment("Verschlag Belegung Boden");

                entity.Property(e => e.VerpBelDeckel).HasComment("Verschlag Belegung Deckel");

                entity.Property(e => e.VerpBelKoepfe).HasComment("Verschlag Belegund Koepfe");

                entity.Property(e => e.VerpBelLueckeKarton).HasDefaultValueSql("'0'");

                entity.Property(e => e.VerpBelSeiten).HasComment("Verschlag Belegung Seiten");

                entity.Property(e => e.VerpBelUngleich).HasComment("Verschlag ungleich");

                entity.Property(e => e.VerpBhRingmutter)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Ringmutter für BH");

                entity.Property(e => e.VerpBrettanzahlCb).HasComment("Waag. Sparverschlag Brettanzahl");

                entity.Property(e => e.VerpCbSlIstAussenhoehe)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Waag verb. Kleinkiste");

                entity.Property(e => e.VerpCreated).HasDefaultValueSql("'0000-00-00 00:00:00'");

                entity.Property(e => e.VerpDoppelwandig).HasComment("Kleinkiste");

                entity.Property(e => e.VerpEinmalzuschlagPreis).HasDefaultValueSql("'0.0000'");

                entity.Property(e => e.VerpEinwandig).HasComment("Kleinkiste");

                entity.Property(e => e.VerpFemdbodenLaenge).HasComment("Stuelpkiste");

                entity.Property(e => e.VerpFremdboden).HasComment("Stuelpkiste");

                entity.Property(e => e.VerpFremdbodenBreite).HasComment("Stuelpkiste");

                entity.Property(e => e.VerpFremdbodenGewicht).HasComment("Stuelpkiste");

                entity.Property(e => e.VerpFremdbodenHoehe).HasComment("Stuelpkiste");

                entity.Property(e => e.VerpFremdbodenStuelpmass).HasComment("Stuelpkiste");

                entity.Property(e => e.VerpKlUntenUeberstehen).HasDefaultValueSql("'0'");

                entity.Property(e => e.VerpKonservierung).HasComment("1=Trockenmittel, 2=VCI Methode");

                entity.Property(e => e.VerpLa).HasComment("Leisten Aussen (Leichtkiste)");

                entity.Property(e => e.VerpLbPalettenmass).HasComment("Stuelpkiste");

                entity.Property(e => e.VerpLi).HasComment("Leisten Innen (Leichtkiste)");

                entity.Property(e => e.VerpLieferantId).HasComment("Wenn Verpackung von anderer Firma gerfertigt wird");

                entity.Property(e => e.VerpLkAusfuettern).HasDefaultValueSql("'0'");

                entity.Property(e => e.VerpLkQkVerschrauben).HasDefaultValueSql("'0'");

                entity.Property(e => e.VerpLueckenbAlle).HasComment("Waag. Sparverschlag Anzahl/Lueckenb");

                entity.Property(e => e.VerpLueckenbAlleCb).HasComment("Waag. Sparverschlag Anzahl/Lueckenb");

                entity.Property(e => e.VerpLueckenbB).HasComment("Waag. Sparverschlag Anzahl/Lueckenb");

                entity.Property(e => e.VerpLueckenbD).HasComment("Waag. Sparverschlag Anzahl/Lueckenb");

                entity.Property(e => e.VerpLueckenbK).HasComment("Waag. Sparverschlag Anzahl/Lueckenb");

                entity.Property(e => e.VerpLueckenbS).HasComment("Waag. Sparverschlag Anzahl/Lueckenb");

                entity.Property(e => e.VerpMaxLueckenbCb).HasComment("Waag. Sparverschlag max Lueckenbreite");

                entity.Property(e => e.VerpMitOelpapier).HasDefaultValueSql("'0'");

                entity.Property(e => e.VerpNettoGewicht).HasDefaultValueSql("'0'");

                entity.Property(e => e.VerpNr).HasComment("ist NULL wenn template");

                entity.Property(e => e.VerpOhneBodenFertigen).HasDefaultValueSql("'0'");

                entity.Property(e => e.VerpOhneDeckelFertigen).HasDefaultValueSql("'0'");

                entity.Property(e => e.VerpOhneEigenenBoden).HasComment("Stuelpkiste");

                entity.Property(e => e.VerpOhneKoepfeFertigen).HasDefaultValueSql("'0'");

                entity.Property(e => e.VerpOhneSeitenFertigen).HasDefaultValueSql("'0'");

                entity.Property(e => e.VerpPlattenM2).HasComment("Quadratmeter aller Plattenwerkstoffe");

                entity.Property(e => e.VerpPlattenM3).HasComment("Qubikmeter aller Plattenwerkstoffe");

                entity.Property(e => e.VerpPrjId).HasDefaultValueSql("'0'");

                entity.Property(e => e.VerpSchnittholzM3).HasComment("Qubikmeter aller Schnitthoelzer");

                entity.Property(e => e.VerpSlBisDl).HasDefaultValueSql("'0'");

                entity.Property(e => e.VerpStDoppelterboden).HasDefaultValueSql("'0'");

                entity.Property(e => e.VerpStDoppelterkopf).HasDefaultValueSql("'0'");

                entity.Property(e => e.VerpStSchnittholzboden).HasDefaultValueSql("'0'");

                entity.Property(e => e.VerpStatikBohrholzUeberlappen).HasDefaultValueSql("'0'");

                entity.Property(e => e.VerpStatikStuetzflUeberlappen).HasDefaultValueSql("'0'");

                entity.Property(e => e.VerpTellerkopfSchraube).HasDefaultValueSql("''");

                entity.Property(e => e.VerpTellerkopfSchraubeLaenge).HasDefaultValueSql("'0'");

                entity.Property(e => e.VerpVbAll).HasDefaultValueSql("'0'");

                entity.Property(e => e.VerpVbAllCb).HasDefaultValueSql("'0'");

                entity.Property(e => e.VerpVbB).HasDefaultValueSql("'0'");

                entity.Property(e => e.VerpVbD).HasDefaultValueSql("'0'");

                entity.Property(e => e.VerpVbK).HasDefaultValueSql("'0'");

                entity.Property(e => e.VerpVbS).HasDefaultValueSql("'0'");
            });

            modelBuilder.Entity<TVerpackung3dMaterial>(entity =>
            {
                entity.HasKey(e => new { e.NVerpId, e.NVerpTypId, e.NVerpSubId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

                entity.HasComment("CAD System - 3D hinzugefügte Objekte");

                entity.Property(e => e.NId).ValueGeneratedOnAdd();

                entity.Property(e => e.NFormId)
                    .HasDefaultValueSql("'1'")
                    .HasComment("kat_grp=91");

                entity.Property(e => e.NHoehe).HasDefaultValueSql("'0'");

                entity.Property(e => e.NLaenge).HasDefaultValueSql("'0'");

                entity.Property(e => e.NOberflaecheId).HasComment("kat_grp=92");
            });

            modelBuilder.Entity<TVerpackungBeiblatt>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Beiblatt zu allen Verpackungen");

                entity.Property(e => e.CNr).HasDefaultValueSql("''");

                entity.Property(e => e.COrt).HasDefaultValueSql("''");

                entity.Property(e => e.NAbnahmeFindetStatt).HasComment("0=vor der Verpackung, 1=nachdem das Material auf dem Boden befestigt und eingeschweißt wurde, 2=Verpackung mit geöffneten Deckel, 3=nach Fertigstellung der Verpackung");

                entity.Property(e => e.NAbnahmeFindetStatt2).HasDefaultValueSql("'0'");

                entity.Property(e => e.NAbnahmegesellschaftId2).HasDefaultValueSql("'0'");

                entity.Property(e => e.NBemFarbeMarkierung).HasDefaultValueSql("'0'");

                entity.Property(e => e.NBemSchrifthoehe).HasDefaultValueSql("'0'");

                entity.Property(e => e.NBodenKonstrDrucken).HasDefaultValueSql("'0'");

                entity.Property(e => e.NDeckelSchrauben).HasDefaultValueSql("'0'");

                entity.Property(e => e.NFolienHaubeBestellen).HasDefaultValueSql("'0'");

                entity.Property(e => e.NKisteSchrauben).HasDefaultValueSql("'0'");

                entity.Property(e => e.NKonservierung)
                    .HasDefaultValueSql("'1'")
                    .HasComment("1=Trockenmittel, 2=VCI Methode");

                entity.Property(e => e.NLeereVerpWiegen).HasDefaultValueSql("'0'");

                entity.Property(e => e.NMarkGesondertMarkierung).HasDefaultValueSql("'0'");

                entity.Property(e => e.NMarkHpeCertifiedLogoVerp)
                    .HasDefaultValueSql("'0'")
                    .HasComment("HPE Logo Certified Verpacker");

                entity.Property(e => e.NMarkLimitedQuantity).HasDefaultValueSql("'0'");

                entity.Property(e => e.NMarkOhneMarkierung).HasDefaultValueSql("'0'");

                entity.Property(e => e.NMarkRegistrierung).HasDefaultValueSql("'0'");

                entity.Property(e => e.NMarkSchockinidikatorTypId).HasDefaultValueSql("'0'");

                entity.Property(e => e.NMarkVci).HasDefaultValueSql("'0'");

                entity.Property(e => e.NMaterialWiegen).HasDefaultValueSql("'0'");

                entity.Property(e => e.NSiegelband).HasDefaultValueSql("'0'");

                entity.Property(e => e.NTrockenmittelEinheiten).HasDefaultValueSql("'0'");

                entity.Property(e => e.NVciFolieId).HasDefaultValueSql("'0'");

                entity.Property(e => e.NVciProduktAnzahl).HasDefaultValueSql("'0'");

                entity.Property(e => e.NVciProduktId).HasDefaultValueSql("'0'");

                entity.Property(e => e.NVerkehrsArt).HasComment("wird nur bei Gefahrgut gesetzt");

                entity.Property(e => e.NVerpAnzahl).HasDefaultValueSql("'1'");

                entity.Property(e => e.NVerpackteVerpWiegen).HasDefaultValueSql("'0'");
            });

            modelBuilder.Entity<TVerpackungBeiblattBeipack>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Beipack Materialien die dem Beiblatt hinzugegeben werden. Sind Artikel mit der Kennzeichnung, dass der Artikel im Beipack zur Auswahl steht. Beieinflussen auch die Kalkulation.");

                entity.Property(e => e.CBezeichnung).HasDefaultValueSql("''");

                entity.Property(e => e.NBeipackId)
                    .HasDefaultValueSql("'-1'")
                    .HasComment("t_artikel.n_id");
            });

            modelBuilder.Entity<TVerpackungBeiblattMatTran>(entity =>
            {
                entity.HasKey(e => new { e.NVerpBeiblattId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Translation for material");
            });

            modelBuilder.Entity<TVerpackungBeiblattSonderz>(entity =>
            {
                entity.HasKey(e => new { e.NVerpBeiblattId, e.NPos })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Auswahl der Sonderzeichen für ein Beiblatt einer Verpackung");
            });

            modelBuilder.Entity<TVerpackungBeiblattStuetz>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Beschreibung der Stützflächen die beim Ausdruck des Beiblatts gedruckt wird.");

                entity.Property(e => e.CNr).HasDefaultValueSql("''");

                entity.Property(e => e.NX).HasDefaultValueSql("'0'");

                entity.Property(e => e.NY).HasDefaultValueSql("'0'");
            });

            modelBuilder.Entity<TVerpackungBeiblattVerpMat>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Das zu verpackende Material einer Verpackung.");

                entity.Property(e => e.CEinheit).HasDefaultValueSql("''");

                entity.Property(e => e.NEinheitId).HasDefaultValueSql("'-1'");

                entity.Property(e => e.NHerstellerId).HasDefaultValueSql("'-1'");

                entity.Property(e => e.NMaterialId).HasDefaultValueSql("'-1'");

                entity.Property(e => e.NMaterialSubId).HasComment("wareneingangId");

                entity.Property(e => e.NMaterialTyp)
                    .HasDefaultValueSql("'-1'")
                    .HasComment("-1=none, 1=Gefahrgut, 2=Wareneingang, 3=Hersteller-Material, 4=Auslagerung-KundenArtikel, 5=Losteilliste");
            });

            modelBuilder.Entity<TVerpackungBerech>(entity =>
            {
                entity.HasKey(e => new { e.NVerpId, e.NVerpTypId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Alle Werte einer Verpackung die errechnet wurden");

                entity.Property(e => e.NBAnzahl)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Bodenkupplungsanzahl");

                entity.Property(e => e.NBBreite).HasComment("Boden Breite");

                entity.Property(e => e.NBBrettAnzahl)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Bodenbrettanzahl");

                entity.Property(e => e.NBBrettAufgelegt)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Aufgelegtmass fuer Boden");

                entity.Property(e => e.NBBrettBreite)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Bodenbrettbreite");

                entity.Property(e => e.NBBrettLaenge)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Bodenbrettlaenge");

                entity.Property(e => e.NBKplAnzahl)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Bodenkupplungsanzahl");

                entity.Property(e => e.NBKplBreite)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Bodenkupplungsanzahl");

                entity.Property(e => e.NBKplHoehe)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Bodenkupplungsanzahl");

                entity.Property(e => e.NBKplLaenge)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Bodenkupplungsanzahl");

                entity.Property(e => e.NBLaenge).HasComment("Boden Laenge");

                entity.Property(e => e.NBodenHoehe)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Effektive Hoehe des Boden bis Bodebelag");

                entity.Property(e => e.NDBrettAnzahl)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Bodenbrettanzahl");

                entity.Property(e => e.NDBrettAufgelegt)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Aufgelegtmass fuer Deckel");

                entity.Property(e => e.NDBrettBreite)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Kopfbrettbreite");

                entity.Property(e => e.NDBrettLaenge)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Kopfbrettlaenge");

                entity.Property(e => e.NDDichtkpl1Anzahl)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Kupplungsanzahl des Deckels (Sperrholz)");

                entity.Property(e => e.NDDichtkpl1Breite)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Kupplungsbreite des Deckels (Sperrholz)");

                entity.Property(e => e.NDDichtkpl1Hoehe)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Kupplungshoehe des Deckels (Sperrholz)");

                entity.Property(e => e.NDDichtkpl1Laenge)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Kupplungslaenge des Deckels (Sperrholz)");

                entity.Property(e => e.NDDichtkpl2Anzahl)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Kupplungsanzahl des Deckels (Sperrholz)");

                entity.Property(e => e.NDDichtkpl2Breite)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Kupplungsbreite des Deckels (Sperrholz)");

                entity.Property(e => e.NDDichtkpl2Hoehe)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Kupplungshoehe des Deckels (Sperrholz)");

                entity.Property(e => e.NDDichtkpl2Laenge)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Kupplungslaenge des Deckels (Sperrholz)");

                entity.Property(e => e.NDKbAnzahl)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Kupplungsanzahl des Deckels");

                entity.Property(e => e.NDKbBreite)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Kupplungsbrett Breite des Deckels");

                entity.Property(e => e.NDKbHoehe)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Kupplungsbrett Hoehe des Deckels");

                entity.Property(e => e.NDKbLaenge)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Kupplungsbrett Laenge des Deckels");

                entity.Property(e => e.NDKplAnzahl)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Kupplungsanzahl des Deckels");

                entity.Property(e => e.NDKplBreite)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Kupplungsbreite des Deckels (aufegelegt Mass)");

                entity.Property(e => e.NDKplHoehe)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Kupplungsstaerke des Deckels");

                entity.Property(e => e.NDKplLaenge)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Kupplungslaenge des Deckels");

                entity.Property(e => e.NEigengewicht).HasComment("Eigengewicht der Verpackung");

                entity.Property(e => e.NGesamtgewicht).HasComment("Gesamtgewicht der VErpackung mit Stuetzflaechen");

                entity.Property(e => e.NKBrettAnzahl)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Kopfbrettanzahl");

                entity.Property(e => e.NKBrettAufgelegt)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Aufgelegtmass fuer Kopf");

                entity.Property(e => e.NKBrettBreite)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Kopfbrettbreite");

                entity.Property(e => e.NKBrettLaenge)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Kopfbrettlaenge");

                entity.Property(e => e.NKvhM3).HasComment("KVH was nur in Lk oder QK ist");

                entity.Property(e => e.NMrqAnzahl).HasComment("Minirahmenquerholz Anzahl");

                entity.Property(e => e.NMrqBreite).HasComment("Minirahmenquerholz Breite");

                entity.Property(e => e.NMrqHoehe).HasComment("Minirahmenquerholz Hoehe");

                entity.Property(e => e.NMrqLaenge).HasComment("Minirahmenquerholz Laenge");

                entity.Property(e => e.NOsbBeipackM2).HasComment("Quadratemeter aller Beipack OSBplatten");

                entity.Property(e => e.NPlattenM2).HasComment("Quadratmeter aller Plattenwerkstoffe");

                entity.Property(e => e.NPlattenM3).HasComment("Qubikmeter aller Plattenwerkstoffe");

                entity.Property(e => e.NQuadratmeter).HasComment("Aussenquadratmeter");

                entity.Property(e => e.NQubikmeter).HasComment("Qubikmeter");

                entity.Property(e => e.NRhAnzahl).HasComment("Rahmenholz Anzahl");

                entity.Property(e => e.NRhLaenge).HasComment("Rahmenholz Laenge");

                entity.Property(e => e.NRqAnzahl).HasComment("Rahmenquerholz Anzahl");

                entity.Property(e => e.NRqLaenge).HasComment("Rahmenquerholz Laenge");

                entity.Property(e => e.NSBrettAnzahl)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Seitenbrettanzahl");

                entity.Property(e => e.NSBrettAufgelegt)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Aufgelegtmass fuer Seite");

                entity.Property(e => e.NSBrettBreite)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Seitenbrettbreite");

                entity.Property(e => e.NSBrettLaenge)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Seitenbrettlaenge");

                entity.Property(e => e.NSKbAnzahl)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Kupplungsanzahl der Seite");

                entity.Property(e => e.NSKbBreite)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Kupplungsbrett Breite der Seite");

                entity.Property(e => e.NSKbHoehe)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Kupplungsbrett Hoehe der Seite");

                entity.Property(e => e.NSKbLaenge)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Kupplungsbrett Laenge der Seite");

                entity.Property(e => e.NSKplAnzahl)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Kupplungsanzahl der Seite");

                entity.Property(e => e.NSKplBreite)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Kupplungsbreite der Seite (aufegelegt Mass)");

                entity.Property(e => e.NSKplHoehe)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Kupplungsstaerke der Seite");

                entity.Property(e => e.NSchnittholzBeipackKonstrM3).HasComment("Qubikmeter aller BeipackKonstruktionshoelzer");

                entity.Property(e => e.NSchnittholzBeipackM3).HasComment("Qubikmeter aller Beipack Schnitthoelzer");

                entity.Property(e => e.NSchnittholzM3).HasComment("Qubikmeter aller Schnitthoelzer");

                entity.Property(e => e.NSdistanzLaenge)
                    .HasDefaultValueSql("'0'")
                    .HasComment("seitl. Distanzbretter");

                entity.Property(e => e.NSiebdruckBeipackM2).HasComment("Quadratemeter aller Beipack Siebdruckplatten");

                entity.Property(e => e.NSperrholzBeipackM2).HasComment("Quadratemeter aller Beipack Sperrholzplatten");

                entity.Property(e => e.NUmstellungQm).HasDefaultValueSql("'0.0000'");
            });

            modelBuilder.Entity<TVerpackungEinbauten>(entity =>
            {
                entity.HasKey(e => e.VerpId)
                    .HasName("PRIMARY");

                entity.HasComment("Einbauten wie Keil und Tangentenbogen, Keisbogen etc. die innerhalb einer Verpackung oder alleinstehend genutzt werden.");

                entity.Property(e => e.NColloBreite).HasDefaultValueSql("'0'");

                entity.Property(e => e.NColloHoehe).HasDefaultValueSql("'0'");

                entity.Property(e => e.NColloLaenge).HasDefaultValueSql("'0'");

                entity.Property(e => e.NColloTara).HasDefaultValueSql("'0'");

                entity.Property(e => e.NKurzfristigkeitszuschlagPreis).HasDefaultValueSql("'0.0000'");

                entity.Property(e => e.NRabatt).HasDefaultValueSql("'0'");

                entity.Property(e => e.NWaehrungId).HasDefaultValueSql("'0'");

                entity.Property(e => e.VerpAktiv).HasDefaultValueSql("'1'");

                entity.Property(e => e.VerpAnzahl).HasDefaultValueSql("'1'");

                entity.Property(e => e.VerpAnzahlGeliefert).HasDefaultValueSql("'0'");

                entity.Property(e => e.VerpAnzahlTransportiert).HasDefaultValueSql("'0'");

                entity.Property(e => e.VerpEinmalzuschlagPreis).HasDefaultValueSql("'0.0000'");

                entity.Property(e => e.VerpPrjId).HasDefaultValueSql("'0'");
            });

            modelBuilder.Entity<TVerpackungFremdDetail>(entity =>
            {
                entity.HasKey(e => new { e.NMainId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Die einzelnen MA der Fremdfirma, die der Verpackung zugeordnet wurden");

                entity.Property(e => e.NId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<TVerpackungFremdMain>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Leiharbeiterfirmen die Verpackungen zugeordnet werden. Dient der Rechnungsstellung welche Firma / MA wieviel verpackt hat.");
            });

            modelBuilder.Entity<TVerpackungKundeChecker>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Hinweise für die Erstellung der Verpackung");
            });

            modelBuilder.Entity<TVerpackungKundeCheckerStd>(entity =>
            {
                entity.HasKey(e => e.NKundeId)
                    .HasName("PRIMARY");

                entity.HasComment("Mögliche Checkliste die vor dem Ausdruck geprüft werden");

                entity.Property(e => e.NKundeId).ValueGeneratedNever();

                entity.Property(e => e.NBeiblattMarkierungPruefen)
                    .HasDefaultValueSql("'0'")
                    .HasComment("1=Hinweis wenn keine Markeirung eingtragen wurde beim Drucken");
            });

            modelBuilder.Entity<TVerpackungMachine>(entity =>
            {
                entity.HasKey(e => new { e.CId, e.NVerpTypId, e.NVerpId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                entity.HasComment("Statik - Maschine mit ihren Eigenschaften die bei der statischen Berechnung der Verpackung hinzugefügt wurde");

                entity.Property(e => e.NTrageigenschaftId)
                    .HasDefaultValueSql("'1'")
                    .HasComment("kat_grp=96");
            });

            modelBuilder.Entity<TVerpackungMain>(entity =>
            {
                entity.HasKey(e => new { e.NId, e.NTypId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Haupdatensatz der Verpackungen Kiste, Palette und Verschlag mit Eigenschaften.");

                entity.Property(e => e.CId).HasComment("Eindeutige ID der Verpackung");

                entity.Property(e => e.NBreite)
                    .HasDefaultValueSql("'0'")
                    .HasComment("eingegeben breite");

                entity.Property(e => e.NColloBreite).HasDefaultValueSql("'0'");

                entity.Property(e => e.NColloHoehe).HasDefaultValueSql("'0'");

                entity.Property(e => e.NColloLaenge).HasDefaultValueSql("'0'");

                entity.Property(e => e.NColloTara).HasDefaultValueSql("'0'");

                entity.Property(e => e.NFremdVerpfirmaId).HasComment("t_verpackung_fremd_main.n_id");

                entity.Property(e => e.NHoehe)
                    .HasDefaultValueSql("'0'")
                    .HasComment("eingegeben hoehe");

                entity.Property(e => e.NHolzbehandlungId).HasDefaultValueSql("'0'");

                entity.Property(e => e.NKostenstelleId).HasComment("t_kostenstelle");

                entity.Property(e => e.NKstrIsSteckkiste)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Kistentyp-Steckkiste für VTT Verbinder");

                entity.Property(e => e.NKuerzelId).HasComment("kat_grp=150");

                entity.Property(e => e.NLaenge)
                    .HasDefaultValueSql("'0'")
                    .HasComment("eingegeben laenge");

                entity.Property(e => e.NQuadratmeter).HasDefaultValueSql("'0.0000'");

                entity.Property(e => e.NRabatt).HasDefaultValueSql("'0'");

                entity.Property(e => e.NSeem).HasDefaultValueSql("'0'");

                entity.Property(e => e.NTaraEinbauten)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Taragewicht Einbauten");

                entity.Property(e => e.NVerpPreiskatId).HasComment("Preiskategorie über die, die Fremdfirmen berechnet werden");

                entity.Property(e => e.NVp).HasDefaultValueSql("'0'");

                entity.Property(e => e.NWaehrungId).HasDefaultValueSql("'0'");

                entity.Property(e => e.NZn).HasDefaultValueSql("'0'");
            });

            modelBuilder.Entity<TVerpackungMulti>(entity =>
            {
                entity.HasKey(e => new { e.NAuftragId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Erfassung von mehreren Verpackungen aus denen die einzelnen Verpckungen t_verpackung und t_palette geneiert werden. Dient zur Massenerfassung bei Angeboten mit sehr vielen Verpackungen.");

                entity.Property(e => e.NId).ValueGeneratedOnAdd();

                entity.Property(e => e.NBreiteM)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Maschinenbreite");

                entity.Property(e => e.NHoeheM)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Maschinenhoehe");

                entity.Property(e => e.NKhBerechnen)
                    .HasDefaultValueSql("'0'")
                    .HasComment("kanhoelzer nach Gewicht berechnen");

                entity.Property(e => e.NLaengeM)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Maschinenlaenge");

                entity.Property(e => e.NVerpGruppenTyp)
                    .HasDefaultValueSql("'0'")
                    .HasComment("1=Cratemaker-Typ, 2=Kiste, 3=Palette, 4=Verschlag");

                entity.Property(e => e.NVerpacken).HasComment("0=unverpackt, 1=vp, 2=seem");
            });

            modelBuilder.Entity<TVerpackungNrList>(entity =>
            {
                entity.HasKey(e => new { e.NVerptypId, e.NVerpId, e.NVerpSubId, e.CNr })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

                entity.HasComment("Eine Einzelauflistung der Verpnummern 1+3 -> 3 Datensaetze");

                entity.Property(e => e.NVerpSubId).HasComment("wird fuer Holzprodukte genutzt");

                entity.Property(e => e.CNr).HasDefaultValueSql("''");

                entity.Property(e => e.NBruttoTheoretisch).HasDefaultValueSql("'0'");

                entity.Property(e => e.NPdeclaration).HasDefaultValueSql("'0'");

                entity.Property(e => e.NStatus).HasComment("kat_grp=81");

                entity.Property(e => e.NWaehrungId)
                    .HasDefaultValueSql("'1'")
                    .HasComment("kat_grp=25");
            });

            modelBuilder.Entity<TVerpackungNrListSmall>(entity =>
            {
                entity.HasKey(e => new { e.NVerptypId, e.NVerpId, e.NVerpSubId, e.CNr })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

                entity.HasComment("Eine Einzelauflistung der Verpnummern 1+3 -> 3 Datensaetze");

                entity.Property(e => e.NVerpSubId).HasComment("wird fuer Holzprodukte genutzt");

                entity.Property(e => e.CNr).HasDefaultValueSql("''");

                entity.Property(e => e.NStatus).HasComment("kat_grp=81");
            });

            modelBuilder.Entity<TVerpackungPreiskat>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Preiskategorien für Fremdverpacker mit einem Standardpreis (Einkaufspreis)");
            });

            modelBuilder.Entity<TVerpackungPreiskatLief>(entity =>
            {
                entity.HasKey(e => new { e.NLiefId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Preisdefinition der Kategorien zum Lieferanten / Fremdverpacker");

                entity.Property(e => e.NLiefId).HasComment("t_firma.firmakey");

                entity.Property(e => e.NId).HasComment("t_verpackung_preiskat.n_id");
            });

            modelBuilder.Entity<TVerpackungSonstigesHolz>(entity =>
            {
                entity.HasKey(e => new { e.CVerpId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Speichert Hölzer wie Auffütterung auf QK, Ecksteher, Zwischenbretter durch Plattenwerkstoffe auf Stoß");

                entity.Property(e => e.CVerpId).HasComment("Eindeutige ID der Verpackung");

                entity.Property(e => e.NId).ValueGeneratedOnAdd();

                entity.Property(e => e.NDetailTypId).HasComment("HolzElementDetailTyp in Holz.h");

                entity.Property(e => e.NHolzTypId).HasComment("Holztyp in Holz.h, 1=Kantholz, 2=Brett, 3=Plattenw.");

                entity.Property(e => e.NHolzbehandlungId)
                    .HasDefaultValueSql("'3'")
                    .HasComment("kat_grp=5");

                entity.Property(e => e.NMaterialId)
                    .HasDefaultValueSql("'1'")
                    .HasComment("kat_grp=1");
            });

            modelBuilder.Entity<TVerpackungStaffelprei>(entity =>
            {
                entity.HasKey(e => new { e.CId, e.NKundeId, e.NAbAnzahl })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                entity.HasComment("Staffelpreise in Abhängigkeit der Anzahl und Kunden");

                entity.Property(e => e.NAbAnzahl).HasComment("Preis gilt ab dieser Anzahl");
            });

            modelBuilder.Entity<TVerpackungStatikParam>(entity =>
            {
                entity.HasKey(e => new { e.NVerpId, e.NVerpTypId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Statikparameter für eine Verpackung die mit der Statik berechnet wird.");

                entity.Property(e => e.NBelastungsTypId).HasComment("t_statik_belastungstyp.n_id");

                entity.Property(e => e.NHolzklasseId).HasComment("t_holz_klassen.n_id");
            });

            modelBuilder.Entity<TVerpackungStatusZeiten>(entity =>
            {
                entity.HasKey(e => new { e.NVerpId, e.NVerpSubId, e.NVerpTypId, e.CNr })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

                entity.HasComment("Daten wie Montage-Ende, Verpackungs-Ende und Geliefert zu einer Verpackung. Daten werden über das Einscannen der Statusblätter gesetzt.");
            });

            modelBuilder.Entity<TVerpackungStuetzflaechen>(entity =>
            {
                entity.HasKey(e => new { e.CId, e.CMachineId, e.NVerpTypId, e.NVerpId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

                entity.HasComment("Erfassten Stützflächen einer Verpackung zu statischen Berechnung. DIe Stützflächen haben eine Referenz auf die zuvor erfasste Maschine");

                entity.Property(e => e.NPosAbsolut)
                    .HasDefaultValueSql("'0'")
                    .HasComment("1=Position ist zum Boden");
            });

            modelBuilder.Entity<TVerpackungTypMapping>(entity =>
            {
                entity.HasKey(e => e.NTypId)
                    .HasName("PRIMARY");

                entity.Property(e => e.NTypId).ValueGeneratedNever();
            });

            modelBuilder.Entity<TVerpackungZeiten>(entity =>
            {
                entity.HasKey(e => new { e.NVerpId, e.NVerpSubId, e.NVerpTypId, e.CNr, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0, 0 });

                entity.HasComment("Pro Statusänderung einer Verpackung wird hier ein Datensatz geschrieben. Es können aber auch auch durch mehrfaches Einscannen identische Stati geschrieben werden.");

                entity.Property(e => e.NId).ValueGeneratedOnAdd();

                entity.Property(e => e.NTypeId).HasComment("kat_grp=81");
            });

            modelBuilder.Entity<TVerpackungsNr>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Wird für die Generierung der Verpackungs-Nr. innerhalb eines Auftrags benötigt.");

                entity.Property(e => e.DCreated).HasDefaultValueSql("'0000-00-00 00:00:00'");

                entity.Property(e => e.NAuftragId).HasDefaultValueSql("'0'");

                entity.Property(e => e.NKundeId).HasDefaultValueSql("'0'");

                entity.Property(e => e.NPrjId).HasDefaultValueSql("'0'");
            });

            modelBuilder.Entity<TVerpackungsNrEinbauten>(entity =>
            {
                entity.HasKey(e => new { e.NId, e.NTypId, e.NSubId, e.NNr })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

                entity.HasComment("Speichert alle Nr. der Einbauten innerhalb einer Verpackung");

                entity.Property(e => e.NNr).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<TVersandArtikel>(entity =>
            {
                entity.HasKey(e => new { e.NKundeId, e.NId, e.NAuftragId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                entity.HasComment("Tabelle für das Losteilsystem. Hier werden alle Artikel zu den Losteilaufträgen gespeichert.");

                entity.Property(e => e.NId).ValueGeneratedOnAdd();

                entity.Property(e => e.NAuftragId).HasComment("FK t_auftrag_n.id");

                entity.Property(e => e.DImportDatum).HasDefaultValueSql("'0000-00-00'");

                entity.Property(e => e.NActive).HasDefaultValueSql("'1'");

                entity.Property(e => e.NPositionsNr).HasDefaultValueSql("'0'");
            });

            modelBuilder.Entity<TVersandArtikelAufmass>(entity =>
            {
                entity.HasKey(e => new { e.NKundeId, e.NAuftragId, e.NVersandArtikelId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

                entity.HasComment("Losteilsystem - aktuell deaktiviert. Verknüpft die Losteile beim Aufmass mit den Verpackungen.");

                entity.Property(e => e.DCreated).HasDefaultValueSql("'0000-00-00 00:00:00'");
            });

            modelBuilder.Entity<TVersandArtikelBlacklist>(entity =>
            {
                entity.HasKey(e => new { e.NKundeId, e.NAuftragId, e.CFrachtTeilNr })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                entity.HasComment("Liste der Losteile die vom Kunden deaktiviert wurden bzw. nicht mehr genutzt/verpackt werden dürfen.");
            });

            modelBuilder.Entity<TVersandArtikelVerpackung>(entity =>
            {
                entity.HasKey(e => new { e.NKundeId, e.NAuftragId, e.NVersandArtikelId, e.NVersandArtikelAuftragId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0, 0 });

                entity.HasComment("Zuordnung der Losteile zu den Verpackungen");

                entity.Property(e => e.NVersandArtikelId).HasComment("FK t_versand_artikel.n_id");

                entity.Property(e => e.DCreated).HasDefaultValueSql("'0000-00-00 00:00:00'");
            });

            modelBuilder.Entity<TVersandArtikelWareneing>(entity =>
            {
                entity.HasKey(e => new { e.NWareneingangId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Losteilsystem - Zuteilung der Losteile zu den Wareneingangspackstücken");

                entity.Property(e => e.NId).ValueGeneratedOnAdd();

                entity.Property(e => e.DCreated).HasDefaultValueSql("'0000-00-00 00:00:00'");

                entity.Property(e => e.NAbweichung).HasDefaultValueSql("'0'");
            });

            modelBuilder.Entity<TVersandColli>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Losteilsystem - Aktuell deaktiviert");

                entity.Property(e => e.DCreated).HasDefaultValueSql("'0000-00-00 00:00:00'");

                entity.Property(e => e.NContTypId).HasDefaultValueSql("'0'");
            });

            modelBuilder.Entity<TVersandContainer>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Losteilsystem - Aktuell deaktiviert");

                entity.Property(e => e.DCreated).HasDefaultValueSql("'0000-00-00 00:00:00'");
            });

            modelBuilder.Entity<TVersandImportConf>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Losteilsystem - Speichert die Importkonfiguration. Mapping der Excelspalten auf die Datenbankfelder");
            });

            modelBuilder.Entity<TVersandLabelBegleitliste>(entity =>
            {
                entity.HasKey(e => new { e.NKundeId, e.NAuftragId, e.NArtikelId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                entity.HasComment("Losteilsystem - Liste der bereits gedrcukten Losteil-Etiketten um den Doppeldruck zu vermeiden.");

                entity.Property(e => e.NArtikelId).HasComment("t_versand_artikel.n_id");

                entity.Property(e => e.DCreated).HasDefaultValueSql("CURRENT_TIMESTAMP");
            });

            modelBuilder.Entity<TVersandLkw>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Losteilsystem - aktuell deaktiviert");

                entity.Property(e => e.CFahrer).HasDefaultValueSql("'0'");

                entity.Property(e => e.CLkwKennzeichen).HasDefaultValueSql("''");

                entity.Property(e => e.CTransporteur).HasDefaultValueSql("'0'");

                entity.Property(e => e.DCreated).HasDefaultValueSql("'0000-00-00 00:00:00'");
            });

            modelBuilder.Entity<TVersandPackstueck>(entity =>
            {
                entity.HasKey(e => new { e.NKundeId, e.CNr, e.NAuftragId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                entity.HasComment("Losteilsystem - Liste der Packstücke die für den Versand genutzt werden");

                entity.Property(e => e.NLockSync).HasComment("No sync from t_verpackung_berech");

                entity.Property(e => e.NVersandLkwId).HasComment("FK t_versand_lkw");
            });

            modelBuilder.Entity<TVlieferschein>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Kopfdaten zum Vormateriallieferschein");

                entity.Property(e => e.DGeaendertAm).HasComment("Datum wann der Datensatz geändert wurde");

                entity.Property(e => e.DGedruckt).HasComment("Zeit wann Lieferschein gedruckt wurde");

                entity.Property(e => e.DLieferTermin)
                    .HasDefaultValueSql("'0000-00-00'")
                    .HasComment("Eindeutig mit lieferschein Id");

                entity.Property(e => e.DLieferscheinDatum).HasComment("Lieferschein Ausstellungsdatum");

                entity.Property(e => e.NUserIdErstellt).HasComment("ID des Benutzers der den Datensatz erstellt hat.");

                entity.Property(e => e.NUserIdGeaendert).HasComment("ID des Benutzers der den Datensatz geändert hat.");
            });

            modelBuilder.Entity<TVlieferscheinPosten>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Posten zum Vormateriallieferschein");

                entity.Property(e => e.DCreated)
                    .ValueGeneratedOnAddOrUpdate()
                    .HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.NAuftragId).HasDefaultValueSql("'0'");

                entity.Property(e => e.NEinzelgewicht).HasComment("0=Gesamtgewicht; 1=Einzelgewicht' AFTER `n_gewicht_brutto");

                entity.Property(e => e.NPosition).HasDefaultValueSql("'0'");
            });

            modelBuilder.Entity<TWareneingang>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Kopfdaten des Wareneingangs");

                entity.Property(e => e.DEingangsdatum).HasDefaultValueSql("'0000-00-00'");

                entity.Property(e => e.NBestellId).HasDefaultValueSql("'0'");

                entity.Property(e => e.NLieferungsartId).HasComment("kat_grp=12");

                entity.Property(e => e.NNichtVerrechenbar).HasDefaultValueSql("'0'");

                entity.Property(e => e.NNiederlassungId)
                    .HasDefaultValueSql("'1'")
                    .HasComment("ID der Niederderlassung vom Login");
            });

            modelBuilder.Entity<TWareneingangartikel>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Artikel die dem Wareneingangspackstück zugeordnet wurden.");

                entity.Property(e => e.DCreated)
                    .ValueGeneratedOnAddOrUpdate()
                    .HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.NAnzahl).HasComment("Anzahl der Einlagerung");

                entity.Property(e => e.NEinheitId).HasComment("Einheit der Einlagerung");

                entity.Property(e => e.NEinzelnEinlagern).HasDefaultValueSql("'0'");

                entity.Property(e => e.NLiefAnzahlStueck)
                    .HasDefaultValueSql("'0.0000'")
                    .HasComment("Wird genutzt fuer die Chargenverfolgung von Holz. Eingabe von Anzahl in der Einheit Stück. Dadurch können auch die Qubikmeter berechnet werden.");
            });

            modelBuilder.Entity<TWareneingangpackstueck>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Packstücke zum Wareneingang");

                entity.Property(e => e.NAnzahl).HasDefaultValueSql("'1'");

                entity.Property(e => e.NBreiteBauteil)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Breite des Bauteils auf dem Packstück");

                entity.Property(e => e.NGefahgut).HasDefaultValueSql("'0'");

                entity.Property(e => e.NGetauscht).HasDefaultValueSql("'0'");

                entity.Property(e => e.NHoeheBauteil)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Höhe des Bauteils auf dem Packstück");

                entity.Property(e => e.NLaengeBauteil)
                    .HasDefaultValueSql("'0'")
                    .HasComment("Länge des Bauteils auf dem Packstück");

                entity.Property(e => e.NNichtVerrechenbar).HasDefaultValueSql("'0'");

                entity.Property(e => e.NPackstueckAufgeteilt).HasDefaultValueSql("'0'");

                entity.Property(e => e.NPackstueckIsIppc).HasDefaultValueSql("'0'");

                entity.Property(e => e.NPackstueckNeuVp).HasDefaultValueSql("'0'");

                entity.Property(e => e.NVerpackungsTyp).HasComment("kat_grp=11");
            });

            modelBuilder.Entity<TWareneingangpackstueckBarcode>(entity =>
            {
                entity.HasKey(e => new { e.NYear, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Tabelle wird für die Genrierung des Wareingangspackstück Barcodes benötigt");

                entity.Property(e => e.NId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<TWhatsNew>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Speichert alle Änderungen die in einem Update von Cratemaker erwähneswert sind.");

                entity.Property(e => e.NModule).HasComment("0=Allg, 1=Basis, 2=Lager, 3=Versand, 4=Auftrag, 5=3D, 6=Bestell, 7=combit, 8=Kalk, 9=Termin, 10= Container, 11=Design, 12=Stat");

                entity.Property(e => e.NType)
                    .HasDefaultValueSql("'1'")
                    .HasComment("2=new feature, 1=error solved");
            });

            modelBuilder.Entity<TWorkerBestellung>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Noch in Planung. MA die mit dem Worker arbeiten sollen Bestellung von Artikeln dem Büro mitteilen können.");

                entity.Property(e => e.DBestellDatum).HasDefaultValueSql("'0000-00-00'");

                entity.Property(e => e.NUserId).HasDefaultValueSql("'0'");
            });

            modelBuilder.Entity<TWorkerBestellungPo>(entity =>
            {
                entity.HasKey(e => new { e.NBestellungId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Noch in Planung. MA die mit dem Worker arbeiten sollen Bestellung von Artikeln dem Büro mitteilen können. Hier werden die einzelnen Position der Bestellung gespeichert.");

                entity.Property(e => e.NId).ValueGeneratedOnAdd();

                entity.Property(e => e.NEinheitId).HasDefaultValueSql("'0'");
            });

            modelBuilder.Entity<TZuschnittPlattenwerkstoff>(entity =>
            {
                entity.HasKey(e => new { e.CId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Tabelle für den Grobplanung der Zuschnitte der Plattenwerkstoffe für die Sägen mit Schnittstelle.");

                entity.Property(e => e.NId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<TZuschnittPlattenwerkstoffFinal>(entity =>
            {
                entity.HasKey(e => new { e.CId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Finale Werte der Plattenaufteilung in Abhängigkeit der existierenden Plattenmasse und zu berücksichitigen Parameter.");

                entity.Property(e => e.NId).ValueGeneratedOnAdd();

                entity.Property(e => e.NHolzDetailTyp).HasComment("siehe HolzElementDetailTyp 36=Verschalung Kopf, 37=Verscahlung Seite, 38=Verschalung Deckel");
            });

            modelBuilder.Entity<TZuschnittSchnittholz>(entity =>
            {
                entity.HasKey(e => new { e.CId, e.NId })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("Daten der Zuschnitte für die Schnittholzsägen, die an die entsprechende Zuschnittstation geschickt werden.");

                entity.Property(e => e.NId).ValueGeneratedOnAdd();

                entity.Property(e => e.NBreiteOrg).HasDefaultValueSql("'0'");

                entity.Property(e => e.NEndeAngeschraegt).HasDefaultValueSql("'0'");

                entity.Property(e => e.NHolzDetailTyp).HasDefaultValueSql("'0'");

                entity.Property(e => e.NIsFlaeche).HasDefaultValueSql("'0'");
            });

            modelBuilder.Entity<TZuschnittStation>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Die aktuell unterstützen Schnittstellen der Zuschnittstationen wie Dimter, Hundegger, etc.");
            });

            modelBuilder.Entity<TZuschnittStationCfg>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Die konfigurierten Zuschnittstation die in der Firma existieren");

                entity.Property(e => e.NRestBrettTrennen)
                    .HasDefaultValueSql("'1'")
                    .HasComment("1=trennen, 2=ganzes dabei, 3=ohne");

                entity.Property(e => e.NStationHolzId).HasComment("t_zuschnitt_station_holzart.n_id");

                entity.Property(e => e.NStationId).HasComment("t_zuschnitt_station.n_id");
            });

            modelBuilder.Entity<TZuschnittStationHolzart>(entity =>
            {
                entity.HasKey(e => e.NId)
                    .HasName("PRIMARY");

                entity.HasComment("Die möglichen Holzarten (Schnittholz, Plattenwerkstoff) die von den Zuschnittstationen unterstützt werden.");

                entity.Property(e => e.NId).ValueGeneratedNever();
            });

            OnModelCreatingPartial(modelBuilder);
        }

        protected override void ConfigureConventions(ModelConfigurationBuilder builder)
        {
            builder.Properties<DateOnly>()
                .HaveConversion<DateOnlyConverter>()
                .HaveColumnType("date");

            //builder.Properties<TimeOnly>()
            //    .HaveConversion<TimeOnlyConverter>()
            //    .HaveColumnType("time");
        }
        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
    public class DateOnlyConverter : ValueConverter<DateOnly, DateTime>
    {
        /// <summary>
        /// Creates a new instance of this converter.
        /// </summary>
        public DateOnlyConverter() : base(
                d => d.ToDateTime(TimeOnly.MinValue),
                d => DateOnly.FromDateTime(d))
        { }
    }

}